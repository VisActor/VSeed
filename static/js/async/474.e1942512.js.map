{"version":3,"file":"static/js/async/474.e1942512.js","sources":["webpack://website/./docs/en-US/galley/api/updateSpec.mdx"],"sourcesContent":["const frontmatter = {\"pageType\":\"doc\"};\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Playground from \"/home/runner/work/VSeed/VSeed/node_modules/.pnpm/@rspress+plugin-playground@1.45.0_@rspress+core@1.45.0_webpack@5.101.0__monaco-editor@0_77af6e307fc0823c3fa3d293b9873930/node_modules/@rspress/plugin-playground/static/global-components/Playground.tsx\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"updatespec\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#updatespec\",\n        children: \"#\"\n      }), \"updateSpec\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"分段面积图\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#分段面积图\",\n        children: \"#\"\n      }), \"分段面积图\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'areaRange',\\n    dataset: [\\n      { date: '2019', region: 'east', city: 'A', profit: 10, sales: 60 },\\n      { date: '2019', region: 'east', city: 'B', profit: 30, sales: 60 },\\n      { date: '2019', region: 'east', city: 'C', profit: 30, sales: 60 },\\n      { date: '2019', region: 'east', city: 'D', profit: 50, sales: 60 },\\n      { date: '2019', region: 'east', city: 'E', profit: 40, sales: 60 },\\n      { date: '2020', region: 'east', city: 'A', profit: 100, sales: 60 },\\n      { date: '2020', region: 'east', city: 'B', profit: 123, sales: 60 },\\n      { date: '2020', region: 'east', city: 'C', profit: 134, sales: 60 },\\n      { date: '2020', region: 'east', city: 'D', profit: 111, sales: 60 },\\n      { date: '2020', region: 'east', city: 'E', profit: 210, sales: 60 },\\n    ],\\n    dimensions: [{ id: 'date' }, { id: 'city' }],\\n    measures: [{ id: 'profit' }, { id: 'sales' }],\\n    annotationHorizontalLine: {\\n      yValue: 60,\\n      text: 'text',\\n      textAlign: 'left',\\n      textPosition: 'insideStart',\\n    },\\n  }\\n\\n  updateSpec('areaRange', (spec, context) => {\\n    const { vseed } = context\\n\\n    const maxValue = Math.max(...vseed.dataset.map((d) => d.profit))\\n    const minValue = Math.min(...vseed.dataset.map((d) => d.profit))\\n    const middle = 60\\n    const percent = (maxValue - middle) / (maxValue - minValue)\\n\\n    spec.series[0].area = {\\n      style: {\\n        curveType: 'monotoneX',\\n        fillOpacity: 0.15,\\n        fill: {\\n          gradient: 'linear',\\n          x0: 0.5,\\n          y0: 0,\\n          x1: 0.5,\\n          y1: 1,\\n          stops: [\\n            {\\n              offset: 0,\\n              color: '#5766EC',\\n            },\\n            {\\n              offset: percent,\\n              color: 'rgba(0,0,255,0)',\\n            },\\n            {\\n              offset: percent,\\n              color: 'rgba(255,0,255,0)',\\n            },\\n            {\\n              offset: 1,\\n              color: '#5766EC',\\n            },\\n          ],\\n        },\\n      },\\n    }\\n    spec.series[1].line = {\\n      style: {\\n        visible: true,\\n        curveType: 'monotoneX',\\n        stroke: {\\n          gradient: 'linear',\\n          x0: 0.5,\\n          y0: 0,\\n          x1: 0.5,\\n          y1: 1,\\n          stops: [\\n            {\\n              offset: 0,\\n              color: 'blue',\\n            },\\n            {\\n              offset: percent,\\n              color: 'blue',\\n            },\\n            {\\n              offset: percent,\\n              color: 'red',\\n            },\\n            {\\n              offset: 1,\\n              color: 'red',\\n            },\\n          ],\\n        },\\n      },\\n    }\\n    spec.series[2].line = {\\n      style: {\\n        visible: false,\\n        curveType: 'monotoneX',\\n      },\\n    }\\n    spec.markLine[0].startSymbol = {\\n      visible: true,\\n      style: {\\n        angle: 90,\\n      },\\n    }\\n    spec.markLine[0].endSymbol = {\\n      visible: false,\\n    }\\n    return spec\\n  })\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect } from 'react'\\nimport { useDark } from 'rspress/runtime'\\nimport VChart from '@visactor/vchart'\\nimport { ListTable, PivotTable, PivotChart, register } from '@visactor/vtable'\\nimport {\\n  registerAll,\\n  VSeed,\\n  Builder,\\n  isPivotChart,\\n  isVChart,\\n  isPivotTable,\\n  isTable,\\n  zVSeed,\\n  updateSpec,\\n} from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>()\\n  const dark = useDark()\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else if (isPivotTable(vseed)) {\\n      const tableInstance = new PivotTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return (\\n    <div\\n      ref={ref}\\n      style={{ height: 300, width: '100%' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current.spec)\\n        console.log('vseed', builderRef.current.vseed)\\n        console.log('advancedVSeed', builderRef.current.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    ></div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"\",\n      editorPosition: \"left\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n\nMDXContent.__RSPRESS_PAGE_META = {};\n\nMDXContent.__RSPRESS_PAGE_META[\"en-US%2Fgalley%2Fapi%2FupdateSpec.mdx\"] = {\"toc\":[{\"id\":\"分段面积图\",\"text\":\"分段面积图\",\"depth\":2}],\"title\":\"updateSpec\",\"headingTitle\":\"updateSpec\",\"frontmatter\":{\"pageType\":\"doc\"}};\n"],"names":["_createMdxContent","props","_components","Object","_provideComponents","_jsxs","_Fragment","_jsx","Playground","MDXContent","MDXLayout"],"mappings":"2KAKA,SAASA,EAAkBC,CAAK,EAC9B,IAAMC,EAAcC,OAAO,MAAM,CAAC,CAChC,GAAI,KACJ,EAAG,IACH,GAAI,IACN,EAAGC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAAsBH,EAAM,UAAU,EACzC,MAAOI,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMC,EAAAA,QAASA,CAAE,CACtB,SAAU,CAACD,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC/B,GAAI,aACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,cACN,SAAU,GACZ,GAAI,aAAa,AACnB,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,QACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,SACN,SAAU,GACZ,GAAI,QAAQ,AACd,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKC,EAAAA,CAAUA,CAAE,CACzB,KAAM,smKACN,SAAU,MACV,UAAW,GACX,eAAgB,MAClB,GAAG,AACL,EACF,CACA,SAASC,I,IAAWR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,AAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAQ,CAAC,EACrB,CAAC,QAASS,CAAS,CAAC,CAAGP,OAAO,MAAM,CAAC,CAAC,EAAGC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAAsBH,EAAM,UAAU,EACrF,OAAOS,EAAYH,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKG,EAAWP,OAAO,MAAM,CAAC,CAAC,EAAGF,EAAO,CAC1D,SAAUM,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKP,EAAmBC,EACpC,IAAMD,EAAkBC,EAC1B,CACA,MAAeQ,CAEfA,CAAAA,EAAW,mBAAmB,CAAG,CAAC,EAElCA,EAAW,mBAAmB,CAAC,wCAAwC,CAAG,CAAC,IAAM,CAAC,CAAC,GAAK,QAAQ,KAAO,QAAQ,MAAQ,CAAC,EAAE,CAAC,MAAQ,aAAa,aAAe,aAAa,YAAc,CAAC,SAAW,KAAK,CAAC,C"}