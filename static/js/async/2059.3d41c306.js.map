{"version":3,"file":"static/js/async/2059.3d41c306.js","sources":["webpack://website/./docs/zh-CN/development/designPhilosophy/pipeline/pipelineDesign.md"],"sourcesContent":["const frontmatter = {};\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Playground from \"/home/runner/work/VSeed/VSeed/node_modules/.pnpm/@rspress+plugin-playground@1.45.3_@rspress+core@2.0.0-beta.28_@types+react@18.0.0_acorn_f6d4f2a217c455639d7206d79af6fedc/node_modules/@rspress/plugin-playground/static/global-components/Playground.tsx\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    ul: \"ul\",\n    h4: \"h4\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"pipeline-设计\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#pipeline-设计\",\n        children: \"#\"\n      }), \"pipeline 设计\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rspress-directive info\",\n      children: [_jsx(_components.div, {\n        className: \"rspress-directive-title\",\n        children: \"Why Pipeline?\"\n      }), _jsx(_components.div, {\n        className: \"rspress-directive-content\",\n        children: _jsxs(_components.ol, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"团队内前辈们的选择\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Pipeline的优势, 可以让\", _jsx(_components.code, {\n              children: \"VSeed\"\n            }), \"独立控制每一个图表类型的执行流程, 通过良好的设计, 让每个图表类型的实现解耦的同时又可以局部复用, 每一类图表类型都可以对任何细节的进行完美掌控, 这是 Pipeline 带来的, 也是\", _jsx(_components.code, {\n              children: \"VSeed\"\n            }), \"最需要的.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"与之比起来, Pipeline模式的缺点都是可以在设计时避免的, 只要在设计\", _jsx(_components.code, {\n              children: \"Pipe\"\n            }), \"时, 降低单个\", _jsx(_components.code, {\n              children: \"Pipe\"\n            }), \"的规模, 减少\", _jsx(_components.code, {\n              children: \"Pipe\"\n            }), \"之间的依赖, 就可以极大的避免这套模式带来的缺点\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"经过四代的Pipeline的设计与优化, 到VSeed这里已经是第五个版本, 该踩的坑已经踩过了.\"\n          }), \"\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"什么是-pipeline\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#什么是-pipeline\",\n        children: \"#\"\n      }), \"什么是 Pipeline？\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pipeline 是一种强大的抽象和工程实践， 旨在将一项复杂任务分解为一系列相互连接、按顺序执行的较小步骤， 其设计理念和实现方式深受函数式编程（FP）核心思想的深刻影响。\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"pipeline-的优势\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#pipeline-的优势\",\n        children: \"#\"\n      }), \"Pipeline 的优势:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"模块化： 原子化实现， 通过组合原子得到模块\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"自动化： 只需确定输入， 即可自动得到输出， 而无需关注内部实现。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"纯函数： 指定输入， 一定得到预期输出， 是纯函数的特征。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"并行性： 天然支持并发。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"可重用性： 每一个模块， 均可复用。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"可测试性： 理论上, 每个模块都是独立的， 可以单独测试， 确保质量。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"可追踪性： 每个阶段的输入输出清晰，便于定位问题和监控流程状态。\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"可缓存性： 理论上, 可以单独缓存单个\", _jsx(_components.code, {\n          children: \"Pipe\"\n        }), \"的输出, 所以可以避免重复计算， 提高效率。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"pipeline-的缺点\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#pipeline-的缺点\",\n        children: \"#\"\n      }), \"Pipeline 的缺点:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"先后依赖： 当Pipe之间存在先后依赖时, 会使得理解成本增加, 因为你需要先理解前面的阶段， 才能理解后面的阶段。需要对整体流程有较深入的理解， 才能快速定位问题。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"调试成本： 由于 Pipeline 是按顺序执行的， 一旦某个阶段失败， 就会导致整个 Pipeline 失败。 这使得调试变得困难， 因为你需要定位失败的阶段， 并修复它。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"性能问题： 由于 Pipeline 是按顺序执行的， 每个阶段的输出都需要等待前一个阶段完成， 这会导致性能问题。 特别是当某个阶段的执行时间较长时， 会影响整个 Pipeline 的执行效率。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"函数式编程：  要理解全新的概念, 有一定的学习成本. 也是因此, 设计原理和实现细节需要写在贡献指南里, 方便其他开发者理解和使用, 弥补劣势.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"vseed内应该如何编写pipeline\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#vseed内应该如何编写pipeline\",\n        children: \"#\"\n      }), \"VSeed内应该如何编写Pipeline?\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"pipe-组合模式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#pipe-组合模式\",\n        children: \"#\"\n      }), \"Pipe 组合模式\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"多个功能Pipe, 可以组合成一个更大的功能Pipe, 也可以组合成一个更复杂的Pipeline.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在VSeed中, 一个完整的Pipeline, 对应着一个图表类型的实现；通过描述Pipe的组合关系, 就能做出不同的图表类型. 在Pipeline组合阶段, 无需关注每个pipe的具体实现.\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"组合差异\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#组合差异\",\n        children: \"#\"\n      }), \"组合差异\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"举个例子:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"折线图和面积图有大量功能可以复用, 例如标签、图例、坐标轴等, 但折线图没有面图元样式, 因此pipeline就通过组合功能Pipe, 解决上述差异, 整个过程中没有任何if语句.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const lineChartPipeline = [\\n  label,\\n  legend,\\n  xAxis,\\n  yAxis,\\n  lineStyle,\\n  pointStyle,\\n]\\n\\nconst areaChartPipeline = [\\n  label,\\n  legend,\\n  xAxis,\\n  yAxis,\\n  lineStyle,\\n  pointStyle,\\n\\n  // 仅面积图有面图元样式\\n  areaStyle,\\n]\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"pipe-适配器模式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#pipe-适配器模式\",\n        children: \"#\"\n      }), \"Pipe 适配器模式\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"除了组合模式外, Pipe的构建往往有一定的条件, 为了满足不同条件下的Pipe组合, VSeed内大量使用了Pipe适配器\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"组合条件\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#组合条件\",\n        children: \"#\"\n      }), \"组合条件\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"举个例子:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"折线图有透视功能, 无透视时由VChart渲染, 输出VChart spec, 有透视时由VTable渲染, 输出VTable spec.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"透视折线图有基本上需要复用折线图的基本功能, 例如标签、图例、坐标轴等, 因此需要通过适配器模式, 将折线图的Pipe, 适配成透视折线图的Pipe.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const pivotLineChartPipeline = [\\n  initPivotChart,\\n  pivotIndicators([\\n    label,\\n    xAxis,\\n    yAxis,\\n    lineStyle,\\n    pointStyle,\\n  ]),\\n  pivotChartLegend,\\n] \\n\\nconst commonLineChartPipeline = [\\n  label,\\n  legend,\\n  xAxis,\\n  yAxis,\\n  lineStyle,\\n  pointStyle,\\n]\\n\\nconst lineChartPipeline = [\\n  pivotAdapter(commonLineChartPipeline, pivotLineChartPipeline)\\n]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"综上, 每一个adapter就是一条if else, 可以将pipe内隐藏的条件, 抽象成一个adapter, 因此if else前置到了最顶层, 从而获得依赖关系更清晰的Pipeline, 减少维护成本.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"pipeline-的最基本单元-功能-pipe\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#pipeline-的最基本单元-功能-pipe\",\n        children: \"#\"\n      }), \"Pipeline 的最基本单元： 功能 Pipe\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"VSeed期望所有的图表类型, 都以功能为最基本的单元， 提供足够的复用与扩展能力； 自底向上构建一个图表类型的 pipeline； 每个功能Pipe, 都应该是一个独立的、 可测试的、 可复用的模块；\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"其中最关键的是, 应该以功能差异抽象出不同的Pipe(即少写if else), 而非写一个大而全的Pipe.\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"扁平化功能pipe\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#扁平化功能pipe\",\n        children: \"#\"\n      }), \"扁平化功能Pipe\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"举个例子:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"条形图、柱状图、折线图、面积图、散点图都有X轴与Y轴, 它们相似而又略有不同, 如果写一个大而全的 axes pipe, 可能会变成这样\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const lineChartPipeline = [\\n  axes\\n]\\nconst barChartPipeline = [\\n  axes\\n]\\nconst areaChartPipeline = [\\n  axes\\n]\\nconst scatterChartPipeline = [\\n  axes\\n]\\nconst axes = (spec, context) => {\\n  if (isLine || isArea || isColumn){\\n    // 折线图、面积图、柱状图有一个离散的轴, 一个连续的轴\\n    return xy(spec, context) \\n  }\\n  if (isScatter){\\n    // 散点图有2个连续的轴\\n    return yy(spec, context) \\n  }\\n  if (isBar){\\n    // 条形图有一个离散的轴, 一个连续的轴, 但与折线图、面积图、柱状图的轴方向不同\\n    return yx(spec, context) \\n  }\\n}\\n\\nconst xy = (spec, context) => {\\n  linearAxis(spec, context, {orient: 'left'})\\n  bandAxis(spec, context, {orient: 'bottom'})\\n}\\n\\nconst yx = (spec, context) => {\\n  linearAxis(spec, context, {orient: 'bottom'})\\n  bandAxis(spec, context, {orient: 'left'})\\n}\\n\\nconst yy = (spec, context) => {\\n  linearAxis(spec, context, {orient: 'bottom'})\\n  linearAxis(spec, context, {orient: 'left'})\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上述逻辑, 在一个功能Pipe内实现了根据图表类型, 选择不同的子功能pipe, 引发的问题是\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"xy、yx、yy内重复的功能又该如何复用? 大量的相似而又不同的子函数, 需要在不同的子功能pipe中, 被重复调用. 依赖关系容易变得错综复杂, 导致维护成本增加.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"修改折线图、面积图的功能, 容易遗漏条形图, 因为逻辑出现了分叉, 因此实现新功能时要考虑差异.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"当整个spec pipeline的规模扩大到几百个pipe时, 这样的编写逻辑会带来非常高昂的维护成本, 因此, 我们需要一种更简单的方式, 来实现根据图表类型, 选择不同的子功能pipe.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"继续上述的例子, 将差异抽象成不同的Pipe, 在更细粒度的功能上封装的差异, 最后在pipeline内直接组合, 就可以避免上述问题\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const lineChartPipeline = [\\n  xBandAxis,\\n  yLinearAxis,\\n]\\nconst barChartPipeline = [\\n  yBandAxis,\\n  xLinearAxis,\\n]\\nconst areaChartPipeline = [\\n  xBandAxis,\\n  yLinearAxis,\\n]\\nconst scatterChartPipeline = [\\n  xLinearAxis,\\n  yLinearAxis,\\n]\\n\\nconst xBandAxis = (spec, context) => {\\n}\\nconst yBandAxis = (spec, context) => {\\n}\\nconst xLinearAxis = (spec, context) => {\\n}\\nconst yLinearAxis = (spec, context) => {\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上述例子中, 没有实现axes pipe, 而是直接组合了xBandAxis、yBandAxis、xLinearAxis、yLinearAxis这4个pipe, 这样就避免了在axes pipe内根据图表类型, 选择不同的子功能pipe的问题, 从而避免了根据图表类型, 做出不同的判断, 从而减少了if else的使用.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"所以的图表类型差异的分叉, 应该是在Pipeline之上, 除非迫不得已, Pipeline内无需根据图表类型, 选择不同的子功能pipe.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这样的组合方式, 符合VSeed的设计哲学, 即使用更扁平的功能Pipe的组合, 而不是if else条件判断做一个大而全的功能Pipe.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n\nMDXContent.__RSPRESS_PAGE_META = {};\n\nMDXContent.__RSPRESS_PAGE_META[\"zh-CN%2Fdevelopment%2FdesignPhilosophy%2Fpipeline%2FpipelineDesign.md\"] = {\"toc\":[{\"id\":\"什么是-pipeline\",\"text\":\"什么是 Pipeline？\",\"depth\":2},{\"id\":\"pipeline-的优势\",\"text\":\"Pipeline 的优势:\",\"depth\":3},{\"id\":\"pipeline-的缺点\",\"text\":\"Pipeline 的缺点:\",\"depth\":3},{\"id\":\"vseed内应该如何编写pipeline\",\"text\":\"VSeed内应该如何编写Pipeline?\",\"depth\":2},{\"id\":\"pipe-组合模式\",\"text\":\"Pipe 组合模式\",\"depth\":3},{\"id\":\"组合差异\",\"text\":\"组合差异\",\"depth\":4},{\"id\":\"pipe-适配器模式\",\"text\":\"Pipe 适配器模式\",\"depth\":3},{\"id\":\"组合条件\",\"text\":\"组合条件\",\"depth\":4},{\"id\":\"pipeline-的最基本单元-功能-pipe\",\"text\":\"Pipeline 的最基本单元： 功能 Pipe\",\"depth\":3},{\"id\":\"扁平化功能pipe\",\"text\":\"扁平化功能Pipe\",\"depth\":4}],\"title\":\"pipeline 设计\",\"headingTitle\":\"pipeline 设计\",\"frontmatter\":{}};\n"],"names":["_createMdxContent","props","_components","Object","_provideComponents","_jsxs","_Fragment","_jsx","MDXContent","MDXLayout"],"mappings":"kKAKA,SAASA,EAAkBC,CAAK,EAC9B,IAAMC,EAAcC,OAAO,MAAM,CAAC,CAChC,GAAI,KACJ,EAAG,IACH,IAAK,MACL,GAAI,KACJ,GAAI,KACJ,KAAM,OACN,GAAI,KACJ,EAAG,IACH,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,IAAK,KACP,EAAGC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAAsBH,EAAM,UAAU,EACzC,MAAOI,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMC,EAAAA,QAASA,CAAE,CACtB,SAAU,CAACD,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC/B,GAAI,cACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,eACN,SAAU,GACZ,GAAI,cAAc,AACpB,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,GAAG,CAAE,CAC/B,UAAW,yBACX,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC/B,UAAW,0BACX,SAAU,eACZ,GAAIK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CACxB,UAAW,4BACX,SAAUG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CACpC,SAAU,WACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,mBAAoBK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACpD,SAAU,OACZ,GAAI,iGAAkGK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC3H,SAAU,OACZ,GAAI,QAAQ,AACd,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,yCAA0CK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC1E,SAAU,MACZ,GAAI,UAAWK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACpC,SAAU,MACZ,GAAI,UAAWK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACpC,SAAU,MACZ,GAAI,2BAA2B,AACjC,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,mDACZ,GAAI,KAAK,AACX,EACF,GAAG,AACL,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,eACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,gBACN,SAAU,GACZ,GAAI,gBAAgB,AACtB,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,yFACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,eACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,gBACN,SAAU,GACZ,GAAI,gBAAgB,AACtB,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CACpC,SAAU,wBACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,mCACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,+BACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,cACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,oBACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,qCACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,kCACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,sBAAuBK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACvD,SAAU,MACZ,GAAI,yBAAyB,AAC/B,GAAI,KAAK,AACX,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,eACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,gBACN,SAAU,GACZ,GAAI,gBAAgB,AACtB,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CACpC,SAAU,qFACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,yFACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,mGACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,2EACZ,GAAI,KAAK,AACX,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,uBACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,wBACN,SAAU,GACZ,GAAI,wBAAwB,AAC9B,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,YACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,aACN,SAAU,GACZ,GAAI,YAAY,AAClB,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,mDACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,kGACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,OACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,QACN,SAAU,GACZ,GAAI,OAAO,AACb,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,OACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,4FACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC9B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC/B,UAAW,cACX,SAAU,iPACZ,EACF,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,aACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,cACN,SAAU,GACZ,GAAI,aAAa,AACnB,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,gEACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,OACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,QACN,SAAU,GACZ,GAAI,OAAO,AACb,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,OACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,uEACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,6EACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC9B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC/B,UAAW,cACX,SAAU,kYACZ,EACF,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,yGACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,0BACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,2BACN,SAAU,GACZ,GAAI,2BAA2B,AACjC,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,uGACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,wDACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,YACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,aACN,SAAU,GACZ,GAAI,YAAY,AAClB,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,OACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,sEACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC9B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC/B,UAAW,cACX,SAAU,k3BACZ,EACF,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,iDACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CACpC,SAAU,qFACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,kDACZ,GAAI,KAAK,AACX,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,iGACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,qEACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC9B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC/B,UAAW,cACX,SAAU,gbACZ,EACF,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,mKACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,wEACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,uEACZ,GAAG,AACL,EACF,CACA,SAASM,I,IAAWP,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,AAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAQ,CAAC,EACrB,CAAC,QAASQ,CAAS,CAAC,CAAGN,OAAO,MAAM,CAAC,CAAC,EAAGC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAAsBH,EAAM,UAAU,EACrF,OAAOQ,EAAYF,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKE,EAAWN,OAAO,MAAM,CAAC,CAAC,EAAGF,EAAO,CAC1D,SAAUM,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKP,EAAmBC,EACpC,IAAMD,EAAkBC,EAC1B,CACA,MAAeO,CAEfA,CAAAA,EAAW,mBAAmB,CAAG,CAAC,EAElCA,EAAW,mBAAmB,CAAC,wEAAwE,CAAG,CAAC,IAAM,CAAC,CAAC,GAAK,eAAe,KAAO,gBAAgB,MAAQ,CAAC,EAAE,CAAC,GAAK,eAAe,KAAO,gBAAgB,MAAQ,CAAC,EAAE,CAAC,GAAK,eAAe,KAAO,gBAAgB,MAAQ,CAAC,EAAE,CAAC,GAAK,uBAAuB,KAAO,wBAAwB,MAAQ,CAAC,EAAE,CAAC,GAAK,YAAY,KAAO,YAAY,MAAQ,CAAC,EAAE,CAAC,GAAK,OAAO,KAAO,OAAO,MAAQ,CAAC,EAAE,CAAC,GAAK,aAAa,KAAO,aAAa,MAAQ,CAAC,EAAE,CAAC,GAAK,OAAO,KAAO,OAAO,MAAQ,CAAC,EAAE,CAAC,GAAK,0BAA0B,KAAO,2BAA2B,MAAQ,CAAC,EAAE,CAAC,GAAK,YAAY,KAAO,YAAY,MAAQ,CAAC,EAAE,CAAC,MAAQ,cAAc,aAAe,cAAc,YAAc,CAAC,CAAC,C"}