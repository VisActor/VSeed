{"version":3,"file":"static/js/async/37333.2d9ca666.js","sources":["webpack://website/./docs/zh-CN/galley/dataConfig/numFormat.mdx"],"sourcesContent":["import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Playground from \"/home/runner/work/VSeed/VSeed/node_modules/.pnpm/@rspress+plugin-playground@2.0.0-beta.28_@rspress+core@2.0.0-beta.28_@types+react@18.0._14204da554bdf4e8a5f87668605eca92/node_modules/@rspress/plugin-playground/static/global-components/Playground.tsx\";\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"数值格式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数值格式\",\n        children: \"#\"\n      }), \"数值格式\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"autoformat\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#autoformat\",\n        children: \"#\"\n      }), \"autoFormat\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"autoFormat\"\n        }), \" 自动格式化, 优先级低于\", _jsx(_components.code, {\n          children: \"format\"\n        }), \"若配置了 \", _jsx(_components.code, {\n          children: \"format\"\n        }), \" 则以format为准\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        profit: 12342.34567,\\n        sales: 23453.4567,\\n      },\\n    ],\\n    measures: [\\n      { id: 'profit', autoFormat: true },\\n      { id: 'sales', autoFormat: true },\\n    ],\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n  const [locale, setLocale] = useState<Locale>('en-US')\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const builder = Builder.from({ ...vseed, theme, locale })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark, locale])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div>\\n        {['en-US', 'zh-CN'].map((d) => {\\n          return (\\n            <span key={d} style={{ margin: '0 2px' }}>\\n              <button\\n                onClick={() => setLocale(d)}\\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\\n              >\\n                {d}\\n              </button>\\n            </span>\\n          )\\n        })}\\n      </div>\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"format\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#format\",\n        children: \"#\"\n      }), \"format\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"format\"\n        }), \" 数值格式化配置, 优先级高于\", _jsx(_components.code, {\n          children: \"autoFormat\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"type\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#type\",\n        children: \"#\"\n      }), \"type\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"number\"\n        }), \" 数值 (十进制)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"percent\"\n        }), \" 百分比 (0.00%)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"permille\"\n        }), \" 千分比 (0.00‰)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"scientific\"\n        }), \" 科学计数法 (1.23e+3)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        profit: 1234.4567,\\n        sales: 1234.4567,\\n        count: 1234.4567,\\n      },\\n    ],\\n    measures: [\\n      { id: 'profit', format: { type: 'percent' } },\\n      { id: 'sales', format: { type: 'permille' } },\\n      { id: 'count', format: { type: 'scientific' } },\\n    ],\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"thousandseparator\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#thousandseparator\",\n        children: \"#\"\n      }), \"thousandSeparator\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"thousandSeparator\"\n        }), \" 千分位分隔符\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        profit: 12344567,\\n        sales: 12344567,\\n        count: 12344567,\\n      },\\n    ],\\n    measures: [\\n      { id: 'profit', format: { type: 'percent', thousandSeparator: true } },\\n      { id: 'sales', format: { type: 'permille', thousandSeparator: false } },\\n      { id: 'count', format: { type: 'number', thousandSeparator: true } },\\n    ],\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"ratio--symbol\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#ratio--symbol\",\n        children: \"#\"\n      }), \"ratio & symbol\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"ratio\"\n        }), \" 比例\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"symbol\"\n        }), \" 单位\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        num1: 1,\\n        num2: 10,\\n        num3: 100,\\n        num4: 1000,\\n        num5: 10000,\\n        num6: 100000,\\n        num7: 1000000,\\n        num8: 10000000,\\n        num9: 100000000,\\n      },\\n    ],\\n    measures: [\\n      { id: 'num1',   format: { type: 'number', fractionDigits:0, ratio:1,        symbol:'' } },\\n      { id: 'num2',   format: { type: 'number', fractionDigits:0, ratio:10,       symbol:'十' } },\\n      { id: 'num3',   format: { type: 'number', fractionDigits:0, ratio:100,      symbol:'百' } },\\n      { id: 'num4',   format: { type: 'number', fractionDigits:0, ratio:1000,     symbol:'千' } },\\n      { id: 'num5',   format: { type: 'number', fractionDigits:0, ratio:10000,    symbol:'万' } },\\n      { id: 'num6',   format: { type: 'number', fractionDigits:0, ratio:100000,   symbol:'十万' } },\\n      { id: 'num7',   format: { type: 'number', fractionDigits:0, ratio:1000000,  symbol:'百万' } },\\n      { id: 'num8',   format: { type: 'number', fractionDigits:0, ratio:10000000, symbol:'千万' } },\\n      { id: 'num9',   format: { type: 'number', fractionDigits:0, ratio:100000000,symbol:'亿' } },\\n    ],\\n    yAxis: {\\n      log: true,\\n      logBase: 10,\\n    }\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"fractiondigits\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#fractiondigits\",\n        children: \"#\"\n      }), \"fractionDigits\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"fractionDigits\"\n        }), \" 小数位, , 必须大于等于0, 否则不生效.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        num0: 123.456,\\n        num1: 123.456,\\n        num2: 123.456,\\n        num3: 123.456,\\n        num4: 123.456,\\n        num5: 234.567,\\n        num6: 234.567,\\n        num7: 234.567,\\n        num8: 345.678,\\n        num9: 345.678,\\n        num9: 400,\\n      },\\n    ],\\n    measures: [\\n      { id: 'num0',   format: { type: 'number', fractionDigits:0}},\\n      { id: 'num1',   format: { type: 'number', fractionDigits:1}},\\n      { id: 'num2',   format: { type: 'number', fractionDigits:2}},\\n      { id: 'num3',   format: { type: 'number', fractionDigits:3}},\\n      { id: 'num4',   format: { type: 'number', fractionDigits:4}},\\n      { id: 'num5',   format: { type: 'number', fractionDigits:5}},\\n      { id: 'num6',   format: { type: 'number', fractionDigits:6}},\\n      { id: 'num7',   format: { type: 'number', fractionDigits:7}},\\n      { id: 'num8',   format: { type: 'number', fractionDigits:8}},\\n      { id: 'num9',   format: { type: 'number', fractionDigits:9}},\\n    ],\\n    yAxis: {\\n    }\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"significantdigits\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#significantdigits\",\n        children: \"#\"\n      }), \"significantDigits\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"significantDigits\"\n        }), \" 有效数字, 必须大于0, 否则不生效\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        num0: 123.456,\\n        num1: 123.456,\\n        num2: 123.456,\\n        num3: 123.456,\\n        num4: 123.456,\\n        num5: 234.567,\\n        num6: 234.567,\\n        num7: 234.567,\\n        num8: 345.678,\\n        num9: 345.678,\\n        num9: 1000,\\n      },\\n    ],\\n    measures: [\\n      { id: 'num0',   format: { type: 'number', significantDigits:0}},\\n      { id: 'num1',   format: { type: 'number', significantDigits:1}},\\n      { id: 'num2',   format: { type: 'number', significantDigits:2}},\\n      { id: 'num3',   format: { type: 'number', significantDigits:3}},\\n      { id: 'num4',   format: { type: 'number', significantDigits:4}},\\n      { id: 'num5',   format: { type: 'number', significantDigits:5}},\\n      { id: 'num6',   format: { type: 'number', significantDigits:6}},\\n      { id: 'num7',   format: { type: 'number', significantDigits:7}},\\n      { id: 'num8',   format: { type: 'number', significantDigits:8}},\\n      { id: 'num9',   format: { type: 'number', significantDigits:9}},\\n    ],\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"roundingpriority\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#roundingpriority\",\n        children: \"#\"\n      }), \"roundingPriority\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"若同时设置了 \", _jsx(_components.code, {\n        children: \"fractionDigits\"\n      }), \" 和 \", _jsx(_components.code, {\n        children: \"significantDigits\"\n      }), \"，则 \", _jsx(_components.code, {\n        children: \"roundingPriority\"\n      }), \" 会生效, 默认为 \", _jsx(_components.code, {\n        children: \"lessPrecision\"\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"lessPrecision\"\n        }), \" 更少精度, 尽可能的以 \", _jsx(_components.code, {\n          children: \"significantDigits\"\n        }), \" 为准, 但如果 \", _jsx(_components.code, {\n          children: \"significantDigits\"\n        }), \" 不足, 则以 \", _jsx(_components.code, {\n          children: \"significantDigits\"\n        }), \" 为准\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"morePrecision\"\n        }), \" 更多精度, 尽可能的以 \", _jsx(_components.code, {\n          children: \"fractionDigits\"\n        }), \" 为准, 但如果 \", _jsx(_components.code, {\n          children: \"fractionDigits\"\n        }), \" 不足, 则以 \", _jsx(_components.code, {\n          children: \"significantDigits\"\n        }), \" 为准\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        num0: 123.456,\\n        num1: 123.456,\\n        num2: 123.456,\\n        num3: 123.456,\\n        num4: 123.456,\\n        num5: 234.567,\\n        num6: 234.567,\\n        num7: 234.567,\\n        num8: 345.678,\\n        num9: 345.678,\\n        num9: 1000,\\n      },\\n    ],\\n    measures: [\\n      { id: 'num0',   format: { type: 'number', significantDigits:0, fractionDigits:2, roundingPriority: 'morePrecision' }},\\n      { id: 'num1',   format: { type: 'number', significantDigits:1, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n      { id: 'num2',   format: { type: 'number', significantDigits:2, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n      { id: 'num3',   format: { type: 'number', significantDigits:3, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n      { id: 'num4',   format: { type: 'number', significantDigits:4, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n      { id: 'num5',   format: { type: 'number', significantDigits:5, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n      { id: 'num6',   format: { type: 'number', significantDigits:6, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n      { id: 'num7',   format: { type: 'number', significantDigits:7, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n      { id: 'num8',   format: { type: 'number', significantDigits:8, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n      { id: 'num9',   format: { type: 'number', significantDigits:9, fractionDigits:2, roundingPriority: 'morePrecision'  }},\\n    ],\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n  const [roundingPriority, setRoundingPriority] = useState('morePrecision')\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    vseed.measures?.forEach((d) => {\\n      d.format.roundingPriority = roundingPriority\\n    })\\n\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark, roundingPriority])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div>\\n        {['lessPrecision', 'morePrecision'].map((d) => {\\n          return (\\n            <span key={d} style={{ margin: '0 2px' }}>\\n              <button\\n                onClick={() => setRoundingPriority(d)}\\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\\n              >\\n                {d}\\n              </button>\\n            </span>\\n          )\\n        })}\\n      </div>\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"roundingmode\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#roundingmode\",\n        children: \"#\"\n      }), \"roundingMode\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"roundingMode\"\n        }), \" 四舍五入模式, 默认为 \", _jsx(_components.code, {\n          children: \"halfExpand\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"floor\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"ceil\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"expand\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"trunc\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"halfCeil\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"halfFloor\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"halfExpand\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"halfTrunc\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"halfEven\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        num0: 123.34,\\n        num1: 123.38,\\n        num2: -123.34,\\n        num3: -123.38,\\n        num4: 123.34,\\n        num5: 234.38,\\n        num6: -234.34,\\n        num7: -234.38,\\n        num8: 4.5,\\n        num9: 3.5,\\n      },\\n    ],\\n    measures: [\\n      { id: 'num0',   format: { type: 'number', fractionDigits:1 , roundingMode: 'floor' }},\\n      { id: 'num1',   format: { type: 'number', fractionDigits:1 , roundingMode: 'ceil' }},\\n      { id: 'num2',   format: { type: 'number', fractionDigits:1 , roundingMode: 'expand' }},\\n      { id: 'num3',   format: { type: 'number', fractionDigits:1 , roundingMode: 'trunc' }},\\n      { id: 'num4',   format: { type: 'number', fractionDigits:1 , roundingMode: 'halfCeil' }},\\n      { id: 'num5',   format: { type: 'number', fractionDigits:1 , roundingMode: 'halfFloor' }},\\n      { id: 'num6',   format: { type: 'number', fractionDigits:1 , roundingMode: 'halfExpand' }},\\n      { id: 'num7',   format: { type: 'number', fractionDigits:1 , roundingMode: 'halfTrunc' }},\\n      { id: 'num8',   format: { type: 'number', fractionDigits:0 , roundingMode: 'halfEven' }},\\n      { id: 'num9',   format: { type: 'number', fractionDigits:0 , roundingMode: 'halfEven' }},\\n    ],\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"suffix--prefix\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#suffix--prefix\",\n        children: \"#\"\n      }), \"suffix & prefix\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"suffix 后缀\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"prefix 前缀\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"const Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'column',\\n    dataset: [\\n      {\\n        num0: 123.34,\\n        num1: 123.38,\\n        num2: -123.34,\\n        num3: -123.38,\\n        num4: 123.34,\\n        num5: 234.38,\\n        num6: -234.34,\\n        num7: -234.38,\\n        num8: 4.5,\\n        num9: 3.5,\\n      },\\n    ],\\n    measures: [\\n      { id: 'num0',   format: { type: 'number', fractionDigits:1 , suffix:'¥'}},\\n      { id: 'num1',   format: { type: 'number', fractionDigits:1 , suffix:'$'}},\\n      { id: 'num2',   format: { type: 'number', fractionDigits:1 , suffix:'!'}},\\n      { id: 'num3',   format: { type: 'number', fractionDigits:1 , suffix:'-'}},\\n      { id: 'num4',   format: { type: 'number', fractionDigits:1 , suffix:'+'}},\\n      { id: 'num5',   format: { type: 'number', fractionDigits:1 , prefix:'¥'}},\\n      { id: 'num6',   format: { type: 'number', fractionDigits:1 , prefix:'$'}},\\n      { id: 'num7',   format: { type: 'number', fractionDigits:1 , prefix:'!'}},\\n      { id: 'num8',   format: { type: 'number', fractionDigits:0 , prefix:'-'}},\\n      { id: 'num9',   format: { type: 'number', fractionDigits:0 , prefix:'+'}},\\n    ],\\n  }\\n\\n  if (zVSeed.safeParse(vseed).success) {\\n    console.log('zVSeed parse success!!!')\\n  } else {\\n    console.error('zVSeed parse error!!!')\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nimport { useRef, useEffect, useState } from 'react'\\nimport { useDark } from '@rspress/core/runtime'\\nimport VChart, { ISpec } from '@visactor/vchart'\\nimport {\\n  ListTable,\\n  ListTableConstructorOptions,\\n  PivotChart,\\n  PivotChartConstructorOptions,\\n  register,\\n} from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\\n  const dark = useDark()\\n\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n\\n    const builder = Builder.from({ ...vseed, theme })\\n    const spec = builder.build()\\n\\n    builderRef.current = builder\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${vseed.chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current?.spec)\\n        console.log('vseed', builderRef.current?.vseed)\\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n\nMDXContent.__RSPRESS_PAGE_META = {};\nMDXContent.__RSPRESS_PAGE_META[\"zh-CN%2Fgalley%2FdataConfig%2FnumFormat.mdx\"] = {\"toc\":[{\"id\":\"autoformat\",\"text\":\"autoFormat\",\"depth\":2},{\"id\":\"format\",\"text\":\"format\",\"depth\":2},{\"id\":\"type\",\"text\":\"type\",\"depth\":3},{\"id\":\"thousandseparator\",\"text\":\"thousandSeparator\",\"depth\":3},{\"id\":\"ratio--symbol\",\"text\":\"ratio & symbol\",\"depth\":3},{\"id\":\"fractiondigits\",\"text\":\"fractionDigits\",\"depth\":3},{\"id\":\"significantdigits\",\"text\":\"significantDigits\",\"depth\":3},{\"id\":\"roundingpriority\",\"text\":\"roundingPriority\",\"depth\":3},{\"id\":\"roundingmode\",\"text\":\"roundingMode\",\"depth\":3},{\"id\":\"suffix--prefix\",\"text\":\"suffix & prefix\",\"depth\":3}],\"title\":\"数值格式\",\"headingTitle\":\"数值格式\",\"frontmatter\":{\"pageType\":\"doc\"}};\n"],"names":["_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Playground","MDXContent","MDXLayout"],"mappings":"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"}