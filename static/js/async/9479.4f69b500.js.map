{"version":3,"file":"static/js/async/9479.4f69b500.js","sources":["webpack://website/./docs/zh-CN/guide/guide.mdx"],"sourcesContent":["const frontmatter = {\"pageType\":\"doc\"};\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Playground from \"/home/runner/work/VSeed/VSeed/node_modules/.pnpm/@rspress+plugin-playground@1.45.0_@rspress+core@1.45.0_webpack@5.101.0__monaco-editor@0_77af6e307fc0823c3fa3d293b9873930/node_modules/@rspress/plugin-playground/static/global-components/Playground.tsx\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    div: \"div\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"功能介绍\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#功能介绍\",\n        children: \"#\"\n      }), \"功能介绍\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"图表类型切换\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#图表类型切换\",\n        children: \"#\"\n      }), \"图表类型切换\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect, useState } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { ListTable, PivotTable } from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isTable, isPivotTable } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n  const [chartType, setChartType] = useState('line')\\n  const chartTypes = [\\n    'table',\\n    'pivotTable',\\n    'line',\\n    'column',\\n    'columnPercent',\\n    'columnParallel',\\n    'bar',\\n    'barPercent',\\n    'barParallel',\\n    'area',\\n    'areaPercent',\\n    'rose',\\n    'roseParallel',\\n    'pie',\\n    'donut',\\n    'scatter',\\n    'funnel',\\n  ]\\n\\n  const changeChartType = (c) => () => {\\n    setChartType(c)\\n  }\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType,\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n      ],\\n    }\\n    const builder = Builder.from(vseed)\\n    const spec = builder.build()\\n\\n    if (isTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else if (isPivotTable(vseed)) {\\n      const tableInstance = new PivotTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else {\\n      const vchart = new VChart(spec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    }\\n  }, [chartType])\\n\\n  return (\\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\\n      <div>\\n        {chartTypes.map((d) => {\\n          return (\\n            <span key={d} style={{ margin: '0 2px 0 0' }}>\\n              <button\\n                onClick={changeChartType(d)}\\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\\n              >\\n                {d}\\n              </button>\\n            </span>\\n          )\\n        })}\\n      </div>\\n      <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"数据重塑\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数据重塑\",\n        children: \"#\"\n      }), \"数据重塑\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect, useState } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { ListTable, PivotTable } from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isTable, isPivotTable } from '@visactor/vseed'\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n  const datasetList = [\\n    // 单指标零维度\\n    [{ profit: 10 }],\\n    // 单指标单维度\\n    [\\n      { date: '2019', profit: 10 },\\n      { date: '2020', profit: 30 },\\n      { date: '2021', profit: 30 },\\n      { date: '2022', profit: 50 },\\n      { date: '2023', profit: 40 },\\n    ],\\n    // 单指标两维度\\n    [\\n      { date: '2019', region: 'A', profit: 1 },\\n      { date: '2019', region: 'B', profit: 2 },\\n      { date: '2019', region: 'C', profit: 3 },\\n      { date: '2019', region: 'D', profit: 4 },\\n      { date: '2019', region: 'E', profit: 5 },\\n\\n      { date: '2020', region: 'A', profit: 10 },\\n      { date: '2020', region: 'B', profit: 9 },\\n      { date: '2020', region: 'C', profit: 8 },\\n      { date: '2020', region: 'D', profit: 7 },\\n      { date: '2020', region: 'E', profit: 6 },\\n    ],\\n    // 单指标多维度\\n    [\\n      { date: '2019', region: 'east', city: 'A', profit: 10 },\\n      { date: '2019', region: 'east', city: 'B', profit: 30 },\\n      { date: '2019', region: 'east', city: 'C', profit: 30 },\\n      { date: '2019', region: 'east', city: 'D', profit: 50 },\\n      { date: '2019', region: 'east', city: 'E', profit: 40 },\\n      { date: '2020', region: 'east', city: 'A', profit: 10 },\\n      { date: '2020', region: 'east', city: 'B', profit: 30 },\\n      { date: '2020', region: 'east', city: 'C', profit: 30 },\\n      { date: '2020', region: 'east', city: 'D', profit: 50 },\\n      { date: '2020', region: 'east', city: 'E', profit: 40 },\\n    ],\\n    // 多指标零维度\\n    [{ profit: 1, sales: 2, discount: 0.1 }],\\n    // 多指标单维度\\n    [\\n      { date: '2019', profit: 10, sales: 20, discount: 0.1 },\\n      { date: '2020', profit: 30, sales: 60, discount: 0.1 },\\n      { date: '2021', profit: 30, sales: 60, discount: 0.1 },\\n      { date: '2022', profit: 50, sales: 100, discount: 0.1 },\\n      { date: '2023', profit: 40, sales: 80, discount: 0.1 },\\n    ],\\n    // 多指标两维度\\n    [\\n      { date: '2019', type: 'A', profit: 10, sales: 20, discount: 0.1 },\\n      { date: '2019', type: 'B', profit: 30, sales: 60, discount: 0.1 },\\n      { date: '2019', type: 'C', profit: 30, sales: 60, discount: 0.1 },\\n\\n      { date: '2020', type: 'A', profit: 10, sales: 20, discount: 0.1 },\\n      { date: '2020', type: 'B', profit: 30, sales: 60, discount: 0.1 },\\n      { date: '2020', type: 'C', profit: 30, sales: 60, discount: 0.1 },\\n    ],\\n    // 多指标多维度\\n    [\\n      { date: '2019', region: 'east', city: 'A', profit: 10, sales: 20, discount: 0.1 },\\n      { date: '2019', region: 'east', city: 'B', profit: 30, sales: 60, discount: 0.1 },\\n      { date: '2019', region: 'east', city: 'C', profit: 30, sales: 60, discount: 0.1 },\\n      { date: '2019', region: 'east', city: 'D', profit: 50, sales: 100, discount: 0.1 },\\n      { date: '2019', region: 'east', city: 'E', profit: 40, sales: 80, discount: 0.1 },\\n      { date: '2020', region: 'east', city: 'A', profit: 10, sales: 20, discount: 0.1 },\\n      { date: '2020', region: 'east', city: 'B', profit: 30, sales: 60, discount: 0.1 },\\n      { date: '2020', region: 'east', city: 'C', profit: 30, sales: 60, discount: 0.1 },\\n      { date: '2020', region: 'east', city: 'D', profit: 50, sales: 100, discount: 0.1 },\\n      { date: '2020', region: 'east', city: 'E', profit: 40, sales: 80, discount: 0.1 },\\n    ],\\n  ]\\n\\n  const chartTypes = [\\n    'table',\\n    'pivotTable',\\n    'line',\\n    'column',\\n    'columnPercent',\\n    'columnParallel',\\n    'bar',\\n    'barPercent',\\n    'barParallel',\\n    'area',\\n    'areaPercent',\\n    'rose',\\n    'roseParallel',\\n    'pie',\\n    'donut',\\n    'funnel',\\n    'scatter',\\n  ]\\n\\n  const [chartType, setChartType] = useState('columnParallel')\\n  const [dataset, setDataset] = useState(datasetList[1])\\n  const builderRef = useRef(null)\\n  const changeDataset = (c) => () => {\\n    setDataset(c)\\n  }\\n\\n  const changeChartType = (c) => () => {\\n    setChartType(c)\\n  }\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType,\\n      dataset,\\n      legend: {\\n        position: 'bottom',\\n      },\\n    }\\n\\n    const builder = Builder.from(vseed)\\n    const spec = builder.build()\\n    builderRef.current = builder\\n    if (isTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else if (isPivotTable(vseed)) {\\n      const tableInstance = new PivotTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else {\\n      const vchart = new VChart(spec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    }\\n  }, [dataset, chartType])\\n\\n  return (\\n    <div\\n      style={{ display: 'flex', flexDirection: 'column' }}\\n      onClick={() => {\\n        console.group(`selected ${chartType}`)\\n        console.log('builder', builderRef.current)\\n        console.log('spec', builderRef.current.spec)\\n        console.log('vseed', builderRef.current.vseed)\\n        console.log('advancedVSeed', builderRef.current.advancedVSeed)\\n        console.groupEnd()\\n      }}\\n    >\\n      <div>\\n        {datasetList.map((d, index) => {\\n          return (\\n            <span key={index} style={{ margin: '0 2px 0 0' }}>\\n              <button\\n                onClick={changeDataset(d)}\\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\\n              >\\n                {`dataset` + (index + 1)}\\n              </button>\\n            </span>\\n          )\\n        })}\\n      </div>\\n      <div>\\n        {chartTypes.map((d) => {\\n          return (\\n            <span key={d} style={{ margin: '0 2px 0 0' }}>\\n              <button\\n                onClick={changeChartType(d)}\\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\\n              >\\n                {d}\\n              </button>\\n            </span>\\n          )\\n        })}\\n      </div>\\n\\n      <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"数据格式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数据格式\",\n        children: \"#\"\n      }), \"数据格式\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useDark } from 'rspress/runtime'\\n\\nimport { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable } from '@visactor/vseed'\\nimport { ListTable, PivotChart, register } from '@visactor/vtable'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'columnParallel',\\n    measures: [\\n      {\\n        id: 'profit',\\n        alias: '利润',\\n        autoFormat: false,\\n        format: {\\n          type: 'number',\\n          ratio: 1000,\\n          thousandSeparator: true,\\n          decimalPlaces: 0,\\n          symbol: '千',\\n          prefix: '利润',\\n          suffix: '$',\\n        },\\n      },\\n      {\\n        id: 'sales',\\n        alias: '销售额',\\n        autoFormat: true,\\n      },\\n    ],\\n    dimensions: [{ id: 'date', alias: '日期', location: 'dimension' }],\\n    dataset: [\\n      { date: '2019', profit: 10000, sales: 200000, discount: 0.5, rateOfReturn: 0.001 },\\n      { date: '2020', profit: 20000, sales: 400000, discount: 0.2, rateOfReturn: 0.002 },\\n      { date: '2021', profit: 30000, sales: 600000, discount: 0.4, rateOfReturn: 0.003 },\\n      { date: '2022', profit: 40000, sales: 800000, discount: 0.2, rateOfReturn: 0.004 },\\n      { date: '2023', profit: 50000, sales: 1000000, discount: 0.05, rateOfReturn: 0.005 },\\n    ],\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const dark = useDark()\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const spec = Builder.from({ ...vseed, theme }).build()\\n\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"数据分析\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数据分析\",\n        children: \"#\"\n      }), \"数据分析\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"轴排序-与-图例排序\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#轴排序-与-图例排序\",\n        children: \"#\"\n      }), \"轴排序 与 图例排序\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect, useState } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { ListTable, PivotTable } from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, isTable, isPivotTable } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n  const [order, setOrder] = useState('asc')\\n  const [orderBy, setOrderBy] = useState('date')\\n  const orderList = ['desc', 'asc']\\n  const orderByList = ['date', 'profit', 'sales']\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'barParallel',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n      ],\\n      sortAxis: {\\n        order,\\n        orderBy,\\n      },\\n      sortLegend: {\\n        order,\\n      },\\n    }\\n    const builder = Builder.from(vseed)\\n    const spec = builder.build()\\n    console.log(builder.advancedVSeed.analysis)\\n    if (isTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else if (isPivotTable(vseed)) {\\n      const tableInstance = new PivotTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else {\\n      const vchart = new VChart(spec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    }\\n  }, [orderBy, order])\\n\\n  return (\\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\\n      <div>\\n        {orderList.map((d) => {\\n          return (\\n            <span key={d} style={{ margin: '0 2px 0 0' }}>\\n              <button\\n                onClick={() => setOrder(d)}\\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\\n              >\\n                {d}\\n              </button>\\n            </span>\\n          )\\n        })}\\n      </div>\\n      <div>\\n        {orderByList.map((d) => {\\n          return (\\n            <span key={d} style={{ margin: '0 2px 0 0' }}>\\n              <button\\n                onClick={() => setOrderBy(d)}\\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\\n              >\\n                {d}\\n              </button>\\n            </span>\\n          )\\n        })}\\n      </div>\\n      <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"透视与组合\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#透视与组合\",\n        children: \"#\"\n      }), \"透视与组合\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"指标分组\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#指标分组\",\n        children: \"#\"\n      }), \"指标分组\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect, memo } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { register, PivotChart, PivotChartConstructorOptions } from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, UnfoldDimensionGroupId } from '@visactor/vseed'\\n\\nregister.chartModule('vchart', VChart)\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'line',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n      ],\\n      dimensions: [{ id: 'date', alias: '日期' }],\\n      measures: [\\n        {\\n          id: 'profit-group',\\n          children: [{ id: 'profit', alias: '利润' }],\\n        },\\n        {\\n          id: 'sales-group',\\n          children: [{ id: 'sales', alias: '销售额' }],\\n        },\\n      ],\\n    }\\n\\n    const builder = Builder.from(vseed)\\n    const spec = builder.build()\\n\\n    const tableInstance = new PivotChart(ref.current, spec)\\n\\n    tableInstance.on('legend_item_click', (args) => {\\n      console.log('LEGEND_ITEM_CLICK', args)\\n      tableInstance.updateFilterRules([\\n        {\\n          filterKey: UnfoldDimensionGroupId,\\n          filteredValues: args.value,\\n        },\\n      ])\\n    })\\n\\n    return () => tableInstance.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"行列透视\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#行列透视\",\n        children: \"#\"\n      }), \"行列透视\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect, memo } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { register, PivotChart, PivotChartConstructorOptions } from '@visactor/vtable'\\nimport { registerAll, VSeed, Builder, UnfoldDimensionGroupId } from '@visactor/vseed'\\n\\nregister.chartModule('vchart', VChart)\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'column',\\n      dataset: [\\n        { date: '2019', category: 'food', profit: 10, sales: 88 },\\n        { date: '2019', category: 'book', profit: 33, sales: 210 },\\n        { date: '2019', category: 'tools', profit: 27, sales: 150 },\\n\\n        { date: '2020', category: 'food', profit: 10, sales: 100 },\\n        { date: '2020', category: 'book', profit: 11, sales: 122 },\\n        { date: '2020', category: 'tools', profit: 23, sales: 150 },\\n\\n        { date: '2021', category: 'food', profit: 10, sales: 100 },\\n        { date: '2021', category: 'book', profit: 30, sales: 190 },\\n        { date: '2021', category: 'tools', profit: 15, sales: 50 },\\n      ],\\n      dimensions: [\\n        { id: 'date', alias: '日期' },\\n        { id: 'category', alias: '类型', location: 'columnDimension' },\\n      ],\\n      measures: [\\n        {\\n          id: 'profit-group',\\n          children: [{ id: 'profit', alias: '利润' }],\\n        },\\n        {\\n          id: 'sales-group',\\n          children: [{ id: 'sales', alias: '销售额' }],\\n        },\\n      ],\\n    }\\n\\n    const builder = Builder.from(vseed)\\n    const spec = builder.build()\\n\\n    const tableInstance = new PivotChart(ref.current, spec)\\n\\n    tableInstance.on('legend_item_click', (args) => {\\n      console.log('LEGEND_ITEM_CLICK', args)\\n      tableInstance.updateFilterRules([\\n        {\\n          filterKey: UnfoldDimensionGroupId,\\n          filteredValues: args.value,\\n        },\\n      ])\\n    })\\n\\n    return () => tableInstance.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"条件样式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#条件样式\",\n        children: \"#\"\n      }), \"条件样式\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"矩形图元样式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#矩形图元样式\",\n        children: \"#\"\n      }), \"矩形图元样式\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'column',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n        { date: '2024', profit: 70, sales: 100 },\\n      ],\\n      barStyle: [\\n        {\\n          barRadius: 10,\\n          barColorOpacity: 0.25,\\n        },\\n        {\\n          selector: {\\n            field: 'sales',\\n            op: '>',\\n            value: 400,\\n          },\\n          // selector: {\\n          //   field: 'sales',\\n          //   op: '>=',\\n          //   value: 400,\\n          // },\\n          // selector: 30,\\n          // selector: [40,30,50],\\n          // selector: { date:\\\"2019\\\" },\\n          // selector: [{ date:\\\"2019\\\" },{ date:\\\"2020\\\", profit: 30 }],\\n          barColorOpacity: 1,\\n          barRadius: 0,\\n        },\\n      ],\\n    }\\n\\n    const spec = Builder.from(vseed).build()\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"点图元样式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#点图元样式\",\n        children: \"#\"\n      }), \"点图元样式\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'line',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n        { date: '2024', profit: 70, sales: 100 },\\n      ],\\n      pointStyle: [\\n        {\\n          pointSize: 10,\\n          pointColorOpacity: 0.25,\\n        },\\n        {\\n          selector: {\\n            field: 'profit',\\n            op: '>',\\n            value: 40,\\n          },\\n          // selector: {\\n          //   field: 'sales',\\n          //   op: '>=',\\n          //   value: 400,\\n          // },\\n          // selector: 30,\\n          // selector: [40,30,50],\\n          // selector: { date:\\\"2019\\\" },\\n          // selector: [{ date:\\\"2019\\\" },{ date:\\\"2020\\\", profit: 30 }],\\n          pointColorOpacity: 1,\\n          pointSize: 20,\\n        },\\n      ],\\n    }\\n\\n    const spec = Builder.from(vseed).build()\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"线图元样式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#线图元样式\",\n        children: \"#\"\n      }), \"线图元样式\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'line',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n        { date: '2024', profit: 70, sales: 100 },\\n      ],\\n      lineStyle: [\\n        {\\n          lineWidth: 2,\\n          lineColorOpacity: 0.25,\\n          lineSmooth: true,\\n        },\\n        {\\n          selector: {\\n            field: 'profit',\\n            op: '>',\\n            value: 40,\\n          },\\n          // selector: {\\n          //   field: 'sales',\\n          //   op: '>=',\\n          //   value: 400,\\n          // },\\n          // selector: 30,\\n          // selector: [40,30,50],\\n          // selector: { date:\\\"2019\\\" },\\n          // selector: [{ date:\\\"2019\\\" },{ date:\\\"2020\\\", profit: 30 }],\\n          lineColorOpacity: 1,\\n          lineWidth: 5,\\n        },\\n      ],\\n    }\\n\\n    const spec = Builder.from(vseed).build()\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"面图元样式\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#面图元样式\",\n        children: \"#\"\n      }), \"面图元样式\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'area',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n        { date: '2024', profit: 70, sales: 100 },\\n      ],\\n      areaStyle: [\\n        {\\n          areaColorOpacity: 0.2,\\n        },\\n        {\\n          selector: {\\n            field: 'profit',\\n            op: '>',\\n            value: 40,\\n          },\\n          // selector: {\\n          //   field: 'sales',\\n          //   op: '>=',\\n          //   value: 400,\\n          // },\\n          // selector: 30,\\n          // selector: [40,30,50],\\n          // selector: { date:\\\"2019\\\" },\\n          // selector: [{ date:\\\"2019\\\" },{ date:\\\"2020\\\", profit: 30 }],\\n          areaColorOpacity: 1,\\n        },\\n      ],\\n    }\\n\\n    const spec = Builder.from(vseed).build()\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"标注\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#标注\",\n        children: \"#\"\n      }), \"标注\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"数据点标注\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数据点标注\",\n        children: \"#\"\n      }), \"数据点标注\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'area',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n        { date: '2024', profit: 70, sales: 100 },\\n      ],\\n      annotationPoint: {\\n        selector: {\\n          field: 'profit',\\n          op: '>',\\n          value: 10,\\n        },\\n        // selector: {\\n        //   field: 'sales',\\n        //   op: '>=',\\n        //   value: 400,\\n        // },\\n        // selector: 30,\\n        // selector: [40,30,50],\\n        // selector: { date:\\\"2019\\\" },\\n        // selector: [{ date:\\\"2019\\\" },{ date:\\\"2020\\\", profit: 30 }],\\n\\n        text: '数据点标注',\\n      },\\n    }\\n\\n    const spec = Builder.from(vseed).build()\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"数据水平线标注\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数据水平线标注\",\n        children: \"#\"\n      }), \"数据水平线标注\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'area',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n        { date: '2024', profit: 70, sales: 100 },\\n      ],\\n      annotationHorizontalLine: {\\n        yValue: 170,\\n        text: '利润 70',\\n      },\\n    }\\n\\n    const spec = Builder.from(vseed).build()\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"数据垂直线标注\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数据垂直线标注\",\n        children: \"#\"\n      }), \"数据垂直线标注\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'columnParallel',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n        { date: '2024', profit: 70, sales: 100 },\\n      ],\\n      annotationVerticalLine: {\\n        selector: '2023',\\n        text: '23年',\\n      },\\n    }\\n\\n    const spec = Builder.from(vseed).build()\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"数据区域标注\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数据区域标注\",\n        children: \"#\"\n      }), \"数据区域标注\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'columnParallel',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n        { date: '2024', profit: 70, sales: 100 },\\n      ],\\n      annotationArea: {\\n        selector: [{ date: '2022' }, { date: '2023' }],\\n        text: '22~23年',\\n        textPosition: 'top',\\n        textAlign: 'center',\\n      },\\n    }\\n\\n    const spec = Builder.from(vseed).build()\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"跨平台渲染\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#跨平台渲染\",\n        children: \"#\"\n      }), \"跨平台渲染\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rspress-directive tip\",\n      children: [_jsx(_components.div, {\n        className: \"rspress-directive-title\",\n        children: \"TIP\"\n      }), _jsx(_components.div, {\n        className: \"rspress-directive-content\",\n        children: _jsxs(_components.p, {\n          children: [\"\\n\", _jsx(_components.code, {\n            children: \"vseed\"\n          }), \"支持无损序列化, 因此可以\", _jsx(_components.code, {\n            children: \"跨平台传输\"\n          }), \", \", _jsx(_components.code, {\n            children: \"复制粘贴\"\n          }), \", 在Node环境、浏览器环境, 都可以直接通过\", _jsx(_components.code, {\n            children: \"builder\"\n          }), \"获取到完整的spec\"]\n        })\n      })]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect, useState } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const [vseed, setVSeed] = useState()\\n  const ref = useRef()\\n  const chartRef = useRef()\\n  const vseed1: VSeed = {\\n    chartType: 'line',\\n    dataset: [\\n      { date: '2019', profit: 10, sales: 100 },\\n      { date: '2020', profit: 30, sales: 200 },\\n      { date: '2021', profit: 30, sales: 300 },\\n      { date: '2022', profit: 50, sales: 400 },\\n      { date: '2023', profit: 40, sales: 500 },\\n    ],\\n  }\\n\\n  const vseed2: VSeed = {\\n    chartType: 'bar',\\n    dataset: [\\n      { date: '2019', profit: 10, sales: 100 },\\n      { date: '2020', profit: 30, sales: 200 },\\n      { date: '2021', profit: 30, sales: 300 },\\n      { date: '2022', profit: 50, sales: 400 },\\n      { date: '2023', profit: 40, sales: 500 },\\n    ],\\n  }\\n\\n  const copyVSeed1 = async () => {\\n    await navigator.clipboard.writeText(JSON.stringify(vseed1))\\n  }\\n  const copyVSeed2 = async () => {\\n    await navigator.clipboard.writeText(JSON.stringify(vseed2))\\n  }\\n\\n  const paste = async () => {\\n    try {\\n      if (chartRef.current) {\\n        chartRef.current.release()\\n      }\\n      const clipboardText = await navigator.clipboard.readText()\\n      const parsedVSeed = JSON.parse(clipboardText)\\n\\n      const builder = Builder.from(parsedVSeed)\\n      const advancedVSeed = builder.buildAdvanced()\\n      const spec = builder.buildSpec(advancedVSeed)\\n      const vchart = new VChart(spec, { dom: ref.current })\\n      vchart.renderSync()\\n\\n      chartRef.current = vchart\\n    } catch (error) {\\n      console.log('debug', error)\\n      alert('从剪切板读取内容时出错')\\n    }\\n  }\\n\\n  return (\\n    <div style={{ display: 'flex' }}>\\n      <div style={{ width: 100 }}>\\n        <button onClick={copyVSeed1} style={{ width: 100, marginBottom: 4 }}>\\n          copy demo1\\n        </button>\\n        <button onClick={copyVSeed2} style={{ width: 100, marginBottom: 4 }}>\\n          copy demo2\\n        </button>\\n        <button onClick={paste} style={{ width: 100 }}>\\n          paste\\n        </button>\\n      </div>\\n\\n      <div ref={ref} style={{ height: 260, width: 'calc(100% - 100px)' }}></div>\\n    </div>\\n  )\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"分离式构建\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#分离式构建\",\n        children: \"#\"\n      }), \"分离式构建\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rspress-directive tip\",\n      children: [_jsx(_components.div, {\n        className: \"rspress-directive-title\",\n        children: \"TIP\"\n      }), _jsx(_components.div, {\n        className: \"rspress-directive-content\",\n        children: _jsxs(_components.p, {\n          children: [\"\\n通常情况下, 图表的数据处理比较耗时, VSeed支持拆分数据处理与数据渲染, \", _jsx(_components.code, {\n            children: \"build\"\n          }), \"提供\", _jsx(_components.code, {\n            children: \"buildAdvanced\"\n          }), \"和\", _jsx(_components.code, {\n            children: \"buildSpec\"\n          }), \"进行分离式构建\"]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        meta: \"pure title=分离式构建 {4,7}\",\n        children: \"const builder = Builder.from(vseed)\\n\\n// Node.js\\nconst advancedVSeed = builder.buildAdvanced()\\n\\n// Web Browser\\nconst spec = builder.buildSpec(advancedVSeed)\\n\\n// spec用于渲染\\n\"\n      })\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\\nregisterAll()\\n\\nconst Demo = () => {\\n  const ref = useRef<HTMLDivElement>(null)\\n\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n\\n    const vseed: VSeed = {\\n      chartType: 'line',\\n      dataset: [\\n        { date: '2019', profit: 10, sales: 100 },\\n        { date: '2020', profit: 30, sales: 200 },\\n        { date: '2021', profit: 30, sales: 300 },\\n        { date: '2022', profit: 50, sales: 400 },\\n        { date: '2023', profit: 40, sales: 500 },\\n      ],\\n    }\\n    const builder = Builder.from(vseed)\\n    const advancedVSeed = builder.buildAdvanced()\\n    const spec = builder.buildSpec(advancedVSeed)\\n\\n    const vchart = new VChart(spec, { dom: ref.current })\\n    vchart.renderSync()\\n\\n    return () => vchart.release()\\n  })\\n\\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"国际化\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#国际化\",\n        children: \"#\"\n      }), \"国际化\"]\n    }), \"\\n\", _jsx(Playground, {\n      code: \"import { useDark } from 'rspress/runtime'\\n\\nimport { useRef, useEffect } from 'react'\\nimport VChart from '@visactor/vchart'\\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable } from '@visactor/vseed'\\nimport { ListTable, PivotChart, register } from '@visactor/vtable'\\n\\nregisterAll()\\nregister.chartModule('vchart', VChart)\\n\\nconst Demo = () => {\\n  const vseed: VSeed = {\\n    chartType: 'columnParallel',\\n    locale: 'en-US',\\n    measures: [\\n      {\\n        id: 'profit',\\n        alias: '利润',\\n        autoFormat: true,\\n      },\\n      {\\n        id: 'sales',\\n        alias: '销售额',\\n        autoFormat: true,\\n      },\\n      {\\n        id: 'discount',\\n        alias: '折扣',\\n        autoFormat: true,\\n      },\\n      {\\n        id: 'rateOfReturn',\\n        alias: '回报率',\\n        autoFormat: true,\\n      },\\n    ],\\n    dimensions: [{ id: 'date', alias: '日期', location: 'dimension' }],\\n    dataset: [\\n      { date: '2019', profit: 10000, sales: 200000, discount: 0.5, rateOfReturn: 0.001 },\\n      { date: '2020', profit: 20000, sales: 400000, discount: 0.2, rateOfReturn: 0.002 },\\n      { date: '2021', profit: 30000, sales: 600000, discount: 0.4, rateOfReturn: 0.003 },\\n      { date: '2022', profit: 40000, sales: 800000, discount: 0.2, rateOfReturn: 0.004 },\\n      { date: '2023', profit: 50000, sales: 1000000, discount: 0.05, rateOfReturn: 0.005 },\\n    ],\\n  }\\n\\n  return <SimpleVSeedRender vseed={vseed} />\\n}\\n\\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\\n  const { vseed } = props\\n  const ref = useRef<HTMLDivElement>(null)\\n  const dark = useDark()\\n  useEffect(() => {\\n    if (!ref.current) {\\n      return\\n    }\\n    const theme = dark ? 'dark' : 'light'\\n    const spec = Builder.from({ ...vseed, theme }).build()\\n\\n    if (isPivotChart(vseed)) {\\n      const tableInstance = new PivotChart(ref.current, spec)\\n      return () => tableInstance.release()\\n    } else if (isVChart(vseed)) {\\n      const vchart = new VChart(spec, { dom: ref.current })\\n      vchart.renderSync()\\n      return () => vchart.release()\\n    } else if (isVTable(vseed)) {\\n      const tableInstance = new ListTable(ref.current, spec)\\n      return () => tableInstance.release()\\n    }\\n  }, [vseed, dark])\\n\\n  return <div ref={ref} style={{ height: 300, width: '100%' }}></div>\\n}\\n\\nexport default Demo\",\n      language: \"tsx\",\n      direction: \"vertical\",\n      editorPosition: \"left\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n\nMDXContent.__RSPRESS_PAGE_META = {};\n\nMDXContent.__RSPRESS_PAGE_META[\"zh-CN%2Fguide%2Fguide.mdx\"] = {\"toc\":[{\"id\":\"图表类型切换\",\"text\":\"图表类型切换\",\"depth\":2},{\"id\":\"数据重塑\",\"text\":\"数据重塑\",\"depth\":2},{\"id\":\"数据格式\",\"text\":\"数据格式\",\"depth\":2},{\"id\":\"数据分析\",\"text\":\"数据分析\",\"depth\":2},{\"id\":\"轴排序-与-图例排序\",\"text\":\"轴排序 与 图例排序\",\"depth\":3},{\"id\":\"透视与组合\",\"text\":\"透视与组合\",\"depth\":2},{\"id\":\"指标分组\",\"text\":\"指标分组\",\"depth\":3},{\"id\":\"行列透视\",\"text\":\"行列透视\",\"depth\":3},{\"id\":\"条件样式\",\"text\":\"条件样式\",\"depth\":2},{\"id\":\"矩形图元样式\",\"text\":\"矩形图元样式\",\"depth\":3},{\"id\":\"点图元样式\",\"text\":\"点图元样式\",\"depth\":3},{\"id\":\"线图元样式\",\"text\":\"线图元样式\",\"depth\":3},{\"id\":\"面图元样式\",\"text\":\"面图元样式\",\"depth\":3},{\"id\":\"标注\",\"text\":\"标注\",\"depth\":2},{\"id\":\"数据点标注\",\"text\":\"数据点标注\",\"depth\":3},{\"id\":\"数据水平线标注\",\"text\":\"数据水平线标注\",\"depth\":3},{\"id\":\"数据垂直线标注\",\"text\":\"数据垂直线标注\",\"depth\":3},{\"id\":\"数据区域标注\",\"text\":\"数据区域标注\",\"depth\":3},{\"id\":\"跨平台渲染\",\"text\":\"跨平台渲染\",\"depth\":2},{\"id\":\"分离式构建\",\"text\":\"分离式构建\",\"depth\":2},{\"id\":\"国际化\",\"text\":\"国际化\",\"depth\":2}],\"title\":\"功能介绍\",\"headingTitle\":\"功能介绍\",\"frontmatter\":{\"pageType\":\"doc\"}};\n"],"names":["_createMdxContent","props","_components","Object","_provideComponents","_jsxs","_Fragment","_jsx","Playground","MDXContent","MDXLayout"],"mappings":"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"}