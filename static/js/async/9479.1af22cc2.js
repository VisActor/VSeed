"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["9479"],{72858:function(e,n,t){t.r(n),t.d(n,{default:()=>d});var r=t(31549),s=t(6603),a=t(91867);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",div:"div",p:"p",code:"code",pre:"pre"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"功能介绍",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#功能介绍",children:"#"}),"功能介绍"]}),"\n",(0,r.jsxs)(n.h2,{id:"图表类型切换",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#图表类型切换",children:"#"}),"图表类型切换"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  const chartTypes = [\n    'line',\n    'column',\n    'columnPercent',\n    'columnParallel',\n    'bar',\n    'barPercent',\n    'barParallel',\n    'pie',\n    'area',\n    'areaPercent',\n  ]\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'line',\n      dataset: [\n        { date: '2019', profit: 10, sales: 100 },\n        { date: '2020', profit: 30, sales: 200 },\n        { date: '2021', profit: 30, sales: 300 },\n        { date: '2022', profit: 50, sales: 400 },\n        { date: '2023', profit: 40, sales: 500 },\n      ],\n    }\n\n    const spec = Builder.from(vseed).build()\n\n    const vchart = new VChart(spec, { dom: ref.current })\n    vchart.renderSync()\n\n    const renderNext = (index: number) => {\n      const chartType = chartTypes[index % chartTypes.length]\n      const nextVSeed = {\n        ...vseed,\n        chartType: chartType,\n      }\n      const nextSpec = Builder.from(nextVSeed).build()\n      vchart.updateSpec(nextSpec)\n\n      setTimeout(() => {\n        renderNext(index + 1)\n      }, 2000)\n    }\n    renderNext(0)\n\n    return () => vchart.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h2,{id:"数据重塑",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据重塑",children:"#"}),"数据重塑"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  const datasetList = [\n    // 单指标零维度\n    [{ profit: 10 }],\n    // 单指标单维度\n    [\n      { date: '2019', profit: 10 },\n      { date: '2020', profit: 30 },\n      { date: '2021', profit: 30 },\n      { date: '2022', profit: 50 },\n      { date: '2023', profit: 40 },\n    ],\n    // 单指标多维度\n    [\n      { date: '2019', region: 'east', city: 'A', profit: 10 },\n      { date: '2019', region: 'east', city: 'B', profit: 30 },\n      { date: '2019', region: 'east', city: 'C', profit: 30 },\n      { date: '2019', region: 'east', city: 'D', profit: 50 },\n      { date: '2019', region: 'east', city: 'E', profit: 40 },\n\n      { date: '2020', region: 'north of east', city: 'A', profit: 10 },\n      { date: '2020', region: 'north of east', city: 'B', profit: 30 },\n      { date: '2020', region: 'north of east', city: 'C', profit: 30 },\n      { date: '2020', region: 'north of east', city: 'D', profit: 50 },\n      { date: '2020', region: 'north of east', city: 'E', profit: 40 },\n    ],\n    // 多指标零维度\n    [{ profit: 1, sales: 2, discount: 0.1 }],\n    // 多指标单维度\n    [\n      { date: '2019', profit: 10, sales: 20, discount: 0.1 },\n      { date: '2020', profit: 30, sales: 60, discount: 0.1 },\n      { date: '2021', profit: 30, sales: 60, discount: 0.1 },\n      { date: '2022', profit: 50, sales: 100, discount: 0.1 },\n      { date: '2023', profit: 40, sales: 80, discount: 0.1 },\n    ],\n    // 多指标多维度\n    [\n      { date: '2019', region: 'east', city: 'A', profit: 10, sales: 20, discount: 0.1 },\n      { date: '2019', region: 'east', city: 'B', profit: 30, sales: 60, discount: 0.1 },\n      { date: '2019', region: 'east', city: 'C', profit: 30, sales: 60, discount: 0.1 },\n      { date: '2019', region: 'east', city: 'D', profit: 50, sales: 100, discount: 0.1 },\n      { date: '2019', region: 'east', city: 'E', profit: 40, sales: 80, discount: 0.1 },\n\n      { date: '2020', region: 'north of east', city: 'A', profit: 10, sales: 20, discount: 0.1 },\n      { date: '2020', region: 'north of east', city: 'B', profit: 30, sales: 60, discount: 0.1 },\n      { date: '2020', region: 'north of east', city: 'C', profit: 30, sales: 60, discount: 0.1 },\n      { date: '2020', region: 'north of east', city: 'D', profit: 50, sales: 100, discount: 0.1 },\n      { date: '2020', region: 'north of east', city: 'E', profit: 40, sales: 80, discount: 0.1 },\n    ],\n  ]\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'columnParallel',\n      dataset: datasetList[0],\n      legend: {\n        position: 'bottom',\n      },\n    }\n\n    const spec = Builder.from(vseed).build()\n\n    const vchart = new VChart(spec, { dom: ref.current })\n    vchart.renderSync()\n\n    const renderNext = (index: number) => {\n      const dataset = datasetList[index % datasetList.length]\n      const nextVSeed = {\n        ...vseed,\n        dataset: dataset,\n      }\n      const nextSpec = Builder.from(nextVSeed).build()\n      vchart.updateSpec(nextSpec)\n\n      setTimeout(() => {\n        renderNext(index + 1)\n      }, 3000)\n    }\n    renderNext(0)\n\n    return () => vchart.release()\n  })\n\n  return <div ref={ref} style={{ height: '300', width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"horizontal",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h2,{id:"透视与组合",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#透视与组合",children:"#"}),"透视与组合"]}),"\n",(0,r.jsxs)(n.h3,{id:"指标分组",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#指标分组",children:"#"}),"指标分组"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect, memo } from 'react'\nimport VChart from '@visactor/vchart'\nimport { register, PivotChart, PivotChartConstructorOptions } from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, UnfoldDimensionGroup } from '@visactor/vseed'\n\nregister.chartModule('vchart', VChart)\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'line',\n      dataset: [\n        { date: '2019', profit: 10, sales: 100 },\n        { date: '2020', profit: 30, sales: 200 },\n        { date: '2021', profit: 30, sales: 300 },\n        { date: '2022', profit: 50, sales: 400 },\n        { date: '2023', profit: 40, sales: 500 },\n      ],\n      dimensions: [{ id: 'date', alias: '日期' }],\n      measures: [\n        {\n          id: 'profit-group',\n          children: [{ id: 'profit', alias: '利润' }],\n        },\n        {\n          id: 'sales-group',\n          children: [{ id: 'sales', alias: '销售额' }],\n        },\n      ],\n    }\n\n    const builder = Builder.from(vseed)\n    const spec = builder.build()\n\n    const tableInstance = new PivotChart(ref.current, spec)\n\n    tableInstance.on('legend_item_click', (args) => {\n      console.log('LEGEND_ITEM_CLICK', args)\n      tableInstance.updateFilterRules([\n        {\n          filterKey: UnfoldDimensionGroup,\n          filteredValues: args.value,\n        },\n      ])\n    })\n\n    return () => tableInstance.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h3,{id:"行列透视",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#行列透视",children:"#"}),"行列透视"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect, memo } from 'react'\nimport VChart from '@visactor/vchart'\nimport { register, PivotChart, PivotChartConstructorOptions } from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, UnfoldDimensionGroup } from '@visactor/vseed'\n\nregister.chartModule('vchart', VChart)\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'column',\n      dataset: [\n        { date: '2019', category: 'food', profit: 10, sales: 88 },\n        { date: '2019', category: 'book', profit: 33, sales: 210 },\n        { date: '2019', category: 'tools', profit: 27, sales: 150 },\n\n        { date: '2020', category: 'food', profit: 10, sales: 100 },\n        { date: '2020', category: 'book', profit: 11, sales: 122 },\n        { date: '2020', category: 'tools', profit: 23, sales: 150 },\n\n        { date: '2021', category: 'food', profit: 10, sales: 100 },\n        { date: '2021', category: 'book', profit: 30, sales: 190 },\n        { date: '2021', category: 'tools', profit: 15, sales: 50 },\n      ],\n      dimensions: [\n        { id: 'date', alias: '日期' },\n        { id: 'category', alias: '类型', location: 'columnDimension' },\n      ],\n      measures: [\n        {\n          id: 'profit-group',\n          children: [{ id: 'profit', alias: '利润' }],\n        },\n        {\n          id: 'sales-group',\n          children: [{ id: 'sales', alias: '销售额' }],\n        },\n      ],\n    }\n\n    const builder = Builder.from(vseed)\n    const spec = builder.build()\n\n    const tableInstance = new PivotChart(ref.current, spec)\n\n    tableInstance.on('legend_item_click', (args) => {\n      console.log('LEGEND_ITEM_CLICK', args)\n      tableInstance.updateFilterRules([\n        {\n          filterKey: UnfoldDimensionGroup,\n          filteredValues: args.value,\n        },\n      ])\n    })\n\n    return () => tableInstance.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h2,{id:"条件样式",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#条件样式",children:"#"}),"条件样式"]}),"\n",(0,r.jsxs)(n.h3,{id:"柱图样式",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#柱图样式",children:"#"}),"柱图样式"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'column',\n      dataset: [\n        { date: '2019', profit: 10, sales: 100 },\n        { date: '2020', profit: 30, sales: 200 },\n        { date: '2021', profit: 30, sales: 300 },\n        { date: '2022', profit: 50, sales: 400 },\n        { date: '2023', profit: 40, sales: 500 },\n        { date: '2024', profit: 70, sales: 100 },\n      ],\n      barStyle: {\n        selector: {\n          field: 'profit',\n          op: '>',\n          value: 10,\n        },\n        // selector: {\n        //   field: 'sales',\n        //   op: '>=',\n        //   value: 400,\n        // },\n        // selector: 30,\n        // selector: [40,30,50],\n        // selector: { date:\"2019\" },\n        // selector: [{ date:\"2019\" },{ date:\"2020\", profit: 30 }],\n        barColor: 'red',\n        barBorderColor: '#ccc',\n        barBorderWidth: 2,\n      },\n    }\n\n    const spec = Builder.from(vseed).build()\n\n    const vchart = new VChart(spec, { dom: ref.current })\n    vchart.renderSync()\n\n    return () => vchart.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h2,{id:"标注",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#标注",children:"#"}),"标注"]}),"\n",(0,r.jsxs)(n.h3,{id:"数据点标注",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据点标注",children:"#"}),"数据点标注"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'area',\n      dataset: [\n        { date: '2019', profit: 10, sales: 100 },\n        { date: '2020', profit: 30, sales: 200 },\n        { date: '2021', profit: 30, sales: 300 },\n        { date: '2022', profit: 50, sales: 400 },\n        { date: '2023', profit: 40, sales: 500 },\n        { date: '2024', profit: 70, sales: 100 },\n      ],\n      annotationPoint: {\n        selector: {\n          field: 'profit',\n          op: '>',\n          value: 10,\n        },\n        // selector: {\n        //   field: 'sales',\n        //   op: '>=',\n        //   value: 400,\n        // },\n        // selector: 30,\n        // selector: [40,30,50],\n        // selector: { date:\"2019\" },\n        // selector: [{ date:\"2019\" },{ date:\"2020\", profit: 30 }],\n\n        text: '数据点标注',\n      },\n    }\n\n    const spec = Builder.from(vseed).build()\n\n    const vchart = new VChart(spec, { dom: ref.current })\n    vchart.renderSync()\n\n    return () => vchart.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h3,{id:"数据水平线标注",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据水平线标注",children:"#"}),"数据水平线标注"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'area',\n      dataset: [\n        { date: '2019', profit: 10, sales: 100 },\n        { date: '2020', profit: 30, sales: 200 },\n        { date: '2021', profit: 30, sales: 300 },\n        { date: '2022', profit: 50, sales: 400 },\n        { date: '2023', profit: 40, sales: 500 },\n        { date: '2024', profit: 70, sales: 100 },\n      ],\n      annotationHorizontalLine: {\n        yValue: 170,\n        text: '利润 70',\n      },\n    }\n\n    const spec = Builder.from(vseed).build()\n\n    const vchart = new VChart(spec, { dom: ref.current })\n    vchart.renderSync()\n\n    return () => vchart.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h3,{id:"数据垂直线标注",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据垂直线标注",children:"#"}),"数据垂直线标注"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'columnParallel',\n      dataset: [\n        { date: '2019', profit: 10, sales: 100 },\n        { date: '2020', profit: 30, sales: 200 },\n        { date: '2021', profit: 30, sales: 300 },\n        { date: '2022', profit: 50, sales: 400 },\n        { date: '2023', profit: 40, sales: 500 },\n        { date: '2024', profit: 70, sales: 100 },\n      ],\n      annotationVerticalLine: {\n        selector: '2023',\n        text: '23年',\n      },\n    }\n\n    const spec = Builder.from(vseed).build()\n\n    const vchart = new VChart(spec, { dom: ref.current })\n    vchart.renderSync()\n\n    return () => vchart.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h3,{id:"数据区域标注",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据区域标注",children:"#"}),"数据区域标注"]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'columnParallel',\n      dataset: [\n        { date: '2019', profit: 10, sales: 100 },\n        { date: '2020', profit: 30, sales: 200 },\n        { date: '2021', profit: 30, sales: 300 },\n        { date: '2022', profit: 50, sales: 400 },\n        { date: '2023', profit: 40, sales: 500 },\n        { date: '2024', profit: 70, sales: 100 },\n      ],\n      annotationArea: {\n        selector: [{ date: '2022' }, { date: '2023' }],\n        text: '22~23年',\n        textPosition: 'top',\n        textAlign: 'center',\n      },\n    }\n\n    const spec = Builder.from(vseed).build()\n\n    const vchart = new VChart(spec, { dom: ref.current })\n    vchart.renderSync()\n\n    return () => vchart.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h2,{id:"跨平台渲染",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#跨平台渲染",children:"#"}),"跨平台渲染"]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["\n",(0,r.jsx)(n.code,{children:"vseed"}),"支持无损序列化, 因此可以",(0,r.jsx)(n.code,{children:"跨平台传输"}),", ",(0,r.jsx)(n.code,{children:"复制粘贴"}),", 在Node环境、浏览器环境, 都可以直接通过",(0,r.jsx)(n.code,{children:"builder"}),"获取到完整的spec"]})})]}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect, useState } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\nregisterAll()\n\nconst Demo = () => {\n  const [vseed, setVSeed] = useState()\n  const ref = useRef()\n  const chartRef = useRef()\n  const vseed1: VSeed = {\n    chartType: 'line',\n    dataset: [\n      { date: '2019', profit: 10, sales: 100 },\n      { date: '2020', profit: 30, sales: 200 },\n      { date: '2021', profit: 30, sales: 300 },\n      { date: '2022', profit: 50, sales: 400 },\n      { date: '2023', profit: 40, sales: 500 },\n    ],\n  }\n\n  const vseed2: VSeed = {\n    chartType: 'bar',\n    dataset: [\n      { date: '2019', profit: 10, sales: 100 },\n      { date: '2020', profit: 30, sales: 200 },\n      { date: '2021', profit: 30, sales: 300 },\n      { date: '2022', profit: 50, sales: 400 },\n      { date: '2023', profit: 40, sales: 500 },\n    ],\n  }\n\n  const copyVSeed1 = async () => {\n    await navigator.clipboard.writeText(JSON.stringify(vseed1))\n  }\n  const copyVSeed2 = async () => {\n    await navigator.clipboard.writeText(JSON.stringify(vseed2))\n  }\n\n  const paste = async () => {\n    try {\n      if (chartRef.current) {\n        chartRef.current.release()\n      }\n      const clipboardText = await navigator.clipboard.readText()\n      const parsedVSeed = JSON.parse(clipboardText)\n\n      const builder = Builder.from(parsedVSeed)\n      const advancedVSeed = builder.buildAdvanced()\n      const spec = builder.buildSpec(advancedVSeed)\n      const vchart = new VChart(spec, { dom: ref.current })\n      vchart.renderSync()\n\n      chartRef.current = vchart\n    } catch (error) {\n      console.log('debug', error)\n      alert('从剪切板读取内容时出错')\n    }\n  }\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div style={{ width: 100 }}>\n        <button onClick={copyVSeed1} style={{ width: 100, marginBottom: 4 }}>\n          copy demo1\n        </button>\n        <button onClick={copyVSeed2} style={{ width: 100, marginBottom: 4 }}>\n          copy demo2\n        </button>\n        <button onClick={paste} style={{ width: 100 }}>\n          paste\n        </button>\n      </div>\n\n      <div ref={ref} style={{ height: 260, width: 'calc(100% - 100px)' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,r.jsxs)(n.h2,{id:"分离式构建",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分离式构建",children:"#"}),"分离式构建"]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"TIP"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["\n通常情况下, 图表的数据处理比较耗时, VSeed支持拆分数据处理与数据渲染, ",(0,r.jsx)(n.code,{children:"build"}),"提供",(0,r.jsx)(n.code,{children:"buildAdvanced"}),"和",(0,r.jsx)(n.code,{children:"buildSpec"}),"进行分离式构建"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:"pure title=分离式构建 {4,7}",children:"const builder = Builder.from(vseed)\n\n// Node.js\nconst advancedVSeed = builder.buildAdvanced()\n\n// Web Browser\nconst spec = builder.buildSpec(advancedVSeed)\n\n// spec用于渲染\n"})}),"\n",(0,r.jsx)(a.Z,{code:"import { useRef, useEffect } from 'react'\nimport VChart from '@visactor/vchart'\nimport { registerAll, VSeed, Builder } from '@visactor/vseed'\nregisterAll()\n\nconst Demo = () => {\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const vseed: VSeed = {\n      chartType: 'line',\n      dataset: [\n        { date: '2019', profit: 10, sales: 100 },\n        { date: '2020', profit: 30, sales: 200 },\n        { date: '2021', profit: 30, sales: 300 },\n        { date: '2022', profit: 50, sales: 400 },\n        { date: '2023', profit: 40, sales: 500 },\n      ],\n    }\n    const builder = Builder.from(vseed)\n    const advancedVSeed = builder.buildAdvanced()\n    const spec = builder.buildSpec(advancedVSeed)\n\n    const vchart = new VChart(spec, { dom: ref.current })\n    vchart.renderSync()\n\n    return () => vchart.release()\n  })\n\n  return <div ref={ref} style={{ height: 260, width: '100%' }}></div>\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i(e)}let d=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh-CN%2Fguide%2Fguide.mdx"]={toc:[{id:"图表类型切换",text:"图表类型切换",depth:2},{id:"数据重塑",text:"数据重塑",depth:2},{id:"透视与组合",text:"透视与组合",depth:2},{id:"指标分组",text:"指标分组",depth:3},{id:"行列透视",text:"行列透视",depth:3},{id:"条件样式",text:"条件样式",depth:2},{id:"柱图样式",text:"柱图样式",depth:3},{id:"标注",text:"标注",depth:2},{id:"数据点标注",text:"数据点标注",depth:3},{id:"数据水平线标注",text:"数据水平线标注",depth:3},{id:"数据垂直线标注",text:"数据垂直线标注",depth:3},{id:"数据区域标注",text:"数据区域标注",depth:3},{id:"跨平台渲染",text:"跨平台渲染",depth:2},{id:"分离式构建",text:"分离式构建",depth:2}],title:"功能介绍",headingTitle:"功能介绍",frontmatter:{pageType:"doc"}}}}]);