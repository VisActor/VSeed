"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["3691"],{10952:function(e,n,r){r.r(n),r.d(n,{default:()=>i});var t=r(31549),s=r(6603),a=r(96311);function l(e){return(0,t.jsx)(a.Z,{code:"const run = async (setVSeed) => {\n  // 1. init vquery\n  const vquery = new VQuery()\n  await vquery.init()\n\n  // 2. write or read dataset from indexedDB\n  const files = await vquery.listFiles()\n  const fileName = 'supermarket'\n  if (files.includes(fileName)) {\n    await vquery.readFile(fileName)\n  } else {\n    await vquery.writeFile(fileName, 'https://visactor.github.io/VSeed/dataset/supermarket.csv')\n  }\n\n  // 3. query data using duckDb sql\n  const sql = `\n    SELECT\n      STRFTIME('%Y', \"order_date\") as Date,\n      \"area\" as Area,\n      SUM(\"sales\") as Sales,\n      SUM(\"profit\") as Profit\n    FROM read_csv_auto(${fileName})\n    GROUP BY Date, Area\n    ORDER BY Date;\n  `\n\n  // 4. execute query\n  const { dataset, performance } = await vquery.query(sql)\n  console.log('debug dataset', dataset)\n  console.log('debug query performance', performance)\n\n  // 5.render chart using vseed\n  const vseed = {\n    chartType: 'pivotTable',\n    dataset: dataset,\n    locale: 'en-US',\n\n    // chartType: 'table',\n    // locale: 'zh-CN',\n  }\n\n  setVSeed(() => vseed)\n\n  // 6. close\n  await vquery.close()\n\n  return () => {\n    vquery = null\n  }\n}\n\nconst Demo = () => {\n  const [vseed, setVSeed] = useState<VSeed>()\n  const vquery = useRef<VQuery>()\n\n  useEffect(() => {\n    run(setVSeed)\n  }, [])\n\n  return vseed && <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { VQuery } from '@visactor/vquery'\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart from '@visactor/vchart'\nimport { ListTable, PivotTable, PivotChart, register } from '@visactor/vtable'\nimport {\n  registerAll,\n  VSeed,\n  Builder,\n  isPivotChart,\n  isVChart,\n  isPivotTable,\n  isTable,\n  zVSeed,\n  ColorIdEncoding,\n} from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>()\n  const dark = useDark()\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n    console.log('builder', builder)\n    console.log('builder performance', builder.performance)\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec)\n\n      tableInstance.on('legend_item_click', (args) => {\n        console.log('LEGEND_ITEM_CLICK', args)\n        tableInstance.updateFilterRules([\n          {\n            filterKey: ColorIdEncoding,\n            filteredValues: args.value,\n          },\n        ])\n      })\n\n      tableInstance.on('legend_change', (args) => {\n        const maxValue = args.value[1]\n        const minValue = args.value[0]\n        tableInstance.updateFilterRules([\n          {\n            filterFunc: (record) => {\n              const value = record[record[ColorIdEncoding]]\n              if (value >= minValue && value <= maxValue) {\n                return true\n              }\n              return false\n            },\n          },\n        ])\n      })\n\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec)\n      return () => tableInstance.release()\n    } else if (isPivotTable(vseed)) {\n      const tableInstance = new PivotTable(ref.current, spec)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      ref={ref}\n      style={{ height: 300, width: '100%' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current.spec)\n        console.log('vseed', builderRef.current.vseed)\n        console.log('advancedVSeed', builderRef.current.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      {' '}\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"",editorPosition:"left"})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(l,e)})):l(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh-CN%2Fplayground%2Fvquery.mdx"]={toc:[],title:"标题",headingTitle:"",frontmatter:{title:"标题",playgroundDirection:"horizontal",pageType:"custom"}}}}]);
//# sourceMappingURL=3691.35b935ca.js.map