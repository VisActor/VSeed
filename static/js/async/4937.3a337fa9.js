"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["4937"],{65047:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var t=r(31549),i=r(6603),s=r(95847);function o(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",code:"code",h3:"h3",p:"p"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"数值格式",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数值格式",children:"#"}),"数值格式"]}),"\n",(0,t.jsxs)(n.h2,{id:"autoformat",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#autoformat",children:"#"}),"autoFormat"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"autoFormat"})," 自动格式化, 优先级低于",(0,t.jsx)(n.code,{children:"format"}),"若配置了 ",(0,t.jsx)(n.code,{children:"format"})," 则以format为准"]}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        profit: 12342.34567,\n        sales: 23453.4567,\n      },\n    ],\n    measures: [\n      { id: 'profit', autoFormat: true },\n      { id: 'sales', autoFormat: true },\n    ],\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n  const [locale, setLocale] = useState<Locale>('en-US')\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    const builder = Builder.from({ ...vseed, theme, locale })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark, locale])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div>\n        {['en-US', 'zh-CN'].map((d) => {\n          return (\n            <span key={d} style={{ margin: '0 2px' }}>\n              <button\n                onClick={() => setLocale(d)}\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\n              >\n                {d}\n              </button>\n            </span>\n          )\n        })}\n      </div>\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,t.jsxs)(n.h2,{id:"format",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#format",children:"#"}),"format"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"format"})," 数值格式化配置, 优先级高于",(0,t.jsx)(n.code,{children:"autoFormat"})]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"type",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#type",children:"#"}),"type"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"number"})," 数值 (十进制)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"percent"})," 百分比 (0.00%)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"permille"})," 千分比 (0.00‰)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scientific"})," 科学计数法 (1.23e+3)"]}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        profit: 1234.4567,\n        sales: 1234.4567,\n        count: 1234.4567,\n      },\n    ],\n    measures: [\n      { id: 'profit', format: { type: 'percent' } },\n      { id: 'sales', format: { type: 'permille' } },\n      { id: 'count', format: { type: 'scientific' } },\n    ],\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,t.jsxs)(n.h3,{id:"thousandseparator",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#thousandseparator",children:"#"}),"thousandSeparator"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"thousandSeparator"})," 千分位分隔符"]}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        profit: 12344567,\n        sales: 12344567,\n        count: 12344567,\n      },\n    ],\n    measures: [\n      { id: 'profit', format: { type: 'percent', thousandSeparator: true } },\n      { id: 'sales', format: { type: 'permille', thousandSeparator: false } },\n      { id: 'count', format: { type: 'number', thousandSeparator: true } },\n    ],\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,t.jsxs)(n.h3,{id:"ratio--symbol",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ratio--symbol",children:"#"}),"ratio & symbol"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ratio"})," 比例"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"symbol"})," 单位"]}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        num1: 1,\n        num2: 10,\n        num3: 100,\n        num4: 1000,\n        num5: 10000,\n        num6: 100000,\n        num7: 1000000,\n        num8: 10000000,\n        num9: 100000000,\n      },\n    ],\n    measures: [\n      { id: 'num1', format: { type: 'number', fractionDigits: 0, ratio: 1, symbol: '' } },\n      { id: 'num2', format: { type: 'number', fractionDigits: 0, ratio: 10, symbol: '十' } },\n      { id: 'num3', format: { type: 'number', fractionDigits: 0, ratio: 100, symbol: '百' } },\n      { id: 'num4', format: { type: 'number', fractionDigits: 0, ratio: 1000, symbol: '千' } },\n      { id: 'num5', format: { type: 'number', fractionDigits: 0, ratio: 10000, symbol: '万' } },\n      { id: 'num6', format: { type: 'number', fractionDigits: 0, ratio: 100000, symbol: '十万' } },\n      { id: 'num7', format: { type: 'number', fractionDigits: 0, ratio: 1000000, symbol: '百万' } },\n      { id: 'num8', format: { type: 'number', fractionDigits: 0, ratio: 10000000, symbol: '千万' } },\n      { id: 'num9', format: { type: 'number', fractionDigits: 0, ratio: 100000000, symbol: '亿' } },\n    ],\n    yAxis: {\n      log: true,\n      logBase: 10,\n    },\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,t.jsxs)(n.h3,{id:"fractiondigits",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fractiondigits",children:"#"}),"fractionDigits"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fractionDigits"})," 小数位, 必须大于等于0, 否则不生效."]}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        num0: 123.456,\n        num1: 123.456,\n        num2: 123.456,\n        num3: 123.456,\n        num4: 123.456,\n        num5: 234.567,\n        num6: 234.567,\n        num7: 234.567,\n        num8: 345.678,\n        num9: 345.678,\n        num9: 400,\n      },\n    ],\n    measures: [\n      { id: 'num0', format: { type: 'number', fractionDigits: 0 } },\n      { id: 'num1', format: { type: 'number', fractionDigits: 1 } },\n      { id: 'num2', format: { type: 'number', fractionDigits: 2 } },\n      { id: 'num3', format: { type: 'number', fractionDigits: 3 } },\n      { id: 'num4', format: { type: 'number', fractionDigits: 4 } },\n      { id: 'num5', format: { type: 'number', fractionDigits: 5 } },\n      { id: 'num6', format: { type: 'number', fractionDigits: 6 } },\n      { id: 'num7', format: { type: 'number', fractionDigits: 7 } },\n      { id: 'num8', format: { type: 'number', fractionDigits: 8 } },\n      { id: 'num9', format: { type: 'number', fractionDigits: 9 } },\n    ],\n    yAxis: {},\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,t.jsxs)(n.h3,{id:"significantdigits",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#significantdigits",children:"#"}),"significantDigits"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"significantDigits"})," 有效数字, 必须大于0, 否则不生效"]}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        num0: 123.456,\n        num1: 123.456,\n        num2: 123.456,\n        num3: 123.456,\n        num4: 123.456,\n        num5: 234.567,\n        num6: 234.567,\n        num7: 234.567,\n        num8: 345.678,\n        num9: 345.678,\n        num9: 1000,\n      },\n    ],\n    measures: [\n      { id: 'num0', format: { type: 'number', significantDigits: 0 } },\n      { id: 'num1', format: { type: 'number', significantDigits: 1 } },\n      { id: 'num2', format: { type: 'number', significantDigits: 2 } },\n      { id: 'num3', format: { type: 'number', significantDigits: 3 } },\n      { id: 'num4', format: { type: 'number', significantDigits: 4 } },\n      { id: 'num5', format: { type: 'number', significantDigits: 5 } },\n      { id: 'num6', format: { type: 'number', significantDigits: 6 } },\n      { id: 'num7', format: { type: 'number', significantDigits: 7 } },\n      { id: 'num8', format: { type: 'number', significantDigits: 8 } },\n      { id: 'num9', format: { type: 'number', significantDigits: 9 } },\n    ],\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,t.jsxs)(n.h3,{id:"roundingpriority",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#roundingpriority",children:"#"}),"roundingPriority"]}),"\n",(0,t.jsxs)(n.p,{children:["若同时设置了 ",(0,t.jsx)(n.code,{children:"fractionDigits"})," 和 ",(0,t.jsx)(n.code,{children:"significantDigits"}),"，则 ",(0,t.jsx)(n.code,{children:"roundingPriority"})," 会生效, 默认为 ",(0,t.jsx)(n.code,{children:"lessPrecision"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lessPrecision"})," 更少精度, 尽可能的以 ",(0,t.jsx)(n.code,{children:"significantDigits"})," 为准, 但如果 ",(0,t.jsx)(n.code,{children:"significantDigits"})," 不足, 则以 ",(0,t.jsx)(n.code,{children:"significantDigits"})," 为准"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"morePrecision"})," 更多精度, 尽可能的以 ",(0,t.jsx)(n.code,{children:"fractionDigits"})," 为准, 但如果 ",(0,t.jsx)(n.code,{children:"fractionDigits"})," 不足, 则以 ",(0,t.jsx)(n.code,{children:"significantDigits"})," 为准"]}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        num0: 123.456,\n        num1: 123.456,\n        num2: 123.456,\n        num3: 123.456,\n        num4: 123.456,\n        num5: 234.567,\n        num6: 234.567,\n        num7: 234.567,\n        num8: 345.678,\n        num9: 345.678,\n        num9: 1000,\n      },\n    ],\n    measures: [\n      {\n        id: 'num0',\n        format: { type: 'number', significantDigits: 0, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num1',\n        format: { type: 'number', significantDigits: 1, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num2',\n        format: { type: 'number', significantDigits: 2, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num3',\n        format: { type: 'number', significantDigits: 3, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num4',\n        format: { type: 'number', significantDigits: 4, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num5',\n        format: { type: 'number', significantDigits: 5, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num6',\n        format: { type: 'number', significantDigits: 6, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num7',\n        format: { type: 'number', significantDigits: 7, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num8',\n        format: { type: 'number', significantDigits: 8, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n      {\n        id: 'num9',\n        format: { type: 'number', significantDigits: 9, fractionDigits: 2, roundingPriority: 'morePrecision' },\n      },\n    ],\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n  const [roundingPriority, setRoundingPriority] = useState('morePrecision')\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    vseed.measures?.forEach((d) => {\n      d.format.roundingPriority = roundingPriority\n    })\n\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark, roundingPriority])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div>\n        {['lessPrecision', 'morePrecision'].map((d) => {\n          return (\n            <span key={d} style={{ margin: '0 2px' }}>\n              <button\n                onClick={() => setRoundingPriority(d)}\n                style={{ fontSize: 10, padding: '0 2px', border: '1px solid #cccccc' }}\n              >\n                {d}\n              </button>\n            </span>\n          )\n        })}\n      </div>\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,t.jsxs)(n.h3,{id:"roundingmode",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#roundingmode",children:"#"}),"roundingMode"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"roundingMode"})," 四舍五入模式, 默认为 ",(0,t.jsx)(n.code,{children:"halfExpand"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"floor"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ceil"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"expand"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"trunc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"halfCeil"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"halfFloor"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"halfExpand"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"halfTrunc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"halfEven"})}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        num0: 123.34,\n        num1: 123.38,\n        num2: -123.34,\n        num3: -123.38,\n        num4: 123.34,\n        num5: 234.38,\n        num6: -234.34,\n        num7: -234.38,\n        num8: 4.5,\n        num9: 3.5,\n      },\n    ],\n    measures: [\n      { id: 'num0', format: { type: 'number', fractionDigits: 1, roundingMode: 'floor' } },\n      { id: 'num1', format: { type: 'number', fractionDigits: 1, roundingMode: 'ceil' } },\n      { id: 'num2', format: { type: 'number', fractionDigits: 1, roundingMode: 'expand' } },\n      { id: 'num3', format: { type: 'number', fractionDigits: 1, roundingMode: 'trunc' } },\n      { id: 'num4', format: { type: 'number', fractionDigits: 1, roundingMode: 'halfCeil' } },\n      { id: 'num5', format: { type: 'number', fractionDigits: 1, roundingMode: 'halfFloor' } },\n      { id: 'num6', format: { type: 'number', fractionDigits: 1, roundingMode: 'halfExpand' } },\n      { id: 'num7', format: { type: 'number', fractionDigits: 1, roundingMode: 'halfTrunc' } },\n      { id: 'num8', format: { type: 'number', fractionDigits: 0, roundingMode: 'halfEven' } },\n      { id: 'num9', format: { type: 'number', fractionDigits: 0, roundingMode: 'halfEven' } },\n    ],\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"}),"\n",(0,t.jsxs)(n.h3,{id:"suffix--prefix",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#suffix--prefix",children:"#"}),"suffix & prefix"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"suffix 后缀"}),"\n",(0,t.jsx)(n.li,{children:"prefix 前缀"}),"\n"]}),"\n",(0,t.jsx)(s.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'column',\n    dataset: [\n      {\n        num0: 123.34,\n        num1: 123.38,\n        num2: -123.34,\n        num3: -123.38,\n        num4: 123.34,\n        num5: 234.38,\n        num6: -234.34,\n        num7: -234.38,\n        num8: 4.5,\n        num9: 3.5,\n      },\n    ],\n    measures: [\n      { id: 'num0', format: { type: 'number', fractionDigits: 1, suffix: '\xa5' } },\n      { id: 'num1', format: { type: 'number', fractionDigits: 1, suffix: '$' } },\n      { id: 'num2', format: { type: 'number', fractionDigits: 1, suffix: '!' } },\n      { id: 'num3', format: { type: 'number', fractionDigits: 1, suffix: '-' } },\n      { id: 'num4', format: { type: 'number', fractionDigits: 1, suffix: '+' } },\n      { id: 'num5', format: { type: 'number', fractionDigits: 1, prefix: '\xa5' } },\n      { id: 'num6', format: { type: 'number', fractionDigits: 1, prefix: '$' } },\n      { id: 'num7', format: { type: 'number', fractionDigits: 1, prefix: '!' } },\n      { id: 'num8', format: { type: 'number', fractionDigits: 0, prefix: '-' } },\n      { id: 'num9', format: { type: 'number', fractionDigits: 0, prefix: '+' } },\n    ],\n  }\n\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect, useState } from 'react'\nimport { useDark } from 'rspress/runtime'\nimport VChart, { ISpec } from '@visactor/vchart'\nimport {\n  ListTable,\n  ListTableConstructorOptions,\n  PivotChart,\n  PivotChartConstructorOptions,\n  register,\n} from '@visactor/vtable'\nimport { registerAll, VSeed, Builder, isPivotChart, isVChart, isVTable, zVSeed, Locale } from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>(Builder.from({ chartType: 'line', dataset: [] }))\n  const dark = useDark()\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec as PivotChartConstructorOptions)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec as ISpec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isVTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec as ListTableConstructorOptions)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      style={{ display: 'flex', flexDirection: 'column' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current?.spec)\n        console.log('vseed', builderRef.current?.vseed)\n        console.log('advancedVSeed', builderRef.current?.advancedVSeed)\n        console.groupEnd()\n      }}\n    >\n      <div ref={ref} style={{ height: 300, width: '100%' }}></div>\n    </div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"vertical",editorPosition:"left"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(o,e)})):o(e)}let a=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh-CN%2Fgalley%2FdataConfig%2FnumFormat.mdx"]={toc:[{id:"autoformat",text:"autoFormat",depth:2},{id:"format",text:"format",depth:2},{id:"type",text:"type",depth:3},{id:"thousandseparator",text:"thousandSeparator",depth:3},{id:"ratio--symbol",text:"ratio & symbol",depth:3},{id:"fractiondigits",text:"fractionDigits",depth:3},{id:"significantdigits",text:"significantDigits",depth:3},{id:"roundingpriority",text:"roundingPriority",depth:3},{id:"roundingmode",text:"roundingMode",depth:3},{id:"suffix--prefix",text:"suffix & prefix",depth:3}],title:"数值格式",headingTitle:"数值格式",frontmatter:{pageType:"doc"}}}}]);
//# sourceMappingURL=4937.3a337fa9.js.map