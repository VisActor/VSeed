{"version":3,"file":"static/js/async/35199.237b6949.js","sources":["webpack://website/../../packages/vseed/dist/index.js"],"sourcesContent":["import { clone, groupBy, isArray, isEmpty as external_remeda_isEmpty, isNullish, isNumber, isObjectType, isString, merge, mergeDeep, omit, pick, sort, unique, uniqueBy } from \"remeda\";\nimport { z } from \"zod\";\nconst execPipeline = (pipeline, context, initialValue = {})=>{\n    const result = pipeline.reduce((prev, cur)=>cur(prev, context), initialValue);\n    return result;\n};\nconst buildAdvanced = (builder)=>{\n    const start = 'undefined' != typeof performance ? performance.now() : Date.now();\n    const { chartType } = builder.vseed;\n    if (!chartType) throw new Error('chartType is nil in buildAdvanced');\n    const pipeline = Builder.getAdvancedPipeline(chartType);\n    if (!pipeline) throw new Error(`no advanced pipeline for chartType ${chartType}`);\n    const context = {\n        vseed: builder.vseed,\n        customTheme: Builder.getThemeMap()\n    };\n    try {\n        return execPipeline(pipeline, context);\n    } catch (e) {\n        console.error(e);\n        throw new Error(\"buildAdvanced error, see error info in console\");\n    } finally{\n        const end = 'undefined' != typeof performance ? performance.now() : Date.now();\n        builder.performance['buildAdvanced'] = `${(end - start).toFixed(4)}ms`;\n    }\n};\nconst buildSpec = (builder, advancedVSeed)=>{\n    const start = 'undefined' != typeof performance ? performance.now() : Date.now();\n    const { chartType } = builder.vseed;\n    if (!chartType) throw new Error('chartType is nil in buildSpec');\n    const pipeline = Builder.getSpecPipeline(chartType);\n    if (!pipeline) throw new Error(`no spec pipeline for chartType ${chartType}`);\n    const context = {\n        vseed: builder.vseed,\n        advancedVSeed\n    };\n    try {\n        return execPipeline(pipeline, context);\n    } catch (e) {\n        console.error(e);\n        throw new Error(\"buildSpec error, see error info in console\");\n    } finally{\n        const end = 'undefined' != typeof performance ? performance.now() : Date.now();\n        builder.performance['buildSpec'] = `${(end - start).toFixed(4)}ms`;\n    }\n};\nconst build = (builder)=>{\n    const advancedVSeed = builder.buildAdvanced();\n    builder.advancedVSeed = advancedVSeed;\n    if (!advancedVSeed) throw new Error('advancedVSeed is null');\n    const spec = builder.buildSpec(advancedVSeed);\n    builder.spec = spec;\n    return spec;\n};\nvar i18n_namespaceObject = JSON.parse('{\"指标名称\":{\"en-US\":\"MeasureName\",\"zh-CN\":\"指标名称\"},\"指标Id\":{\"en-US\":\"MeasureId\",\"zh-CN\":\"指标Id\"},\"指标值\":{\"en-US\":\"MeasureValue\",\"zh-CN\":\"指标值\"}}');\nclass i18n_Intl {\n    static instance;\n    translateMap = i18n_namespaceObject;\n    locale = 'zh-CN';\n    canTranslate = (value)=>!!this.translateMap[value];\n    i18n = (segments, ...values)=>{\n        const text = segments.map((segment, index)=>segment + (values[index] || '')).join('');\n        const translatedText = this.translateMap?.[text]?.[this.locale];\n        if (isNullish(translatedText)) {\n            console.warn(`i18n ${this.locale} no translate: ${text}`);\n            return text;\n        }\n        return translatedText;\n    };\n    setLocale = (locale)=>{\n        this.locale = locale;\n    };\n    getLocale = ()=>this.locale;\n    static getInstance() {\n        if (!i18n_Intl.instance) i18n_Intl.instance = new i18n_Intl();\n        return i18n_Intl.instance;\n    }\n}\nconst intl = i18n_Intl.getInstance();\nconst i18n = intl.i18n;\nconst getColorItems = (builder)=>{\n    const advancedVSeed = builder.advancedVSeed;\n    if (!advancedVSeed) return [];\n    const { datasetReshapeInfo } = advancedVSeed;\n    const colorItems = unique(datasetReshapeInfo.flatMap((d)=>d.unfoldInfo.colorItems));\n    const colorIdMap = datasetReshapeInfo.reduce((prev, cur)=>({\n            ...prev,\n            ...cur.unfoldInfo.colorIdMap\n        }), {});\n    return colorItems.map((d)=>colorIdMap[d]);\n};\nconst getColorIdMap = (builder)=>{\n    const advancedVSeed = builder.advancedVSeed;\n    if (!advancedVSeed) return {};\n    const { datasetReshapeInfo } = advancedVSeed;\n    const colorIdMap = datasetReshapeInfo.reduce((prev, cur)=>({\n            ...prev,\n            ...cur.unfoldInfo.colorIdMap\n        }), {});\n    return colorIdMap;\n};\nclass Builder {\n    _vseed;\n    _advancedVSeed = null;\n    _spec = null;\n    _performance = {};\n    constructor(vseed){\n        this._vseed = vseed;\n        this._vseed.locale = vseed.locale || intl.getLocale();\n    }\n    build = ()=>build(this);\n    buildSpec = (advanced)=>buildSpec(this, advanced);\n    buildAdvanced = ()=>buildAdvanced(this);\n    getColorItems = ()=>getColorItems(this);\n    getColorIdMap = ()=>getColorIdMap(this);\n    get vseed() {\n        return this._vseed;\n    }\n    set vseed(value) {\n        this._vseed = value;\n    }\n    get advancedVSeed() {\n        return this._advancedVSeed;\n    }\n    set advancedVSeed(value) {\n        this._advancedVSeed = value;\n    }\n    get spec() {\n        return this._spec;\n    }\n    set spec(value) {\n        this._spec = value;\n    }\n    get performance() {\n        return this._performance;\n    }\n    set performance(value) {\n        this._performance = value;\n    }\n    static getAdvancedPipeline = (chartType)=>{\n        const customPipe = Builder._customAdvancedPipe[chartType];\n        const pipeline = Builder._advancedPipelineMap[chartType];\n        if (customPipe) pipeline.push(customPipe);\n        return pipeline;\n    };\n    static getSpecPipeline = (chartType)=>{\n        const customPipe = Builder._customSpecPipe[chartType];\n        const pipeline = Builder._specPipelineMap[chartType];\n        if (customPipe) pipeline.push(customPipe);\n        return pipeline;\n    };\n    static getTheme = (themeKey)=>Builder._themeMap[themeKey];\n    static getThemeMap = ()=>Builder._themeMap;\n    static from = (vseed)=>new Builder(vseed);\n    static _advancedPipelineMap = {};\n    static _specPipelineMap = {};\n    static _customAdvancedPipe = {};\n    static _customSpecPipe = {};\n    static _themeMap = {};\n}\nconst initAdvancedVSeed = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType, locale } = vseed;\n    return {\n        ...advancedVSeed,\n        chartType,\n        locale: locale || 'zh-CN'\n    };\n};\nconst autoMeasures = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { measures, dataset } = vseed;\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (measures) {\n        result.measures = measures;\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    result.measures = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'number' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key)).map((measure)=>({\n            id: measure,\n            alias: measure,\n            encoding: 'column'\n        }));\n    return result;\n};\nconst preorderTraverse = (tree, callback)=>{\n    if (!tree || 0 === tree.length) return;\n    const stack = [\n        ...tree\n    ].reverse();\n    while(stack.length > 0){\n        const node = stack.pop();\n        const stop = callback(node);\n        if (true === stop) return;\n        if (!('children' in node)) continue;\n        const children = node.children;\n        if (children && children.length > 0) for(let i = children.length - 1; i >= 0; i--){\n            const child = children[i];\n            stack.push(child);\n        }\n    }\n};\nconst findMeasureById = (measures = [], id)=>{\n    if (!measures) return;\n    let result;\n    preorderTraverse(measures, (node)=>{\n        if (!('children' in node)) {\n            if (node.id === id) {\n                result = node;\n                return true;\n            }\n        }\n        return false;\n    });\n    return result;\n};\nconst findFirstMeasure = (measures = [])=>{\n    if (!measures) return;\n    let result;\n    preorderTraverse(measures, (node)=>{\n        if (!('children' in node)) {\n            result = node;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\nconst findAllMeasures = (measures = [])=>{\n    if (!measures) return [];\n    const result = [];\n    preorderTraverse(measures, (node)=>{\n        if (!('children' in node)) result.push(node);\n        return false;\n    });\n    return result;\n};\nconst autoDimensions = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dimensions, dataset } = vseed;\n    const measures = findAllMeasures(advancedVSeed.measures);\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (dimensions) {\n        result.dimensions = dimensions.map((dim)=>({\n                location: 'dimension',\n                ...dim\n            }));\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    result.dimensions = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'string' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key) && !measures.some((measure)=>measure.id === key)).map((dim)=>({\n            id: dim,\n            alias: dim,\n            encoding: 'column'\n        }));\n    return result;\n};\nconst records_records = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { dataset } = vseed;\n    return {\n        ...advancedVSeed,\n        dataset\n    };\n};\nconst tableConfig_tableConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'bodyFontSize',\n        'bodyFontColor',\n        'bodyBackgroundColor',\n        'headerFontSize',\n        'headerFontColor',\n        'headerBackgroundColor',\n        'hoverHeaderBackgroundColor',\n        'hoverHeaderInlineBackgroundColor',\n        'selectedBorderColor',\n        'selectedBackgroundColor'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst theme_theme = (advancedVSeed, context)=>{\n    const { customTheme, vseed } = context;\n    const { theme = 'light', chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    if (!customTheme || !customTheme[theme]) return result;\n    const chartConfigTheme = customTheme?.[theme].config?.[chartType];\n    if (chartConfigTheme) {\n        const chartConfig = result.config?.[chartType] || {};\n        const mergedConfig = mergeDeep(chartConfigTheme, clone(chartConfig));\n        for(const _k in mergedConfig){\n            const key = _k;\n            if (Array.isArray(mergedConfig[key])) mergedConfig[key] = mergeArray(mergedConfig[key], chartConfigTheme[key]);\n        }\n        result.config = {\n            [chartType]: mergedConfig\n        };\n    }\n    const chartCustomTheme = customTheme?.[theme]?.config?.[chartType];\n    result.customTheme = {\n        config: {\n            [chartType]: chartCustomTheme\n        }\n    };\n    return result;\n};\nconst mergeArray = (arr, themeItem)=>{\n    if (isNullish(themeItem) || isString(themeItem) || isNumber(themeItem)) return arr;\n    if (!Array.isArray(arr)) return arr;\n    if (arr.some((d)=>!isObjectType(d))) return arr;\n    return arr.map((item)=>merge(themeItem, item));\n};\nconst tableAdvancedPipeline = [\n    initAdvancedVSeed,\n    autoMeasures,\n    autoDimensions,\n    records_records,\n    tableConfig_tableConfig,\n    theme_theme\n];\nconst initTable = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { dataset } = advancedVSeed;\n    const { config } = advancedVSeed;\n    const { backgroundColor = 'transparent' } = config.table || {};\n    return {\n        ...spec,\n        records: dataset,\n        widthMode: 'standard',\n        heightMode: 'autoHeight',\n        autoWrapText: true,\n        columnResizeMode: 'all',\n        showHeader: true,\n        tooltip: {\n            isShowOverflowTextTooltip: true\n        },\n        animationAppear: {\n            duration: 300,\n            delay: 250,\n            type: 'one-by-one',\n            direction: 'row'\n        },\n        hover: {\n            highlightMode: 'row'\n        },\n        theme: {\n            underlayBackgroundColor: backgroundColor\n        }\n    };\n};\nconst isMeasure = (measure)=>!('children' in measure);\nconst isMeasureGroup = (measure)=>'children' in measure;\nconst isMeasures = (measures)=>measures.every(isMeasure);\nconst dimensionTreeToColumns = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    const result = {\n        ...spec\n    };\n    const eachNode = (node)=>{\n        if (isMeasure(node)) return {\n            width: 'auto'\n        };\n        return {};\n    };\n    const columns = treeTreeToColumns(dimensions, eachNode);\n    return {\n        ...result,\n        columns: [\n            ...result.columns || [],\n            ...columns\n        ]\n    };\n};\nconst treeTreeToColumns = (tree, callback)=>{\n    const result = tree.map((item)=>{\n        if ('children' in item && Array.isArray(item.children)) {\n            const groupNode = item;\n            const field = groupNode.id;\n            const title = groupNode.alias ?? groupNode.id;\n            const props = callback?.(groupNode) || {};\n            return {\n                field,\n                title,\n                columns: treeTreeToColumns(item.children, callback),\n                ...props\n            };\n        }\n        {\n            const field = item.id;\n            const title = item.alias ?? item.id;\n            const props = callback?.(item) || {};\n            return {\n                field,\n                title,\n                ...props\n            };\n        }\n    });\n    return result || [];\n};\nconst createNumFormatter = (format, locale = intl.getLocale())=>{\n    const { type = 'number', ratio = 1, symbol = '', thousandSeparator = true, prefix = '', suffix = '', fractionDigits = 2, significantDigits, roundingMode = 'halfExpand', roundingPriority = 'auto' } = format || {};\n    const numFormatterOptions = {\n        style: 'decimal',\n        notation: 'scientific' === type ? 'scientific' : 'standard',\n        roundingMode,\n        roundingPriority\n    };\n    if (isNumber(fractionDigits)) {\n        if (fractionDigits >= 0) {\n            numFormatterOptions.minimumFractionDigits = fractionDigits;\n            numFormatterOptions.maximumFractionDigits = fractionDigits;\n        }\n    }\n    if (isNumber(significantDigits) && significantDigits > 0) {\n        if (significantDigits > 0) {\n            numFormatterOptions.minimumSignificantDigits = significantDigits;\n            numFormatterOptions.maximumSignificantDigits = significantDigits;\n        }\n    }\n    const numFormatter = new Intl.NumberFormat(locale, numFormatterOptions);\n    return (value)=>{\n        let num = Number(value);\n        let typeSymbol = '';\n        if (Number.isNaN(num)) return String(value);\n        if ('percent' === type) {\n            num *= 100;\n            typeSymbol = '%';\n        } else if ('permille' === type) {\n            num *= 1000;\n            typeSymbol = \"\\u2030\";\n        } else if ('number' === type) num /= ratio || 1;\n        let numStr = numFormatter.format(num);\n        if (thousandSeparator) {\n            const parts = numStr.split('.');\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n            numStr = parts.join('.');\n        }\n        return `${prefix}${numStr}${typeSymbol}${symbol}${suffix}`;\n    };\n};\nconst autoNumFormatter = (value, locale = intl.getLocale())=>{\n    if (null == value) return String(value);\n    const num = Number(value);\n    if (Number.isNaN(num)) return String(value);\n    const numFormatterOptions = {\n        style: 'decimal',\n        notation: 'compact'\n    };\n    numFormatterOptions.minimumFractionDigits = 0;\n    numFormatterOptions.maximumFractionDigits = 2;\n    const numFormatter = new Intl.NumberFormat(locale, {\n        ...numFormatterOptions\n    });\n    return numFormatter.format(Number(value));\n};\nconst createFormatter = (format)=>createNumFormatter(format);\nconst autoFormatter = (value, locale)=>autoNumFormatter(value, locale);\nconst measureTreeToColumns = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { locale } = advancedVSeed;\n    const measures = advancedVSeed.measures;\n    const result = {\n        ...spec\n    };\n    const eachNode = (node)=>{\n        if (isMeasure(node)) return {\n            width: 'auto',\n            fieldFormat: fieldFormat(node, locale)\n        };\n        return {};\n    };\n    const columns = measuresToColumns_treeTreeToColumns(measures, eachNode);\n    return {\n        ...result,\n        columns: [\n            ...result.columns || [],\n            ...columns\n        ]\n    };\n};\nconst fieldFormat = (node, locale)=>(datum)=>{\n        const { format = {}, autoFormat = true, id } = node;\n        const value = datum[id];\n        if (!external_remeda_isEmpty(format)) {\n            const formatter = createFormatter(format);\n            return formatter(value);\n        }\n        if (autoFormat) return autoFormatter(value, locale);\n    };\nconst measuresToColumns_treeTreeToColumns = (tree, callback)=>{\n    const result = tree.map((item)=>{\n        if ('children' in item && Array.isArray(item.children)) {\n            const groupNode = item;\n            const field = groupNode.id;\n            const title = groupNode.alias ?? groupNode.id;\n            const props = callback?.(groupNode) || {};\n            return {\n                field,\n                title,\n                columns: measuresToColumns_treeTreeToColumns(item.children, callback),\n                ...props\n            };\n        }\n        {\n            const field = item.id;\n            const title = item.alias ?? item.id;\n            const props = callback?.(item) || {};\n            return {\n                field,\n                title,\n                ...props\n            };\n        }\n    });\n    return result || [];\n};\nconst bodyStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { chartType, config } = advancedVSeed;\n    const themeConfig = config?.[chartType];\n    if (!result.theme || !themeConfig) return result;\n    const borderColor = themeConfig.borderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themeConfig.bodyBackgroundColor || '#fff';\n    const fontColor = themeConfig.bodyFontColor || '#1B1F23';\n    const fontSize = themeConfig.bodyFontSize || 12;\n    const hoverCellBgColor = themeConfig.hoverBodyBackgroundColor || '#bedaff';\n    const hoverInlineColor = themeConfig.hoverBodyInlineBackgroundColor || '#bedaff';\n    result.theme.bodyStyle = {\n        borderColor: borderColor,\n        borderLineWidth: 1,\n        padding: [\n            8.6,\n            12,\n            8.6,\n            12\n        ],\n        textAlign: 'right',\n        hover: {\n            cellBgColor: hoverCellBgColor,\n            inlineRowBgColor: hoverInlineColor,\n            inlineColumnBgColor: hoverInlineColor\n        },\n        color: fontColor,\n        fontSize: fontSize,\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        fontVariant: 'normal',\n        bgColor: backgroundColor,\n        lineHeight: 1.5 * fontSize\n    };\n    return result;\n};\nconst headerStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { config, chartType } = advancedVSeed;\n    const themConfig = config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.borderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themConfig.headerBackgroundColor || '#EEF1F5';\n    const fontColor = themConfig.headerFontColor || '#1B1F23';\n    const fontSize = themConfig.headerFontSize || 12;\n    const hoverCellBgColor = themConfig.hoverHeaderBackgroundColor || '#bedaff';\n    const hoverInlineColor = themConfig.hoverHeaderInlineBackgroundColor || '#bedaff';\n    result.theme.headerStyle = {\n        borderColor: borderColor,\n        borderLineWidth: 1,\n        padding: [\n            8,\n            12,\n            8,\n            12\n        ],\n        textAlign: 'center',\n        hover: {\n            cellBgColor: hoverCellBgColor,\n            inlineRowBgColor: hoverInlineColor,\n            inlineColumnBgColor: hoverInlineColor\n        },\n        frameStyle: {\n            borderColor: [\n                null,\n                null,\n                borderColor,\n                null\n            ],\n            borderLineWidth: 1\n        },\n        fontSize: fontSize,\n        fontVariant: 'normal',\n        fontStyle: 'normal',\n        fontWeight: 'bold',\n        color: fontColor,\n        bgColor: backgroundColor,\n        lineHeight: 1.5 * fontSize\n    };\n    return result;\n};\nconst frameStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { config, chartType } = advancedVSeed;\n    const themConfig = config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.borderColor || 'rgb(224, 224, 224)';\n    result.theme.frameStyle = {\n        borderColor,\n        borderLineWidth: 0,\n        cornerRadius: 4\n    };\n    return result;\n};\nconst selectionStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { config, chartType } = advancedVSeed;\n    const themConfig = config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.selectedBorderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themConfig.selectedBackgroundColor || 'rgb(224, 224, 224, 0.5)';\n    result.theme.selectionStyle = {\n        cellBorderColor: borderColor,\n        cellBorderLineWidth: 2,\n        cellBgColor: backgroundColor\n    };\n    return result;\n};\nconst tableSpecPipeline = [\n    initTable,\n    dimensionTreeToColumns,\n    measureTreeToColumns,\n    bodyStyle,\n    headerStyle,\n    frameStyle,\n    selectionStyle\n];\nconst registerTable = ()=>{\n    Builder._advancedPipelineMap.table = tableAdvancedPipeline;\n    Builder._specPipelineMap.table = tableSpecPipeline;\n};\nconst autoPivotMeasures = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const measures = findAllMeasures(vseed.measures);\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (vseed.measures) {\n        result.measures = findAllMeasures(measures);\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    result.measures = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'number' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key)).map((measure)=>({\n            id: measure,\n            alias: measure,\n            encoding: 'detail'\n        }));\n    return result;\n};\nconst ORIGINAL_DATA = '__OriginalData__';\nconst Separator = '-';\nconst FoldMeasureName = '__MeaName__';\nconst FoldMeasureId = '__MeaId__';\nconst FoldMeasureValue = '__MeaValue__';\nconst MeasureName = FoldMeasureName;\nconst FoldPrimaryMeasureValue = '__MeaPrimaryValue__';\nconst FoldSecondaryMeasureValue = '__MeaSecondaryValue__';\nconst FoldXMeasureValue = '__MeaXValue__';\nconst FoldYMeasureValue = '__MeaYValue__';\nconst XEncoding = '__Dim_X__';\nconst YEncoding = '__Dim_Y__';\nconst AngleEncoding = '__Dim_Angle__';\nconst DetailEncoding = '__Dim_Detail__';\nconst ColorEncoding = '__Dim_Color__';\nconst ColorIdEncoding = '__Dim_ColorId__';\nconst findAllDimensions = (dimensions = [])=>{\n    if (!dimensions) return [];\n    const result = [];\n    preorderTraverse(dimensions, (node)=>{\n        if (!('children' in node)) result.push(node);\n        return false;\n    });\n    return result;\n};\nconst autoPivotDimensions = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dimensions, dataset } = vseed;\n    const measures = findAllMeasures(advancedVSeed.measures);\n    const MeaName = {\n        id: MeasureName,\n        alias: intl.i18n`指标名称`\n    };\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (dimensions) {\n        const newDimensions = findAllDimensions(dimensions);\n        if (!newDimensions.some((dim)=>dim.id === MeasureName)) newDimensions.push(MeaName);\n        result.dimensions = newDimensions.map((item, index)=>{\n            if ('row' === item.encoding || 'column' === item.encoding) return item;\n            if ('rowDimension' === item.location || 'columnDimension' === item.location) return item;\n            return {\n                ...item,\n                encoding: index % 2 === 0 ? 'column' : 'row'\n            };\n        });\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    const newDimensions = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'string' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key) && !measures.some((measure)=>measure.id === key));\n    result.dimensions = newDimensions.map((dim)=>({\n            id: dim,\n            alias: dim\n        }));\n    result.dimensions.push(MeaName);\n    result.dimensions = result.dimensions.map((dim, index)=>({\n            ...dim,\n            encoding: index % 2 === 0 ? 'column' : 'row'\n        }));\n    return result;\n};\nconst pivotTableConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'bodyFontSize',\n        'bodyFontColor',\n        'bodyBackgroundColor',\n        'headerFontSize',\n        'headerFontColor',\n        'headerBackgroundColor',\n        'hoverHeaderBackgroundColor',\n        'hoverHeaderInlineBackgroundColor',\n        'selectedBorderColor',\n        'selectedBackgroundColor'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst foldMeasures = (dataset, measures, options)=>{\n    const { measureId, measureName, measureValue, colorMeasureId } = options || {};\n    const foldInfo = {\n        measureId,\n        measureName,\n        measureValue,\n        colorRange: [\n            0,\n            1\n        ],\n        measureRange: [\n            0,\n            1\n        ],\n        foldMap: {}\n    };\n    const result = new Array(dataset.length * measures.length);\n    let index = 0;\n    const ids = measures.map((d)=>d.id);\n    for(let i = 0; i < dataset.length; i++)for(let j = 0; j < measures.length; j++){\n        const datum = omit({\n            ...dataset[i]\n        }, ids);\n        datum[ORIGINAL_DATA] = dataset[i];\n        const measure = measures[j];\n        const { id, alias } = measure;\n        datum[id] = dataset[i][id];\n        datum[measureId] = id;\n        datum[measureName] = alias || id;\n        datum[measureValue] = dataset[i][id];\n        if (colorMeasureId) {\n            const value = datum[ORIGINAL_DATA][colorMeasureId];\n            datum[ColorEncoding] = value;\n            datum[ColorIdEncoding] = colorMeasureId;\n            foldInfo.colorRange = [\n                Math.min(foldInfo.colorRange[0] || 1 / 0, Number(value)),\n                Math.max(foldInfo.colorRange[1] || -1 / 0, Number(value))\n            ];\n        }\n        foldInfo.measureRange = [\n            Math.min(foldInfo.measureRange[0] || 1 / 0, Number(datum[id])),\n            Math.max(foldInfo.measureRange[1] || -1 / 0, Number(datum[id]))\n        ];\n        foldInfo.foldMap[id] = alias;\n        result[index++] = datum;\n    }\n    return {\n        dataset: result,\n        foldInfo\n    };\n};\nconst reshapePivotTable = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset, chartType } = vseed;\n    const { dimensions, measures } = advancedVSeed;\n    const { dataset: newDatasets, foldInfo } = foldMeasures(dataset, findAllMeasures(measures), {\n        measureId: FoldMeasureId,\n        measureName: FoldMeasureName,\n        measureValue: FoldMeasureValue\n    });\n    const datasetReshapeInfo = [\n        {\n            id: String(chartType),\n            index: 0,\n            foldInfo\n        }\n    ];\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: datasetReshapeInfo,\n        dimensions,\n        measures\n    };\n};\nconst pivotTableAdvancedPipeline = [\n    initAdvancedVSeed,\n    autoPivotMeasures,\n    autoPivotDimensions,\n    reshapePivotTable,\n    pivotTableConfig,\n    theme_theme\n];\nconst initPivotTable = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { dataset } = advancedVSeed;\n    const { config } = advancedVSeed;\n    const { backgroundColor = 'transparent' } = config.pivotTable || {};\n    return {\n        ...spec,\n        records: dataset,\n        widthMode: 'standard',\n        heightMode: 'autoHeight',\n        autoWrapText: true,\n        columnResizeMode: 'all',\n        columnResizeType: 'column',\n        showColumnHeader: true,\n        showRowHeader: true,\n        select: {\n            highlightMode: 'cell',\n            headerSelectMode: 'inline'\n        },\n        hover: {\n            highlightMode: 'cross'\n        },\n        tooltip: {\n            isShowOverflowTextTooltip: true\n        },\n        corner: {\n            titleOnDimension: 'all'\n        },\n        widthAdaptiveMode: 'all',\n        animationAppear: {\n            duration: 300,\n            delay: 250,\n            type: 'one-by-one',\n            direction: 'row'\n        },\n        theme: {\n            underlayBackgroundColor: backgroundColor\n        }\n    };\n};\nconst pivotColumns = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    const columns = dimensions.filter((item)=>'columnDimension' === item['location'] || 'column' === item['encoding']);\n    return {\n        ...spec,\n        columns: columns.map((item)=>({\n                dimensionKey: item.id,\n                title: item.alias || item.id,\n                width: 'auto'\n            }))\n    };\n};\nconst pivotRows = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    const rows = dimensions.filter((item)=>'rowDimension' === item['location'] || 'row' === item['encoding']);\n    return {\n        ...spec,\n        rows: rows.map((item)=>({\n                dimensionKey: item.id,\n                title: item.alias || item.id,\n                width: 'auto'\n            }))\n    };\n};\nconst pivotIndicators = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { locale, measures, datasetReshapeInfo } = advancedVSeed;\n    const { foldInfo } = datasetReshapeInfo[0];\n    return {\n        ...spec,\n        indicatorsAsCol: true,\n        indicatorTitle: intl.i18n`指标名称`,\n        hideIndicatorName: true,\n        indicators: [\n            {\n                cellType: 'text',\n                indicatorKey: foldInfo.measureValue,\n                title: 'indicator',\n                width: 'auto',\n                format: pivotIndicators_fieldFormat(measures, foldInfo, locale)\n            }\n        ]\n    };\n};\nconst pivotIndicators_fieldFormat = (measures, foldInfo, locale)=>(value, col, row, table)=>{\n        if (!isNumber(col) || !isNumber(row) || !table) return value;\n        const datum = table.getCellOriginRecord(col, row);\n        const { measureId: foldMeasureId } = foldInfo;\n        const measureId = datum[0][foldMeasureId];\n        const node = findMeasureById(measures, measureId);\n        if (!node) return value;\n        const { format = {}, autoFormat = true } = node;\n        if (!external_remeda_isEmpty(format)) {\n            const formatter = createFormatter(format);\n            return formatter(value);\n        }\n        if (autoFormat) return autoFormatter(value, locale);\n    };\nconst rowHeaderStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { config, chartType } = advancedVSeed;\n    const themConfig = config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.borderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themConfig.headerBackgroundColor || '#EEF1F5';\n    const fontColor = themConfig.headerFontColor || '#1B1F23';\n    const fontSize = themConfig.headerFontSize || 12;\n    const hoverCellBgColor = themConfig.hoverHeaderBackgroundColor || '#bedaff';\n    const hoverInlineColor = themConfig.hoverHeaderInlineBackgroundColor || '#bedaff';\n    result.theme.rowHeaderStyle = {\n        borderColor: borderColor,\n        borderLineWidth: 1,\n        padding: [\n            8.6,\n            12,\n            8.6,\n            12\n        ],\n        textAlign: 'left',\n        hover: {\n            cellBgColor: hoverCellBgColor,\n            inlineRowBgColor: hoverInlineColor,\n            inlineColumnBgColor: hoverInlineColor\n        },\n        frameStyle: {\n            borderColor: [\n                null,\n                borderColor,\n                null,\n                null\n            ],\n            borderLineWidth: 1\n        },\n        fontSize: fontSize,\n        fontVariant: 'normal',\n        fontStyle: 'normal',\n        fontWeight: 'bold',\n        color: fontColor,\n        bgColor: backgroundColor,\n        lineHeight: 1.5 * fontSize\n    };\n    return result;\n};\nconst cornerHeaderStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { config, chartType } = advancedVSeed;\n    const themConfig = config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.borderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themConfig.headerBackgroundColor || '#EEF1F5';\n    const fontColor = themConfig.headerFontColor || '#1B1F23';\n    const fontSize = themConfig.headerFontSize || 12;\n    const hoverInlineColor = themConfig.hoverHeaderInlineBackgroundColor;\n    const hoverCellColor = themConfig.hoverHeaderBackgroundColor;\n    result.theme.cornerHeaderStyle = {\n        borderColor: [\n            borderColor,\n            borderColor\n        ],\n        borderLineWidth: 1,\n        padding: [\n            8,\n            12,\n            8,\n            12\n        ],\n        textAlign: 'left',\n        hover: {\n            cellBgColor: hoverCellColor || void 0,\n            inlineRowBgColor: hoverInlineColor || void 0,\n            inlineColumnBgColor: hoverInlineColor || void 0\n        },\n        frameStyle: {\n            borderColor: [\n                null,\n                borderColor,\n                borderColor,\n                null\n            ],\n            borderLineWidth: 1\n        },\n        fontSize: fontSize,\n        fontVariant: 'normal',\n        fontStyle: 'normal',\n        fontWeight: 'bold',\n        color: fontColor,\n        bgColor: backgroundColor,\n        lineHeight: 1.5 * fontSize\n    };\n    return result;\n};\nvar new_data_set_AggregationType;\n!function(AggregationType) {\n    AggregationType.RECORD = \"RECORD\", AggregationType.NONE = \"NONE\", AggregationType.SUM = \"SUM\", AggregationType.MIN = \"MIN\", AggregationType.MAX = \"MAX\", AggregationType.AVG = \"AVG\", AggregationType.COUNT = \"COUNT\", AggregationType.CUSTOM = \"CUSTOM\", AggregationType.RECALCULATE = \"RECALCULATE\";\n}(new_data_set_AggregationType || (new_data_set_AggregationType = {}));\nvar new_data_set_SortType;\n!function(SortType) {\n    SortType.ASC = \"ASC\", SortType.DESC = \"DESC\", SortType.NORMAL = \"NORMAL\", SortType.desc = \"desc\", SortType.asc = \"asc\", SortType.normal = \"normal\";\n}(new_data_set_SortType || (new_data_set_SortType = {}));\nconst dataConfig = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const measures = findAllMeasures(advancedVSeed.measures);\n    const aggregationRules = measures.map((measure)=>({\n            field: measure.id,\n            aggregationType: new_data_set_AggregationType.NONE,\n            indicatorKey: measure.id\n        }));\n    return {\n        ...spec,\n        dataConfig: {\n            aggregationRules\n        }\n    };\n};\nconst pivotTableSpecPipeline = [\n    initPivotTable,\n    pivotColumns,\n    pivotRows,\n    pivotIndicators,\n    bodyStyle,\n    headerStyle,\n    rowHeaderStyle,\n    cornerHeaderStyle,\n    frameStyle,\n    selectionStyle,\n    dataConfig\n];\nconst registerPivotTable = ()=>{\n    Builder._advancedPipelineMap.pivotTable = pivotTableAdvancedPipeline;\n    Builder._specPipelineMap.pivotTable = pivotTableSpecPipeline;\n};\nconst initAdvancedVSeed_initAdvancedVSeed = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType, locale } = vseed;\n    return {\n        ...advancedVSeed,\n        chartType,\n        locale: locale || 'zh-CN'\n    };\n};\nconst defaultMeasures_defaultMeasures = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { measures, dataset } = vseed;\n    if (measures && measures.length > 0) return {\n        ...advancedVSeed,\n        measures\n    };\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return {\n        ...advancedVSeed,\n        measures: []\n    };\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    const defaultMeasures = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'number' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key)).map((measure)=>({\n            id: measure,\n            alias: measure\n        }));\n    return {\n        ...advancedVSeed,\n        measures: defaultMeasures\n    };\n};\nconst defaultDimensions = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dimensions, dataset } = vseed;\n    if (dimensions && dimensions.length > 0) return {\n        ...result,\n        dimensions\n    };\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    const measures = findAllMeasures(advancedVSeed.measures);\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    const newDimensions = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'string' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key) && !measures.some((measure)=>measure.id === key)).map((dim)=>({\n            id: dim,\n            alias: dim\n        }));\n    return {\n        ...result,\n        dimensions: newDimensions\n    };\n};\nconst defaultMeasureName = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const MeaName = {\n        id: MeasureName,\n        alias: intl.i18n`指标名称`\n    };\n    if (!result.dimensions?.some((dim)=>dim.id === MeasureName)) result.dimensions?.push(MeaName);\n    return result;\n};\nconst encodingForLine = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) generateDimensionEncoding(dimensions, encoding);\n    else generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) generateMeasureEncoding(measures, encoding);\n    else generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.x = uniqueDimIds.slice(0, 1);\n    encoding.color = uniqueDimIds.slice(1);\n    encoding.tooltip = uniqueDimIds;\n    encoding.detail = [];\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.x = unique(dimensions.filter((item)=>'xAxis' === item.encoding).map((item)=>item.id));\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.x.length) encoding.x = [\n        dimensions[0].id\n    ];\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n};\nconst generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.y = unique(measures.filter((item)=>'yAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.y = unique(measures.filter((item)=>'yAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n};\nconst isMeasureTreeWithChildren = (vseed)=>{\n    const { measures } = vseed;\n    if (!measures) return false;\n    return measures.some((measure)=>'children' in measure);\n};\nconst isMeasureTreeWithParentId = (vseed)=>{\n    const { measures } = vseed;\n    if (!measures) return false;\n    return measures.some((measure)=>'parentId' in measure);\n};\nconst measureDepth = (measures = [])=>{\n    if (!measures) return 0;\n    let depth = 1;\n    preorderTraverse(measures, (node)=>{\n        if ('children' in node) depth = Math.max(depth, 1 + measureDepth(node.children));\n        return false;\n    });\n    return depth;\n};\nconst isTable = (vseed)=>'table' === vseed.chartType;\nconst isPivotTable = (vseed)=>'pivotTable' === vseed.chartType;\nconst isVTable = (vseed)=>[\n        'table',\n        'pivotTable'\n    ].includes(vseed.chartType);\nconst isVChart = (vseed)=>!isVTable(vseed);\nconst isPivotChart = (vseed)=>{\n    if (isVTable(vseed)) return false;\n    if (isMeasureTreeWithParentId(vseed)) {\n        const parentIds = vseed.measures?.map((measure)=>measure.parentId);\n        return parentIds && unique(parentIds).length > 1;\n    }\n    if ('dualAxis' === vseed.chartType || 'scatter' === vseed.chartType) {\n        const { dimensions = [] } = vseed;\n        const hasRowOrColumnDimension = dimensions && dimensions.some((dimension)=>'rowDimension' === dimension.location || 'columnDimension' === dimension.location);\n        if (hasRowOrColumnDimension) return true;\n        if ('scatter' === vseed.chartType) {\n            if (isMeasureTreeWithChildren(vseed)) {\n                const depth = measureDepth(vseed.measures);\n                return 3 === depth;\n            }\n            if (vseed.scatterMeasures && vseed.scatterMeasures.length > 1) return true;\n            return false;\n        }\n        if ('dualAxis' === vseed.chartType) {\n            if (isMeasureTreeWithChildren(vseed)) {\n                const depth = measureDepth(vseed.measures);\n                return 3 === depth;\n            }\n            if (vseed.dualMeasures && vseed.dualMeasures.length > 1) return true;\n        }\n        return false;\n    }\n    const { measures = [], dimensions = [] } = vseed;\n    const hasRowOrColumnDimension = dimensions && dimensions.some((dimension)=>'rowDimension' === dimension.location || 'columnDimension' === dimension.location);\n    const hasMeasureGroup = measures && measures.some((measure)=>measure && measure.children);\n    return hasRowOrColumnDimension || hasMeasureGroup;\n};\nconst buildMeasures = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    if (isMeasureTreeWithChildren(vseed)) {\n        advancedVSeed.measures = vseed.measures;\n        return advancedVSeed;\n    }\n    if (isMeasureTreeWithParentId(vseed)) {\n        advancedVSeed.measures = generateMeasuresByParentId(vseed.measures);\n        return advancedVSeed;\n    }\n    if (isPivotChart(vseed)) advancedVSeed.measures = basicMeasuresToMeasureTree(advancedVSeed.measures);\n    return advancedVSeed;\n};\nconst generateMeasuresByParentId = (measures)=>{\n    const measureTree = [];\n    measures.forEach((measure)=>{\n        if (!measure.parentId) return;\n        const parent = measureTree.find((item)=>item.id === measure.parentId);\n        if (parent && 'children' in parent) {\n            parent.children = parent.children || [];\n            parent.children.push(measure);\n        } else measureTree.push({\n            id: measure.parentId,\n            children: [\n                measure\n            ]\n        });\n    });\n    return measureTree;\n};\nconst basicMeasuresToMeasureTree = (measures)=>{\n    const id = measures.map((item)=>item.id).join('-');\n    const alias = measures.map((item)=>item.alias || item.id).join('-');\n    return [\n        {\n            id,\n            alias,\n            children: measures\n        }\n    ];\n};\nconst pivotAdapter = (pipeline, pivotPipeline)=>(advancedVSeed, context)=>{\n        const { vseed } = context;\n        const usePivotChart = isPivotChart(vseed);\n        if (usePivotChart) return execPipeline(pivotPipeline, context, advancedVSeed);\n        return execPipeline(pipeline, context, advancedVSeed);\n    };\nconst unfoldDimensions = (dataset, dimensions, encoding, options)=>{\n    const { foldMeasureId, separator, colorItemAsId } = options;\n    const unfoldInfo = {\n        encodingAngle: AngleEncoding,\n        encodingX: XEncoding,\n        encodingY: YEncoding,\n        encodingDetail: DetailEncoding,\n        encodingColor: ColorEncoding,\n        encodingColorId: ColorIdEncoding,\n        colorItems: [],\n        colorIdMap: {}\n    };\n    const { color, x, y, detail, angle } = encoding;\n    const angleDimensions = angle ? dimensions.filter((dim)=>angle.includes(dim.id)) : [];\n    const xDimensions = x ? dimensions.filter((dim)=>x.includes(dim.id)) : [];\n    const yDimensions = y ? dimensions.filter((dim)=>y.includes(dim.id)) : [];\n    const colorDimensions = color ? dimensions.filter((dim)=>color.includes(dim.id)) : [];\n    const detailDimensions = detail ? dimensions.filter((dim)=>detail.includes(dim.id)) : [];\n    const colorItems = new Set();\n    const colorIdMap = {};\n    for(let i = 0; i < dataset.length; i++){\n        const datum = dataset[i];\n        applyEncoding(AngleEncoding, angleDimensions, datum, separator);\n        applyEncoding(XEncoding, xDimensions, datum, separator);\n        applyEncoding(YEncoding, yDimensions, datum, separator);\n        applyEncoding(ColorEncoding, colorDimensions, datum, separator);\n        applyEncoding(DetailEncoding, detailDimensions, datum, separator);\n        if (!colorDimensions.length || !datum[ColorEncoding]) continue;\n        const measureId = String(datum[foldMeasureId]);\n        const colorItem = String(datum[ColorEncoding]);\n        const colorId = colorItemAsId ? colorItem : measureId ? [\n            colorItem,\n            measureId\n        ].join(separator) : colorItem;\n        datum[ColorIdEncoding] = colorId;\n        colorIdMap[colorId] = colorItem;\n        colorItems.add(colorId);\n    }\n    unfoldInfo.colorItems = Array.from(colorItems);\n    unfoldInfo.colorIdMap = colorIdMap;\n    return {\n        dataset,\n        unfoldInfo\n    };\n};\nconst applyEncoding = (encoding, dimensions, datum, separator)=>{\n    if (encoding && dimensions.length) datum[encoding] = dimensions.map((dim)=>String(datum[dim.id])).join(separator);\n};\nconst dataReshapeByEncoding = (dataset, dimensions, measures, encoding, options)=>{\n    const { foldMeasureId = FoldMeasureId, foldMeasureName = FoldMeasureName, foldMeasureValue = FoldMeasureValue, colorItemAsId = false, colorMeasureId } = options || {};\n    const { dataset: foldedDataset, foldInfo } = foldMeasures(dataset, measures, {\n        measureId: foldMeasureId,\n        measureName: foldMeasureName,\n        measureValue: foldMeasureValue,\n        colorMeasureId\n    });\n    const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(foldedDataset, dimensions, encoding, {\n        foldMeasureId,\n        separator: Separator,\n        colorItemAsId\n    });\n    return {\n        dataset: finalDataset,\n        foldInfo,\n        unfoldInfo\n    };\n};\nconst colorAdapter = (ordinalPipe, linearPipe)=>(spec, context)=>{\n        const { advancedVSeed } = context;\n        if (isLinearColor(advancedVSeed)) return linearPipe(spec, context);\n        return ordinalPipe(spec, context);\n    };\nconst isLinearColor = (advancedVSeed)=>{\n    const { encoding, measures } = advancedVSeed;\n    const measureIdList = findAllMeasures(measures).map((measure)=>measure.id);\n    const { color } = encoding;\n    return color?.length === 1 && measureIdList.includes(color[0]);\n};\nconst getColorMeasureId = (advancedVSeed)=>{\n    if (isLinearColor(advancedVSeed)) {\n        const { encoding } = advancedVSeed;\n        const { color } = encoding;\n        return color?.[0];\n    }\n};\nconst reshapeWithEncoding = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset, chartType } = vseed;\n    const { dimensions, measures, encoding } = advancedVSeed;\n    if (!measures || !dimensions || !dataset || !encoding) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    const hasEncoding = (vseed.dimensions || []).some((item)=>item.encoding);\n    const { dataset: newDatasets, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, uniqueBy(dimensions, (item)=>item.id), uniqueBy(findAllMeasures(measures), (item)=>item.id), encoding, {\n        colorItemAsId: hasEncoding,\n        colorMeasureId: getColorMeasureId(advancedVSeed)\n    });\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: [\n            {\n                id: String(chartType),\n                index: 0,\n                foldInfo,\n                unfoldInfo\n            }\n        ],\n        dimensions,\n        measures\n    };\n};\nconst pivotReshapeWithEncoding = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures, encoding } = advancedVSeed;\n    if (!measures || !dimensions || !dataset || !encoding) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    const measureGroups = [];\n    if (measures) measures.forEach((measure)=>{\n        if (measure.children && measure.children.length > 0) measureGroups.push(measure);\n    });\n    const hasEncoding = (vseed.dimensions || []).some((item)=>item.encoding);\n    const datasets = [];\n    const datasetReshapeInfo = [];\n    measureGroups.forEach((measureGroup, index)=>{\n        const measures = measureGroup.children;\n        if (!measures) return;\n        const groupId = measureGroup.id;\n        const { dataset: newSubDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, uniqueBy(dimensions, (item)=>item.id), uniqueBy(measures, (item)=>item.id), encoding, {\n            colorItemAsId: hasEncoding,\n            foldMeasureValue: `${FoldMeasureValue}${groupId}`,\n            colorMeasureId: getColorMeasureId(advancedVSeed)\n        });\n        const reshapeInfo = {\n            id: groupId,\n            index,\n            foldInfo,\n            unfoldInfo\n        };\n        datasets.push(newSubDataset);\n        datasetReshapeInfo.push(reshapeInfo);\n    });\n    return {\n        ...result,\n        dataset: datasets,\n        datasetReshapeInfo: datasetReshapeInfo\n    };\n};\nconst sortXBandAxis = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { sort: sortAxis } = vseed;\n    const { datasetReshapeInfo, dataset } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const xField = unfoldInfo.encodingX;\n    if (!sortAxis || !xField) return advancedVSeed;\n    if (!result.analysis) result.analysis = {};\n    if (!result.analysis.orderMapping) result.analysis.orderMapping = {};\n    const axisOrderResult = calcOrder(sortAxis, xField, dataset.flat(2));\n    result.analysis.orderMapping[xField] = axisOrderResult;\n    return result;\n};\nconst calcOrder = (sortConfig, id, dataset)=>{\n    if (sortConfig.customOrder) return sortConfig.customOrder;\n    const order = sortConfig.order || 'asc';\n    const orderBy = sortConfig.orderBy;\n    const res = sort(dataset, (a, b)=>{\n        const aValue = a[orderBy || id];\n        const bValue = b[orderBy || id];\n        if ('asc' === order) {\n            if (aValue < bValue) return -1;\n            if (aValue > bValue) return 1;\n            return 0;\n        }\n        if (aValue > bValue) return -1;\n        if (aValue < bValue) return 1;\n        return 0;\n    });\n    return unique(res.map((item)=>item[id]));\n};\nconst sortLegend_sortLegend = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { sortLegend } = vseed;\n    const { datasetReshapeInfo, dataset } = advancedVSeed;\n    const colorId = datasetReshapeInfo?.[0]?.unfoldInfo?.encodingColorId;\n    const colorIdMap = datasetReshapeInfo?.[0]?.unfoldInfo?.colorIdMap;\n    const colorItems = datasetReshapeInfo?.[0]?.unfoldInfo?.colorItems;\n    if (!sortLegend || !colorId || !colorIdMap || !colorItems) return advancedVSeed;\n    if (!result.analysis) result.analysis = {};\n    if (!result.analysis.orderMapping) result.analysis.orderMapping = {};\n    if (sortLegend.customOrder) {\n        const nameMap = Object.keys(colorIdMap).reduce((pre, cur)=>{\n            pre[colorIdMap[cur]] = cur;\n            return pre;\n        }, {});\n        const orderRes = sortLegend.customOrder.map((itemNameOrId)=>nameMap[itemNameOrId] ? nameMap[itemNameOrId] : itemNameOrId);\n        result.analysis.orderMapping[colorId] = orderRes;\n        return result;\n    }\n    const orderRes = sortLegend_calcOrder(sortLegend, colorId, dataset?.flat(2) || []);\n    result.analysis.orderMapping[colorId] = orderRes;\n    return result;\n};\nconst sortLegend_calcOrder = (sortConfig, id, dataset)=>{\n    if (sortConfig.customOrder) return sortConfig.customOrder;\n    const order = sortConfig.order || 'asc';\n    const orderBy = sortConfig.orderBy;\n    const res = sort(dataset, (a, b)=>{\n        const aValue = a[orderBy || id];\n        const bValue = b[orderBy || id];\n        if ('asc' === order) {\n            if (aValue < bValue) return -1;\n            if (aValue > bValue) return 1;\n            return 0;\n        }\n        if (aValue > bValue) return -1;\n        if (aValue < bValue) return 1;\n        return 0;\n    });\n    return unique(res.map((item)=>item[id]));\n};\nconst lineConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'color',\n        'label',\n        'legend',\n        'tooltip',\n        'xAxis',\n        'yAxis',\n        'crosshairLine'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst columnConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'color',\n        'label',\n        'legend',\n        'tooltip',\n        'xAxis',\n        'yAxis',\n        'crosshairRect',\n        'stackCornerRadius'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst pieConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'color',\n        'label',\n        'legend',\n        'tooltip'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst areaConfig = lineConfig;\nconst areaPercentConfig = lineConfig;\nconst scatterConfig = lineConfig;\nconst barConfig = columnConfig;\nconst barParallelConfig = columnConfig;\nconst barPercentConfig = columnConfig;\nconst columnParallelConfig = columnConfig;\nconst columnPercentConfig = columnConfig;\nconst donutConfig = pieConfig;\nconst roseConfig = pieConfig;\nconst roseParallelConfig = pieConfig;\nconst funnelConfig = pieConfig;\nconst heatmapConfig = pieConfig;\nconst radarConfig = pieConfig;\nconst markStyle_markStyle = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const markStyle = pick(vseed, [\n        'barStyle',\n        'pointStyle',\n        'lineStyle',\n        'areaStyle'\n    ]);\n    return {\n        ...advancedVSeed,\n        markStyle\n    };\n};\nconst annotation_annotation = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const annotation = pick(vseed, [\n        'annotationPoint',\n        'annotationHorizontalLine',\n        'annotationVerticalLine',\n        'annotationArea'\n    ]);\n    return {\n        ...advancedVSeed,\n        annotation\n    };\n};\nconst lineAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForLine,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortXBandAxis,\n    sortLegend_sortLegend,\n    lineConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initLine = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { foldInfo, unfoldInfo } = datasetReshapeInfo[0];\n    result.type = 'line';\n    result.direction = 'vertical';\n    result.xField = unfoldInfo.encodingX;\n    result.yField = foldInfo.measureValue;\n    result.seriesField = isLinearColor(advancedVSeed) ? unfoldInfo.encodingDetail : unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst color_color = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, chartType } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.color) return result;\n    const colorItems = unfoldInfo.colorItems;\n    const colorIdMap = unfoldInfo.colorIdMap;\n    const { color } = baseConfig;\n    const { colorScheme, colorMapping } = color;\n    result.color = {\n        type: 'ordinal',\n        domain: colorItems,\n        range: colorScheme,\n        specified: createSpecifiedForColorMapping(colorMapping, colorIdMap, colorItems)\n    };\n    return result;\n};\nconst createSpecifiedForColorMapping = (colorMapping, colorIdMap, colorItems)=>{\n    if (!colorMapping || !colorIdMap || !colorItems) return;\n    const matchedList = [];\n    const colors = Object.entries(colorMapping).sort((a, b)=>b[0].length - a[0].length);\n    const accurateMap = colors.reduce((prev, cur)=>{\n        const name = cur[0];\n        const colorValue = cur[1];\n        const accurateMatchedList = Object.entries(colorIdMap).filter(([colorKey, colorAlias])=>colorKey === name || colorAlias === name);\n        accurateMatchedList.forEach((item)=>{\n            prev[item[0]] = colorValue;\n            matchedList.push(name);\n        });\n        return prev;\n    }, {});\n    const fuzzyMap = colors.reduce((prev, cur)=>{\n        const name = cur[0];\n        const colorValue = cur[1];\n        if (matchedList.includes(name)) return prev;\n        const fuzzyMatchedList = Object.entries(colorIdMap).filter(([colorKey, colorAlias])=>colorKey.includes(name) || colorAlias.includes(name));\n        fuzzyMatchedList.forEach((item)=>{\n            if (prev[item[0]]) return;\n            prev[item[0]] = colorValue;\n        });\n        return prev;\n    }, {});\n    return {\n        ...fuzzyMap,\n        ...accurateMap\n    };\n};\nconst linearColor = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, chartType } = advancedVSeed;\n    const { unfoldInfo, id } = datasetReshapeInfo[0];\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.color) return result;\n    const { color } = baseConfig;\n    const { colorScheme, linearColorScheme } = color;\n    result.color = {\n        type: 'linear',\n        range: linearColorScheme || colorScheme || [],\n        domain: [\n            {\n                dataId: id,\n                fields: [\n                    unfoldInfo.encodingColor\n                ]\n            }\n        ]\n    };\n    return result;\n};\nconst background_backgroundColor = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    const { backgroundColor } = baseConfig;\n    return {\n        ...result,\n        background: backgroundColor\n    };\n};\nconst datasetXY = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { analysis, datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const orderMapping = analysis?.orderMapping || {};\n    const angle = unfoldInfo.encodingAngle;\n    const x = unfoldInfo.encodingX;\n    const colorId = unfoldInfo.encodingColorId;\n    const id = datasetReshapeInfo[0].id;\n    const fields = {};\n    if (angle) fields[angle] = {\n        sortIndex: 0\n    };\n    if (x) {\n        const order = orderMapping[x];\n        if (order) fields[x] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[x] = {\n            sortIndex: 0\n        };\n    }\n    if (colorId) {\n        const order = orderMapping[colorId];\n        if (order) fields[colorId] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[colorId] = {\n            sortIndex: 0\n        };\n    }\n    return {\n        ...spec,\n        data: {\n            id,\n            values: isPivotChart(vseed) ? void 0 : advancedVSeed.dataset,\n            fields: fields\n        }\n    };\n};\nconst progressive = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dataset = [] } = advancedVSeed;\n    const size = dataset.length;\n    if (size < 5000) return result;\n    result.large = true;\n    result.largeThreshold = 5000;\n    result.progressiveStep = 400;\n    result.progressiveThreshold = 8000;\n    return result;\n};\nconst xBand = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.xAxis;\n    if (!result.axes) result.axes = [];\n    if (!config) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                type: 'band',\n                orient: 'bottom'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, labelAutoHide, labelAutoHideGap, labelAutoLimit, labelAutoLimitLength = 80, labelAutoRotate, labelAutoRotateAngleRange } = config;\n    const sampling = !(labelAutoHide || labelAutoRotate || labelAutoLimit);\n    const bandAxis = {\n        visible,\n        type: 'band',\n        orient: 'bottom',\n        maxHeight: labelAutoLimitLength + 60,\n        sampling,\n        hover: true,\n        label: {\n            visible: label?.visible,\n            flush: true,\n            space: 8,\n            style: {\n                maxLineWidth: labelAutoLimitLength,\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            },\n            minGap: labelAutoHideGap,\n            autoHide: labelAutoHide,\n            autoHideMethod: 'greedy',\n            autoHideSeparation: labelAutoHideGap,\n            autoLimit: labelAutoLimit,\n            autoRotate: labelAutoRotate,\n            autoRotateAngle: labelAutoRotateAngleRange,\n            lastVisible: true\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        paddingInner: [\n            0.15,\n            0.1\n        ],\n        paddingOuter: [\n            0.075,\n            0.1\n        ]\n    };\n    result.axes = [\n        ...result.axes,\n        bandAxis\n    ];\n    return result;\n};\nconst ANNOTATION_Z_INDEX = 1000;\nconst LINEAR_AXIS_INNER_OFFSET_TOP = 7;\nconst DUAL_AXIS_CHART_COLUMN_Z_INDEX = 1000;\nconst DUAL_AXIS_CHART_NON_COLUMN_Z_INDEX = 1001;\nconst yLinear = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const { locale } = advancedVSeed;\n    const config = advancedVSeed.config?.[chartType]?.yAxis;\n    if (!result.axes) result.axes = [];\n    if (!config) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                type: 'linear',\n                orient: 'left'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, zero, nice, inverse, max, min, log, logBase = 10 } = config;\n    const linearAxis = {\n        visible,\n        type: log ? 'log' : 'linear',\n        base: logBase,\n        orient: 'left',\n        nice,\n        zero: log ? false : zero,\n        inverse,\n        max,\n        min,\n        label: {\n            visible: label?.visible,\n            formatMethod: (value)=>autoFormatter(value, locale),\n            style: {\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            }\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        innerOffset: {\n            top: LINEAR_AXIS_INNER_OFFSET_TOP\n        }\n    };\n    result.axes = [\n        ...result.axes,\n        linearAxis\n    ];\n    return result;\n};\nconst verticalCrosshairLine = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.crosshairLine;\n    if (!config) return result;\n    if (!result.crosshair) result.crosshair = {};\n    const visible = config.visible || true;\n    const lineColor = config.lineColor || void 0;\n    const labelColor = config.labelColor || void 0;\n    const labelVisible = config.labelVisible || void 0;\n    const labelBackgroundColor = config.labelBackgroundColor || void 0;\n    const crosshair = result.crosshair;\n    crosshair.xField = {\n        visible,\n        line: {\n            type: 'line',\n            style: {\n                lineWidth: 1,\n                opacity: 1,\n                stroke: lineColor,\n                lineDash: [\n                    4,\n                    2\n                ]\n            }\n        },\n        label: {\n            visible: labelVisible,\n            labelBackground: {\n                visible: labelVisible,\n                style: {\n                    fill: labelBackgroundColor\n                }\n            },\n            style: {\n                fill: labelColor\n            }\n        }\n    };\n    return result;\n};\nconst discreteLegend = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, chartType } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.legend) return result;\n    const { legend } = baseConfig;\n    const { enable, position = 'bottom', labelFontColor, labelFontSize = 12, labelFontWeight, maxSize = 1, border, shapeType = 'rectRound' } = legend || {};\n    const orient = [\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ].includes(position) ? 'bottom' : [\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr'\n    ].includes(position) ? 'top' : [\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb'\n    ].includes(position) ? 'left' : 'right';\n    const legendPosition = [\n        'topLeft',\n        'bottomLeft',\n        'leftTop',\n        'rightTop',\n        'lt',\n        'rt',\n        'tl',\n        'bl'\n    ].includes(position) ? 'start' : [\n        'topRight',\n        'bottomRight',\n        'leftBottom',\n        'rightBottom',\n        'lb',\n        'rb',\n        'rt',\n        'br'\n    ].includes(position) ? 'end' : 'middle';\n    result.legends = {\n        type: 'discrete',\n        visible: enable,\n        maxCol: Math.max(1, maxSize),\n        maxRow: Math.max(1, maxSize),\n        autoPage: true,\n        orient,\n        position: legendPosition,\n        data: border ? (items)=>items.map((item)=>{\n                item.shape.outerBorder = {\n                    stroke: item.shape.fill,\n                    distance: 3,\n                    lineWidth: 1\n                };\n                return item;\n            }) : void 0,\n        item: {\n            focus: true,\n            maxWidth: '30%',\n            focusIconStyle: {\n                size: labelFontSize + 2,\n                fill: labelFontColor,\n                fontWeight: labelFontWeight\n            },\n            shape: {\n                space: border ? 6 : 4,\n                style: {\n                    symbolType: shapeType,\n                    size: border ? 8 : 10\n                }\n            },\n            label: {\n                formatMethod: (value)=>unfoldInfo.colorIdMap[String(value)] ?? value,\n                style: {\n                    fontSize: labelFontSize,\n                    fill: labelFontColor,\n                    fontWeight: labelFontWeight\n                }\n            },\n            background: {\n                state: {\n                    selectedHover: {\n                        fill: labelFontColor,\n                        fillOpacity: 0.05\n                    }\n                }\n            }\n        },\n        padding: 0\n    };\n    return result;\n};\nconst colorLegend = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, chartType } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.legend) return result;\n    const { legend } = baseConfig;\n    const { enable, position = 'bottom', labelFontColor, labelFontSize = 12, labelFontWeight } = legend || {};\n    const orient = [\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ].includes(position) ? 'bottom' : [\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr'\n    ].includes(position) ? 'top' : [\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb'\n    ].includes(position) ? 'left' : 'right';\n    const legendPosition = [\n        'topLeft',\n        'bottomLeft',\n        'leftTop',\n        'rightTop',\n        'lt',\n        'rt',\n        'tl',\n        'bl'\n    ].includes(position) ? 'start' : [\n        'topRight',\n        'bottomRight',\n        'leftBottom',\n        'rightBottom',\n        'lb',\n        'rb',\n        'rt',\n        'br'\n    ].includes(position) ? 'end' : 'middle';\n    result.legends = {\n        type: 'color',\n        visible: enable,\n        orient,\n        position: legendPosition,\n        padding: 0,\n        field: unfoldInfo.encodingColor,\n        maxWidth: '30%',\n        startText: {\n            visible: true,\n            style: {\n                fill: labelFontColor,\n                fontSize: labelFontSize,\n                fontWeight: labelFontWeight\n            }\n        },\n        endText: {\n            visible: true,\n            style: {\n                fill: labelFontColor,\n                fontSize: labelFontSize,\n                fontWeight: labelFontWeight\n            }\n        }\n    };\n    return result;\n};\nconst colorPointStyleFill = (stylePipe)=>(spec, context)=>{\n        const result = stylePipe(spec, context);\n        const { advancedVSeed } = context;\n        const { datasetReshapeInfo } = advancedVSeed;\n        const { unfoldInfo } = datasetReshapeInfo[0];\n        if (isLinearColor(advancedVSeed)) {\n            if (result?.point?.style) result.point.style.fill = {\n                field: unfoldInfo.encodingColor,\n                scale: 'color'\n            };\n        }\n        return result;\n    };\nconst selector_selector = (vchartDatum, selector)=>{\n    if (!selector) return true;\n    const selectorMode = 'And';\n    const vchartKeys = Object.keys(vchartDatum).filter((k)=>k.toLocaleLowerCase().startsWith('__vchart'));\n    const datum = omit(vchartDatum, vchartKeys);\n    const selectors = Array.isArray(selector) ? selector : [\n        selector\n    ];\n    return selectors['And' === selectorMode ? 'every' : 'some']((selector)=>{\n        if (isValueSelector(selector)) {\n            if (Object.values(datum).find((v)=>v === selector)) return true;\n        } else if (isMeasureSelector(selector)) {\n            const op = selector.operator || selector.op;\n            const selectorValueArr = Array.isArray(selector.value) ? selector.value : [\n                selector.value\n            ];\n            switch(op){\n                case '=':\n                case '==':\n                    if (datum[selector.field] === selectorValueArr[0]) return true;\n                    break;\n                case '!=':\n                    if (datum[selector.field] !== selectorValueArr[0]) return true;\n                    break;\n                case '>':\n                    if (datum[selector.field] > selectorValueArr[0]) return true;\n                    break;\n                case '<':\n                    if (datum[selector.field] < selectorValueArr[0]) return true;\n                    break;\n                case '>=':\n                    if (datum[selector.field] >= selectorValueArr[0]) return true;\n                    break;\n                case '<=':\n                    if (datum[selector.field] <= selectorValueArr[0]) return true;\n                    break;\n                case 'between':\n                    if (Array.isArray(selector.value) && datum[selector.field] >= selectorValueArr[0] && datum[selector.field] <= selectorValueArr[1]) return true;\n                    break;\n                default:\n                    break;\n            }\n        } else if (isDimensionSelector(selector)) {\n            const op = selector.operator || selector.op;\n            const selectorValueArr = Array.isArray(selector.value) ? selector.value : [\n                selector.value\n            ];\n            switch(op){\n                case 'in':\n                    if (selectorValueArr.includes(datum[selector.field])) return true;\n                    break;\n                case 'not in':\n                    if (!selectorValueArr.includes(datum[selector.field])) return true;\n                    break;\n                default:\n                    break;\n            }\n        } else if (isPartialDatumSelector(selector)) {\n            if (Object.keys(selector).every((key)=>datum[key] === selector[key])) return true;\n        }\n        return false;\n    });\n};\nconst isValueSelector = (selector)=>'string' == typeof selector || 'number' == typeof selector;\nconst isPartialDatumSelector = (selector)=>'object' == typeof selector && null !== selector;\nconst isMeasureSelector = (selector)=>'object' == typeof selector && null !== selector && 'field' in selector && ('operator' in selector || 'op' in selector) && 'value' in selector && ([\n        '=',\n        '==',\n        '!=',\n        '>',\n        '<',\n        '>=',\n        '<=',\n        'between'\n    ].includes(selector.operator) || [\n        '=',\n        '==',\n        '!=',\n        '>',\n        '<',\n        '>=',\n        '<=',\n        'between'\n    ].includes(selector.op));\nconst isDimensionSelector = (selector)=>'object' == typeof selector && null !== selector && 'field' in selector && ('operator' in selector || 'op' in selector) && 'value' in selector && ([\n        'in',\n        'not in'\n    ].includes(selector.operator) || [\n        'in',\n        'not in'\n    ].includes(selector.op));\nconst pointStyle_pointStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { markStyle } = advancedVSeed;\n    const { pointStyle } = markStyle;\n    const result = {\n        ...spec,\n        point: {\n            style: {}\n        }\n    };\n    if (!pointStyle) return result;\n    const pointStyles = Array.isArray(pointStyle) ? pointStyle : [\n        pointStyle\n    ];\n    const customMap = pointStyles.reduce((result, style, index)=>{\n        const { pointBorderColor, pointBorderStyle, pointBorderWidth = 1, pointColor, pointColorOpacity, pointSize, pointVisible = true } = style;\n        const lineDash = 'dashed' === pointBorderStyle ? [\n            5,\n            2\n        ] : 'dotted' === pointBorderStyle ? [\n            2,\n            5\n        ] : [\n            0,\n            0\n        ];\n        return {\n            ...result,\n            [`custom${index + 1}`]: {\n                level: index + 1,\n                filter: (datum)=>{\n                    if (selector_selector(datum, style.selector)) return true;\n                    return false;\n                },\n                style: {\n                    visible: pointVisible,\n                    size: pointSize,\n                    fill: pointColor,\n                    fillOpacity: pointColorOpacity,\n                    innerBorder: {\n                        stroke: pointBorderColor,\n                        lineWidth: pointBorderWidth,\n                        distance: (pointBorderWidth || 0) / 2,\n                        lineDash: lineDash\n                    }\n                }\n            }\n        };\n    }, {});\n    return {\n        ...result,\n        point: {\n            ...result.point,\n            state: {\n                ...customMap\n            }\n        }\n    };\n};\nconst pointStateDimensionHover = (spec)=>{\n    const point = spec.point || {};\n    const result = {\n        ...spec,\n        point: {\n            ...point,\n            state: {\n                ...point.state || {},\n                dimension_hover: {\n                    scaleX: 1.4,\n                    scaleY: 1.4,\n                    outerBorder: {\n                        lineWidth: 4,\n                        strokeOpacity: 0.25,\n                        distance: 2\n                    }\n                }\n            }\n        }\n    };\n    return result;\n};\nconst pointStateHover = (spec, context)=>{\n    const point = spec.point || {};\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const result = {\n        ...spec,\n        point: {\n            ...point,\n            state: {\n                ...point.state || {},\n                hover: {\n                    scaleX: 1.4,\n                    scaleY: 1.4,\n                    stroke: (datum, context)=>{\n                        const field = unfoldInfo.encodingColorId;\n                        const color = context.seriesColor(datum[field]);\n                        return color;\n                    },\n                    fillOpacity: 0.6,\n                    lineWidth: 1\n                }\n            }\n        }\n    };\n    return result;\n};\nconst colorLineStyleFill = (stylePipe)=>(spec, context)=>{\n        const result = stylePipe(spec, context);\n        const { advancedVSeed } = context;\n        const { datasetReshapeInfo } = advancedVSeed;\n        const { unfoldInfo } = datasetReshapeInfo[0];\n        if (isLinearColor(advancedVSeed)) {\n            if (result?.line?.style) result.line.style.stroke = {\n                field: unfoldInfo.encodingColor,\n                scale: 'color'\n            };\n        }\n        return result;\n    };\nconst lineStyle_lineStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { markStyle, datasetReshapeInfo, dataset } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const { lineStyle } = markStyle;\n    const result = {\n        ...spec,\n        line: {\n            style: {}\n        }\n    };\n    if (!lineStyle) return result;\n    const lineStyles = Array.isArray(lineStyle) ? lineStyle : [\n        lineStyle\n    ];\n    const colorId = unfoldInfo.encodingColorId;\n    const lineGroups = groupBy(dataset, (d)=>d[colorId ?? '']);\n    const customMap = lineStyles.reduce((result, style, index)=>{\n        const { lineColor, lineColorOpacity, lineSmooth, lineStyle, lineWidth = 2, lineVisible = true } = style;\n        const dashSegment = 2 * lineWidth;\n        const dashGap = lineWidth;\n        const lineDash = 'dashed' === lineStyle ? [\n            dashSegment,\n            dashSegment\n        ] : 'dotted' === lineStyle ? [\n            dashGap / 2,\n            2 * dashGap\n        ] : [\n            0,\n            0\n        ];\n        const curveType = lineSmooth ? 'monotone' : 'linear';\n        return {\n            ...result,\n            [`custom${index + 1}`]: {\n                level: index + 1,\n                filter: (datum)=>{\n                    const lineData = lineGroups[datum[colorId ?? '']];\n                    for (const d of lineData)if (selector_selector(d, style.selector)) return true;\n                    return false;\n                },\n                style: {\n                    visible: lineVisible,\n                    curveType: curveType,\n                    strokeOpacity: lineColorOpacity,\n                    stroke: lineColor,\n                    lineWidth: lineWidth,\n                    lineDash: lineDash\n                }\n            }\n        };\n    }, {});\n    return {\n        ...result,\n        line: {\n            ...result.line,\n            state: {\n                ...customMap\n            }\n        }\n    };\n};\nconst label_label = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, locale } = advancedVSeed;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.label) return result;\n    const { measureId, measureValue } = datasetReshapeInfo[0].foldInfo;\n    const { label } = baseConfig;\n    const { enable } = label;\n    result.label = {\n        visible: enable,\n        formatMethod: (value, datum)=>{\n            const result = [];\n            const formatValue = (value)=>{\n                const id = datum[measureId];\n                const measure = findMeasureById(measures, id);\n                if (!measure) return value;\n                const { format = {}, autoFormat = true } = measure;\n                if (!external_remeda_isEmpty(format)) {\n                    const formatter = createFormatter(format);\n                    return formatter(value);\n                }\n                if (autoFormat) return autoFormatter(value, locale);\n                return String(value);\n            };\n            result.push(formatValue(datum[measureValue]));\n            return result.join(' ');\n        }\n    };\n    return result;\n};\nconst tooltip_tooltip = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, chartType, locale, dimensions } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    const { tooltip = {\n        enable: true\n    } } = baseConfig;\n    const { enable } = tooltip;\n    const { measureId, measureValue, measureName } = datasetReshapeInfo[0].foldInfo;\n    const { encodingColor: colorName } = datasetReshapeInfo[0].unfoldInfo;\n    result.tooltip = {\n        visible: enable,\n        mark: {\n            title: {\n                visible: true\n            },\n            content: [\n                ...dimensions.map((item)=>({\n                        visible: true,\n                        hasShape: true,\n                        shapeType: 'rectRound',\n                        key: (datum)=>{\n                            if (item.alias || item.id) return item.alias || item.id;\n                            return datum && datum[item.id];\n                        },\n                        value: (datum)=>datum && datum[item.id]\n                    })),\n                {\n                    visible: true,\n                    hasShape: true,\n                    key: (datum)=>datum && datum[measureName || colorName] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const value = datum[measureValue];\n                        const id = datum[measureId];\n                        const measure = findMeasureById(measures, id);\n                        if (!measure) return String(value);\n                        const { format = {}, autoFormat = true } = measure;\n                        if (!external_remeda_isEmpty(format)) {\n                            const formatter = createFormatter(format);\n                            return formatter(value);\n                        }\n                        if (autoFormat) return autoFormatter(value, locale);\n                        return String(value);\n                    }\n                }\n            ]\n        },\n        dimension: {\n            content: [\n                {\n                    visible: true,\n                    key: (datum)=>datum && datum[colorName] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const value = datum[measureValue];\n                        const id = datum[measureId];\n                        const measure = findMeasureById(measures, id);\n                        if (!measure) return String(value);\n                        const { format = {}, autoFormat = true } = measure;\n                        if (!external_remeda_isEmpty(format)) {\n                            const formatter = createFormatter(format);\n                            return formatter(value);\n                        }\n                        if (autoFormat) return autoFormatter(value, locale);\n                        return String(value);\n                    },\n                    shapeType: 'rectRound'\n                }\n            ]\n        }\n    };\n    return result;\n};\nconst isSubset = (sub, obj)=>Object.entries(sub).every(([key, value])=>{\n        if ('string' == typeof value) return obj[key] === value;\n        if ('number' == typeof value) return obj[key] === value;\n        return true;\n    });\nconst annotationPoint_annotationPoint = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation } = advancedVSeed;\n    if (!annotation || !annotation.annotationPoint) return spec;\n    const { annotationPoint } = annotation;\n    const annotationPointList = Array.isArray(annotationPoint) ? annotationPoint : [\n        annotationPoint\n    ];\n    const markPoint = annotationPointList.flatMap((annotationPoint)=>{\n        const { selector: selectorPoint, text = '', textColor = '#ffffff', textFontSize = 12, textFontWeight = 400, textAlign = 'center', textBaseline = 'top', textBackgroundBorderColor, textBackgroundBorderRadius = 4, textBackgroundBorderWidth = 1, textBackgroundColor = '#212121', textBackgroundPadding = 2, textBackgroundVisible = true, offsetX = 0, offsetY = 0 } = annotationPoint;\n        const dataset = advancedVSeed.dataset.flat();\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return selectedData.map((datum)=>({\n                zIndex: ANNOTATION_Z_INDEX,\n                regionRelative: true,\n                position: (data, context)=>{\n                    const targetDatum = data.find((item)=>isSubset(datum, item));\n                    if (targetDatum) {\n                        const { x, y } = context.dataToPosition(targetDatum);\n                        return {\n                            x,\n                            y\n                        };\n                    }\n                },\n                itemLine: {\n                    visible: false\n                },\n                itemContent: {\n                    offsetY,\n                    offsetX,\n                    text: {\n                        text: text,\n                        style: {\n                            visible: true,\n                            textAlign: textAlign,\n                            textBaseline: textBaseline,\n                            fill: textColor,\n                            stroke: textBackgroundColor,\n                            lineWidth: 1,\n                            fontSize: textFontSize,\n                            fontWeight: textFontWeight,\n                            dy: textFontSize\n                        },\n                        labelBackground: {\n                            visible: textBackgroundVisible,\n                            padding: textBackgroundPadding,\n                            style: {\n                                cornerRadius: textBackgroundBorderRadius ?? 4,\n                                fill: textBackgroundColor,\n                                stroke: textBackgroundBorderColor,\n                                lineWidth: textBackgroundBorderWidth,\n                                dy: textFontSize\n                            }\n                        }\n                    }\n                }\n            }));\n    });\n    return {\n        ...spec,\n        markPoint\n    };\n};\nconst annotationVerticalLine_annotationVerticalLine = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation, datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    if (!annotation || !annotation.annotationVerticalLine) return spec;\n    const { annotationVerticalLine } = annotation;\n    const annotationVerticalLineList = Array.isArray(annotationVerticalLine) ? annotationVerticalLine : [\n        annotationVerticalLine\n    ];\n    const positionMap = {\n        outsideStart: 'start',\n        outsideEnd: 'end',\n        outsideMiddle: 'middle',\n        insideStart: 'insideStartTop',\n        insideMiddle: 'insideMiddleTop',\n        insideEnd: 'insideEndTop'\n    };\n    const markLine = annotationVerticalLineList.flatMap((annotationVerticalLine)=>{\n        const { selector: selectorPoint, xValue, text = '', textPosition = 'insideEnd', textColor = '#ffffff', textFontSize = 12, textFontWeight = 400, textAlign = 'right', textBaseline = 'top', textBackgroundVisible = true, textBackgroundBorderColor = '#212121', textBackgroundColor = '#212121', textBackgroundBorderRadius = 4, textBackgroundBorderWidth = 1, textBackgroundPadding = 2, lineVisible = true, lineColor = '#212121', lineWidth = 1, lineStyle = 'dashed' } = annotationVerticalLine;\n        const dataset = advancedVSeed.dataset.flat();\n        const generateOneMarkLine = (x)=>({\n                x: x,\n                zIndex: ANNOTATION_Z_INDEX,\n                line: {\n                    style: {\n                        visible: lineVisible,\n                        stroke: lineColor,\n                        lineStyle: lineStyle,\n                        lineWidth: lineWidth,\n                        lineDash: 'dashed' === lineStyle ? [\n                            5,\n                            2\n                        ] : 'dotted' === lineStyle ? [\n                            2,\n                            5\n                        ] : [\n                            0\n                        ]\n                    }\n                },\n                label: {\n                    text: text,\n                    position: positionMap[textPosition || 'insideEnd'],\n                    style: {\n                        visible: true,\n                        stroke: textBackgroundColor,\n                        lineWidth: 1,\n                        textAlign: textAlign,\n                        textBaseline: textBaseline,\n                        fill: textColor,\n                        fontSize: textFontSize,\n                        fontWeight: textFontWeight,\n                        dy: textFontSize\n                    },\n                    labelBackground: {\n                        visible: textBackgroundVisible,\n                        padding: textBackgroundPadding,\n                        style: {\n                            dy: textFontSize,\n                            cornerRadius: textBackgroundBorderRadius ?? 4,\n                            fill: textBackgroundColor,\n                            stroke: textBackgroundBorderColor,\n                            lineWidth: textBackgroundBorderWidth\n                        }\n                    }\n                },\n                endSymbol: {\n                    visible: true,\n                    size: 10 + (lineWidth || 1),\n                    style: {\n                        dy: 4,\n                        fill: lineColor\n                    }\n                }\n            });\n        if (!selectorPoint && isArray(xValue) || isString(xValue) || isNumber(xValue)) {\n            const xValueArr = Array.isArray(xValue) ? xValue : [\n                xValue\n            ];\n            return xValueArr.map(generateOneMarkLine);\n        }\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return selectedData.map((datum)=>{\n            const x = unfoldInfo.encodingX;\n            if (!x) return {};\n            return generateOneMarkLine(datum[x]);\n        });\n    });\n    const specMarkLine = spec.markLine || [];\n    const newMarkLine = [\n        ...specMarkLine,\n        ...markLine || []\n    ];\n    return {\n        ...spec,\n        markLine: newMarkLine\n    };\n};\nconst annotationHorizontalLine_annotationHorizontalLine = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation, datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    if (!annotation || !annotation.annotationHorizontalLine) return spec;\n    const { annotationHorizontalLine } = annotation;\n    const annotationVerticalLineList = Array.isArray(annotationHorizontalLine) ? annotationHorizontalLine : [\n        annotationHorizontalLine\n    ];\n    const positionMap = {\n        outsideStart: 'start',\n        outsideEnd: 'end',\n        outsideMiddle: 'middle',\n        insideStart: 'insideStartTop',\n        insideMiddle: 'insideMiddleTop',\n        insideEnd: 'insideEndTop'\n    };\n    const markLine = annotationVerticalLineList.flatMap((annotationVerticalLine)=>{\n        const { selector: selectorPoint, yValue, text = '', textPosition = 'insideEnd', textColor = '#ffffff', textFontSize = 12, textFontWeight = 400, textAlign = 'right', textBaseline = 'top', lineColor = '#212121', lineStyle = 'dashed', lineVisible = true, lineWidth = 1, textBackgroundVisible = true, textBackgroundColor = '#212121', textBackgroundBorderColor = '#212121', textBackgroundBorderRadius = 4, textBackgroundBorderWidth = 1, textBackgroundPadding = 2 } = annotationVerticalLine;\n        const dataset = advancedVSeed.dataset.flat();\n        const generateOneMarkLine = (y)=>({\n                y,\n                zIndex: ANNOTATION_Z_INDEX,\n                line: {\n                    style: {\n                        visible: lineVisible,\n                        stroke: lineColor,\n                        lineStyle: lineStyle,\n                        lineWidth: lineWidth,\n                        lineDash: 'dashed' === lineStyle ? [\n                            5,\n                            2\n                        ] : 'dotted' === lineStyle ? [\n                            2,\n                            5\n                        ] : [\n                            0\n                        ]\n                    }\n                },\n                label: {\n                    text: text,\n                    position: positionMap[textPosition || 'insideEnd'],\n                    style: {\n                        visible: true,\n                        dy: textFontSize,\n                        stroke: textBackgroundColor,\n                        lineWidth: 1,\n                        textAlign: textAlign,\n                        textBaseline: textBaseline,\n                        fill: textColor,\n                        fontSize: textFontSize,\n                        fontWeight: textFontWeight\n                    },\n                    labelBackground: {\n                        visible: textBackgroundVisible,\n                        padding: textBackgroundPadding,\n                        style: {\n                            dy: textFontSize,\n                            cornerRadius: textBackgroundBorderRadius ?? 4,\n                            fill: textBackgroundColor,\n                            stroke: textBackgroundBorderColor,\n                            lineWidth: textBackgroundBorderWidth\n                        }\n                    }\n                },\n                endSymbol: {\n                    visible: true,\n                    size: 10 + (lineWidth || 1),\n                    style: {\n                        dx: -4,\n                        fill: lineColor\n                    }\n                }\n            });\n        if (!selectorPoint && isArray(yValue) || isString(yValue) || isNumber(yValue)) {\n            const yValueArr = Array.isArray(yValue) ? yValue : [\n                yValue\n            ];\n            return yValueArr.map(generateOneMarkLine);\n        }\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return selectedData.map((datum)=>{\n            const y = unfoldInfo.encodingY;\n            if (!y) return {};\n            return generateOneMarkLine(datum[y]);\n        });\n    });\n    const specMarkLine = spec.markLine || [];\n    const newMarkLine = [\n        ...specMarkLine,\n        ...markLine || []\n    ];\n    return {\n        ...spec,\n        markLine: newMarkLine\n    };\n};\nconst annotationArea_annotationArea = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation } = advancedVSeed;\n    if (!annotation || !annotation.annotationArea) return spec;\n    const { annotationArea } = annotation;\n    const annotationAreaList = Array.isArray(annotationArea) ? annotationArea : [\n        annotationArea\n    ];\n    const positionMap = {\n        top: 'insideTop',\n        topRight: 'insideTopRight',\n        topLeft: 'insideTopLeft',\n        bottom: 'insideBottom',\n        bottomLeft: 'insideBottomLeft',\n        bottomRight: 'insideBottomRight',\n        left: 'insideLeft',\n        right: 'insideRight'\n    };\n    const markArea = annotationAreaList.flatMap((annotationArea)=>{\n        const { selector: selectorPoint, text = '', textPosition = 'top', textColor = '#ffffff', textFontSize = 12, textFontWeight = 400, textAlign = 'center', textBaseline = 'top', textBackgroundVisible = true, textBackgroundColor = '#191d24', textBackgroundBorderColor = '#191d24', textBackgroundBorderWidth = 1, textBackgroundBorderRadius = 4, textBackgroundPadding = 4, areaColor = '#888888', areaColorOpacity = 0.15, areaBorderColor = '#888888', areaBorderRadius = 4, areaBorderWidth = 1, outerPadding = 4 } = annotationArea;\n        const dataset = advancedVSeed.dataset.flat();\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        const labelPosition = positionMap[textPosition || 'top'];\n        const isBottom = labelPosition.toLocaleLowerCase().includes('bottom');\n        return {\n            zIndex: ANNOTATION_Z_INDEX,\n            regionRelative: true,\n            positions: (data, context)=>{\n                const positionData = data.filter((item)=>selectedData.some((datum)=>isSubset(datum, item)));\n                const xyList = positionData.map((datum)=>context.dataToPosition(datum));\n                const yAxisHelper = context.getYAxisHelper();\n                const xAxisHelper = context.getXAxisHelper();\n                if ('function' == typeof xAxisHelper?.getBandwidth) {\n                    const yScale = yAxisHelper.getScale();\n                    const minX = Math.min(...xyList.map((item)=>item.x)) - (outerPadding || 4);\n                    const maxX = Math.max(...xyList.map((item)=>item.x)) + (outerPadding || 4);\n                    const minY = Math.min(...yScale.range());\n                    const maxY = Math.max(...yScale.range());\n                    return [\n                        {\n                            x: minX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: maxY\n                        },\n                        {\n                            x: minX,\n                            y: maxY\n                        }\n                    ];\n                }\n                if ('function' == typeof yAxisHelper?.getBandwidth) {\n                    const xScale = xAxisHelper.getScale();\n                    const minY = Math.min(...xyList.map((item)=>item.y)) - (outerPadding || 4);\n                    const maxY = Math.max(...xyList.map((item)=>item.y)) + (outerPadding || 4);\n                    const minX = Math.min(...xScale.range());\n                    const maxX = Math.max(...xScale.range());\n                    return [\n                        {\n                            x: minX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: maxY\n                        },\n                        {\n                            x: minX,\n                            y: maxY\n                        }\n                    ];\n                }\n                return [];\n            },\n            label: {\n                position: labelPosition,\n                visible: true,\n                text: text,\n                style: {\n                    dy: isBottom ? 2 * -(textFontSize || 12) : textFontSize,\n                    textAlign: textAlign,\n                    textBaseline: textBaseline,\n                    fill: textColor,\n                    stroke: textBackgroundColor,\n                    lineWidth: 1,\n                    fontSize: textFontSize,\n                    fontWeight: textFontWeight\n                },\n                labelBackground: {\n                    visible: textBackgroundVisible,\n                    padding: textBackgroundPadding,\n                    style: {\n                        dy: isBottom ? 2 * -(textFontSize || 12) : textFontSize,\n                        cornerRadius: textBackgroundBorderRadius ?? 4,\n                        fill: textBackgroundColor,\n                        stroke: textBackgroundBorderColor,\n                        lineWidth: textBackgroundBorderWidth\n                    }\n                }\n            },\n            area: {\n                style: {\n                    visible: true,\n                    fill: areaColor,\n                    fillOpacity: areaColorOpacity,\n                    stroke: areaBorderColor,\n                    lineWidth: areaBorderWidth,\n                    cornerRadius: areaBorderRadius\n                }\n            }\n        };\n    });\n    return {\n        ...spec,\n        markArea: markArea\n    };\n};\nconst initPivot = (spec)=>{\n    const result = {\n        ...spec\n    };\n    return {\n        ...result,\n        animation: true,\n        rows: [],\n        columns: [],\n        indicators: [],\n        records: [],\n        widthMode: 'adaptive',\n        heightMode: 'adaptive',\n        indicatorsAsCol: false\n    };\n};\nconst pivotGridStyle = (spec)=>{\n    const result = {\n        ...spec\n    };\n    const transparent = 'rgba(0,0,0,0)';\n    const hoverBackgroundColor = 'rgba(178,186,207, 0.2)';\n    return {\n        ...result,\n        theme: {\n            underlayBackgroundColor: transparent,\n            bodyStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: [\n                    0,\n                    0,\n                    2,\n                    0\n                ],\n                bgColor: transparent,\n                padding: [\n                    0,\n                    0,\n                    1,\n                    0\n                ],\n                hover: {\n                    cellBgColor: 'transparent'\n                }\n            },\n            headerStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                fontSize: 12,\n                color: '#333333',\n                textAlign: 'center',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            rowHeaderStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                fontSize: 12,\n                color: '#333333',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            cornerHeaderStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                textAlign: 'center',\n                fontSize: 12,\n                color: '#333333',\n                fontWeight: 'bold',\n                borderLineWidth: [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            cornerRightTopCellStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            cornerLeftBottomCellStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            cornerRightBottomCellStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            rightFrozenStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            bottomFrozenStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            selectionStyle: {\n                cellBgColor: '',\n                cellBorderColor: ''\n            },\n            frameStyle: {\n                borderLineWidth: 0,\n                bgColor: transparent\n            }\n        }\n    };\n};\nconst pivotIndicators_pivotIndicators = (chartPipeline)=>(spec, context)=>{\n        const result = {\n            ...spec\n        };\n        const { advancedVSeed } = context;\n        const { measures, datasetReshapeInfo, dataset } = advancedVSeed;\n        const colorItems = unique(datasetReshapeInfo.flatMap((d)=>d.unfoldInfo.colorItems));\n        const indicators = datasetReshapeInfo.map((reshapeInfo, index)=>{\n            const measure = measures?.find((d)=>d.id === reshapeInfo.id);\n            const newDataset = dataset[index];\n            const newDatasetReshapeInfo = [\n                {\n                    ...reshapeInfo,\n                    unfoldInfo: {\n                        ...reshapeInfo.unfoldInfo,\n                        colorItems\n                    }\n                }\n            ];\n            const newContext = {\n                ...context,\n                advancedVSeed: {\n                    ...advancedVSeed,\n                    datasetReshapeInfo: newDatasetReshapeInfo,\n                    dataset: newDataset\n                }\n            };\n            const chartSpec = execPipeline(chartPipeline, newContext, {});\n            return {\n                indicatorKey: reshapeInfo.id,\n                title: measure?.alias,\n                cellType: 'chart',\n                chartModule: 'vchart',\n                chartSpec: chartSpec,\n                style: {\n                    padding: [\n                        1,\n                        1,\n                        0,\n                        1\n                    ]\n                }\n            };\n        });\n        return {\n            ...result,\n            indicators: indicators\n        };\n    };\nconst pivotIndicators_pivotIndicatorsAsRow = (spec)=>{\n    const result = {\n        ...spec\n    };\n    return {\n        ...result,\n        indicatorsAsCol: false\n    };\n};\nconst pivotIndicators_pivotIndicatorsAsCol = (spec)=>{\n    const result = {\n        ...spec\n    };\n    return {\n        ...result,\n        indicatorsAsCol: true\n    };\n};\nconst datasetPivot = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dataset, datasetReshapeInfo } = advancedVSeed;\n    const records = dataset.reduce((pre, cur, index)=>{\n        const id = datasetReshapeInfo[index].id;\n        pre[id] = cur;\n        return pre;\n    }, {});\n    return {\n        ...result,\n        records: records\n    };\n};\nconst pivotRowDimensions = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    if (!dimensions) return result;\n    const rowDimensions = dimensions.filter((dim)=>'rowDimension' === dim.location || 'row' === dim.encoding);\n    const rows = rowDimensions.map((dim)=>({\n            dimensionKey: dim.id,\n            title: dim.alias || dim.id\n        }));\n    return {\n        ...result,\n        rows: rows\n    };\n};\nconst pivotColumnDimensions = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    if (!dimensions) return result;\n    const columnDimensions = dimensions.filter((dim)=>'columnDimension' === dim.location || 'column' === dim.encoding);\n    const columns = columnDimensions.map((dim)=>({\n            dimensionKey: dim.id,\n            title: dim.alias || dim.id\n        }));\n    return {\n        ...result,\n        columns: columns\n    };\n};\nconst pivotDiscreteLegend = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.legend) return result;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const colorItems = unique(datasetReshapeInfo.flatMap((d)=>d.unfoldInfo.colorItems));\n    const colorIdMap = datasetReshapeInfo.reduce((prev, cur)=>({\n            ...prev,\n            ...cur.unfoldInfo.colorIdMap\n        }), {});\n    const { legend, color } = baseConfig;\n    const { colorScheme, colorMapping } = color;\n    const colorSpecified = createSpecifiedForColorMapping(colorMapping, colorIdMap, colorItems);\n    const { enable, position = 'bottom', labelFontColor, labelFontSize = 12, labelFontWeight = 400, maxSize = 1, border, shapeType = 'rectRound' } = legend || {};\n    const orient = [\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ].includes(position) ? 'bottom' : [\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr'\n    ].includes(position) ? 'top' : [\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb'\n    ].includes(position) ? 'left' : 'right';\n    const legendPosition = [\n        'topLeft',\n        'bottomLeft',\n        'leftTop',\n        'rightTop',\n        'lt',\n        'rt',\n        'tl',\n        'bl'\n    ].includes(position) ? 'start' : [\n        'topRight',\n        'bottomRight',\n        'leftBottom',\n        'rightBottom',\n        'lb',\n        'rb',\n        'rt',\n        'br'\n    ].includes(position) ? 'end' : 'middle';\n    const legends = {\n        visible: enable,\n        type: 'discrete',\n        orient,\n        position: legendPosition,\n        maxCol: Math.max(1, maxSize),\n        maxRow: Math.max(1, maxSize),\n        data: colorItems.map((d, index)=>{\n            const color = colorSpecified?.[d] ?? colorScheme?.[index % colorScheme.length];\n            return {\n                label: d,\n                shape: {\n                    outerBorder: border ? {\n                        stroke: color,\n                        distance: 3,\n                        lineWidth: 1\n                    } : void 0,\n                    fill: color\n                }\n            };\n        }),\n        item: {\n            focus: true,\n            maxWidth: '30%',\n            focusIconStyle: {\n                size: labelFontSize + 2,\n                fill: labelFontColor,\n                fontWeight: labelFontWeight\n            },\n            shape: {\n                space: border ? 6 : 4,\n                style: {\n                    symbolType: shapeType,\n                    size: border ? 8 : 10\n                }\n            },\n            label: {\n                formatMethod: (value)=>colorIdMap[value] ?? value,\n                style: {\n                    fontSize: labelFontSize,\n                    fill: labelFontColor,\n                    fontWeight: labelFontWeight\n                }\n            },\n            background: {\n                state: {\n                    selectedHover: {\n                        fill: labelFontColor,\n                        fillOpacity: 0.05\n                    }\n                }\n            }\n        }\n    };\n    return {\n        ...result,\n        legends\n    };\n};\nconst pivotColorLegend = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.legend) return result;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const max = Math.max(...datasetReshapeInfo.map((d)=>d.foldInfo.colorRange[1]));\n    const min = Math.min(...datasetReshapeInfo.map((d)=>d.foldInfo.colorRange[0]));\n    const { legend, color } = baseConfig;\n    const { colorScheme, linearColorScheme } = color;\n    const { enable, position = 'bottom', labelFontColor, labelFontSize = 12, labelFontWeight = 400 } = legend || {};\n    const orient = [\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ].includes(position) ? 'bottom' : [\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr'\n    ].includes(position) ? 'top' : [\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb'\n    ].includes(position) ? 'left' : 'right';\n    const legendPosition = [\n        'topLeft',\n        'bottomLeft',\n        'leftTop',\n        'rightTop',\n        'lt',\n        'rt',\n        'tl',\n        'bl'\n    ].includes(position) ? 'start' : [\n        'topRight',\n        'bottomRight',\n        'leftBottom',\n        'rightBottom',\n        'lb',\n        'rb',\n        'rt',\n        'br'\n    ].includes(position) ? 'end' : 'middle';\n    const legends = {\n        visible: enable,\n        type: 'color',\n        orient,\n        position: legendPosition,\n        colors: linearColorScheme || colorScheme || [],\n        value: [\n            min,\n            max\n        ],\n        min: min,\n        max: max,\n        maxWidth: '30%',\n        startText: {\n            visible: true,\n            style: {\n                fill: labelFontColor,\n                fontSize: labelFontSize,\n                fontWeight: labelFontWeight\n            }\n        },\n        endText: {\n            visible: true,\n            style: {\n                fill: labelFontColor,\n                fontSize: labelFontSize,\n                fontWeight: labelFontWeight\n            }\n        }\n    };\n    return {\n        ...result,\n        legends\n    };\n};\nconst pivotAdapter_pivotAdapter = (pipeline, pivotPipeline)=>(spec, context)=>{\n        const { vseed } = context;\n        const usePivotChart = isPivotChart(vseed);\n        if (usePivotChart) return execPipeline(pivotPipeline, context, spec);\n        return execPipeline(pipeline, context, spec);\n    };\nconst line_line = [\n    initLine,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    verticalCrosshairLine,\n    colorAdapter(discreteLegend, colorLegend),\n    colorPointStyleFill(pointStyle_pointStyle),\n    pointStateDimensionHover,\n    colorLineStyleFill(lineStyle_lineStyle),\n    label_label,\n    tooltip_tooltip,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotLine = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initLine,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        verticalCrosshairLine,\n        colorPointStyleFill(pointStyle_pointStyle),\n        pointStateDimensionHover,\n        colorLineStyleFill(lineStyle_lineStyle),\n        label_label,\n        tooltip_tooltip,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst lineSpecPipeline = [\n    pivotAdapter_pivotAdapter(line_line, pivotLine)\n];\nconst registerLine = ()=>{\n    Builder._advancedPipelineMap.line = lineAdvancedPipeline;\n    Builder._specPipelineMap.line = lineSpecPipeline;\n};\nconst encodingForColumn = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) column_generateDimensionEncoding(dimensions, encoding);\n    else column_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) column_generateMeasureEncoding(measures, encoding);\n    else column_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst column_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const onlyMeasureName = 1 === dimensions.length && dimensions.find((item)=>item.id === MeasureName);\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.x = uniqueDimIds.slice(0, 1);\n    encoding.color = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.detail = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.tooltip = uniqueDimIds;\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst column_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.x = unique(dimensions.filter((item)=>'xAxis' === item.encoding).map((item)=>item.id));\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.x.length) encoding.x = [\n        dimensions[0].id\n    ];\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n};\nconst column_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.y = unique(measures.filter((item)=>'yAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst column_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.y = unique(measures.filter((item)=>'yAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n    return encoding;\n};\nconst columnAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForColumn,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortXBandAxis,\n    sortLegend_sortLegend,\n    columnConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initColumn = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    result.type = 'bar';\n    result.direction = 'vertical';\n    result.xField = unfoldInfo.encodingX;\n    result.yField = foldInfo.measureValue;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst stackCornerRadius_stackCornerRadius = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const stackCornerRadius = advancedVSeed.config?.[chartType]?.stackCornerRadius;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { foldInfo } = datasetReshapeInfo[0];\n    return {\n        ...spec,\n        stackCornerRadius: (_, datum)=>{\n            if (datum[foldInfo.measureValue] > 0) return stackCornerRadius;\n            return 0;\n        }\n    };\n};\nconst stackInverse = (spec)=>{\n    const result = {\n        ...spec\n    };\n    result.stackInverse = true;\n    return result;\n};\nconst verticalCrosshairRect = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.crosshairRect;\n    if (!config) return result;\n    if (!result.crosshair) result.crosshair = {};\n    const visible = config.visible || true;\n    const rectColor = config.rectColor || void 0;\n    const labelColor = config.labelColor || void 0;\n    const labelVisible = config.labelVisible || false;\n    const labelBackgroundColor = config.labelBackgroundColor || void 0;\n    const crosshair = result.crosshair;\n    crosshair.xField = {\n        visible,\n        line: {\n            type: 'rect',\n            style: {\n                lineWidth: 0,\n                opacity: 0.2,\n                fill: rectColor\n            }\n        },\n        label: {\n            visible: labelVisible,\n            labelBackground: {\n                visible: labelVisible,\n                style: {\n                    fill: labelBackgroundColor\n                }\n            },\n            style: {\n                fill: labelColor\n            }\n        }\n    };\n    return result;\n};\nconst colorBarStyleFill = (stylePipe)=>(spec, context)=>{\n        const result = stylePipe(spec, context);\n        const { advancedVSeed } = context;\n        const { datasetReshapeInfo } = advancedVSeed;\n        const { unfoldInfo } = datasetReshapeInfo[0];\n        if (isLinearColor(advancedVSeed)) {\n            if (result?.bar?.style) result.bar.style.fill = {\n                field: unfoldInfo.encodingColor,\n                scale: 'color'\n            };\n        }\n        return result;\n    };\nconst barStyle_barStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { markStyle, dataset = [] } = advancedVSeed;\n    const { barStyle } = markStyle;\n    const showStroke = dataset.length <= 100;\n    const result = {\n        ...spec,\n        bar: {\n            style: {\n                lineWidth: showStroke ? 1 : 0\n            },\n            state: {\n                hover: {\n                    fillOpacity: 0.6\n                }\n            }\n        }\n    };\n    if (!barStyle) return result;\n    const barStyles = Array.isArray(barStyle) ? barStyle : [\n        barStyle\n    ];\n    const customMap = barStyles.reduce((result, style, index)=>{\n        const { barBorderColor, barBorderStyle, barBorderWidth = 1, barColor, barColorOpacity, barRadius, barVisible = true } = style;\n        const lineDash = 'dashed' === barBorderStyle ? [\n            5,\n            2\n        ] : 'dotted' === barBorderStyle ? [\n            2,\n            5\n        ] : [\n            0,\n            0\n        ];\n        return {\n            ...result,\n            [`custom${index + 1}`]: {\n                level: index + 1,\n                filter: (datum)=>{\n                    if (selector_selector(datum, style.selector)) return true;\n                    return false;\n                },\n                style: {\n                    visible: barVisible,\n                    fill: barColor,\n                    fillOpacity: barColorOpacity,\n                    cornerRadius: barRadius,\n                    innerBorder: {\n                        stroke: barBorderColor,\n                        lineWidth: barBorderWidth,\n                        distance: (barBorderWidth || 0) / 2,\n                        lineDash: lineDash\n                    }\n                }\n            }\n        };\n    }, {});\n    return {\n        ...result,\n        bar: {\n            state: {\n                ...customMap\n            }\n        }\n    };\n};\nconst annotationAreaBand = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation } = advancedVSeed;\n    if (!annotation || !annotation.annotationArea) return spec;\n    const { annotationArea } = annotation;\n    const annotationAreaList = Array.isArray(annotationArea) ? annotationArea : [\n        annotationArea\n    ];\n    const positionMap = {\n        top: 'insideTop',\n        topRight: 'insideTopRight',\n        topLeft: 'insideTopLeft',\n        bottom: 'insideBottom',\n        bottomLeft: 'insideBottomLeft',\n        bottomRight: 'insideBottomRight',\n        left: 'insideLeft',\n        right: 'insideRight'\n    };\n    const markArea = annotationAreaList.flatMap((annotationArea)=>{\n        const { selector: selectorPoint, text = '', textPosition = 'top', textColor = '#ffffff', textFontSize = 12, textFontWeight = 400, textAlign = 'center', textBaseline = 'top', textBackgroundVisible = true, textBackgroundColor = '#191d24', textBackgroundBorderColor = '#191d24', textBackgroundBorderWidth = 1, textBackgroundBorderRadius = 4, textBackgroundPadding = 4, areaColor = '#888888', areaColorOpacity = 0.15, areaBorderColor = '#888888', areaBorderRadius = 4, areaBorderWidth = 1, outerPadding = 4 } = annotationArea;\n        const dataset = advancedVSeed.dataset.flat();\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return {\n            zIndex: ANNOTATION_Z_INDEX,\n            regionRelative: true,\n            positions: (data, context)=>{\n                const positionData = data.filter((item)=>selectedData.some((datum)=>isSubset(datum, item)));\n                const xyList = positionData.map((datum)=>context.dataToPosition(datum));\n                const yAxisHelper = context.getYAxisHelper();\n                const xAxisHelper = context.getXAxisHelper();\n                if ('function' == typeof xAxisHelper?.getBandwidth) {\n                    const depth = context.fieldX.length ?? 0;\n                    const xBandWidth = xAxisHelper?.getBandwidth?.(depth - 1);\n                    const yScale = yAxisHelper.getScale();\n                    const minX = Math.min(...xyList.map((item)=>item.x)) - (outerPadding || 4);\n                    const maxX = Math.max(...xyList.map((item)=>item.x)) + xBandWidth + (outerPadding || 4);\n                    const minY = Math.min(...yScale.range());\n                    const maxY = Math.max(...yScale.range());\n                    return [\n                        {\n                            x: minX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: maxY\n                        },\n                        {\n                            x: minX,\n                            y: maxY\n                        }\n                    ];\n                }\n                if ('function' == typeof yAxisHelper?.getBandwidth) {\n                    const depth = context.fieldY.length ?? 0;\n                    const yBandWidth = yAxisHelper?.getBandwidth?.(depth - 1);\n                    const xScale = xAxisHelper.getScale();\n                    const minY = Math.min(...xyList.map((item)=>item.y)) - (outerPadding || 4);\n                    const maxY = Math.max(...xyList.map((item)=>item.y)) + yBandWidth + (outerPadding || 4);\n                    const minX = Math.min(...xScale.range());\n                    const maxX = Math.max(...xScale.range());\n                    return [\n                        {\n                            x: minX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: maxY\n                        },\n                        {\n                            x: minX,\n                            y: maxY\n                        }\n                    ];\n                }\n                return [];\n            },\n            label: {\n                position: positionMap[textPosition || 'top'],\n                visible: true,\n                text: text,\n                style: {\n                    dy: textFontSize,\n                    textAlign: textAlign,\n                    textBaseline: textBaseline,\n                    stroke: textBackgroundColor,\n                    lineWidth: 1,\n                    fill: textColor,\n                    fontSize: textFontSize,\n                    fontWeight: textFontWeight\n                },\n                labelBackground: {\n                    visible: textBackgroundVisible,\n                    padding: textBackgroundPadding,\n                    style: {\n                        dy: textFontSize,\n                        cornerRadius: textBackgroundBorderRadius ?? 4,\n                        fill: textBackgroundColor,\n                        stroke: textBackgroundBorderColor,\n                        lineWidth: textBackgroundBorderWidth\n                    }\n                }\n            },\n            area: {\n                style: {\n                    visible: true,\n                    fill: areaColor,\n                    fillOpacity: areaColorOpacity,\n                    stroke: areaBorderColor,\n                    lineWidth: areaBorderWidth,\n                    cornerRadius: areaBorderRadius\n                }\n            }\n        };\n    });\n    return {\n        ...spec,\n        markArea: markArea\n    };\n};\nconst column = [\n    initColumn,\n    stackCornerRadius_stackCornerRadius,\n    stackInverse,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairRect,\n    colorAdapter(discreteLegend, colorLegend),\n    colorBarStyleFill(barStyle_barStyle),\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotColumn = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initColumn,\n        stackCornerRadius_stackCornerRadius,\n        stackInverse,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairRect,\n        colorBarStyleFill(barStyle_barStyle),\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst columnSpecPipeline = [\n    pivotAdapter_pivotAdapter(column, pivotColumn)\n];\nconst registerColumn = ()=>{\n    Builder._advancedPipelineMap.column = columnAdvancedPipeline;\n    Builder._specPipelineMap.column = columnSpecPipeline;\n};\nconst columnParallelAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForColumn,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortXBandAxis,\n    sortLegend_sortLegend,\n    columnParallelConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initColumnParallel = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, dimensions } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    const sameDimensionsMode = dimensions.length > 1 && dimensions.every((dim)=>dim.id === dimensions[0].id);\n    result.type = 'bar';\n    result.direction = 'vertical';\n    result.xField = sameDimensionsMode ? [\n        unfoldInfo.encodingX\n    ] : [\n        unfoldInfo.encodingX,\n        unfoldInfo.encodingDetail\n    ];\n    result.yField = foldInfo.measureValue;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst columnParallel = [\n    initColumnParallel,\n    stackCornerRadius_stackCornerRadius,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    verticalCrosshairRect,\n    colorBarStyleFill(barStyle_barStyle),\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotColumnParallel = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initColumnParallel,\n        stackCornerRadius_stackCornerRadius,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairRect,\n        colorBarStyleFill(barStyle_barStyle),\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst columnParallelSpecPipeline = [\n    pivotAdapter_pivotAdapter(columnParallel, pivotColumnParallel)\n];\nconst registerColumnParallel = ()=>{\n    Builder._advancedPipelineMap.columnParallel = columnParallelAdvancedPipeline;\n    Builder._specPipelineMap.columnParallel = columnParallelSpecPipeline;\n};\nconst columnPercentAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForColumn,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortXBandAxis,\n    sortLegend_sortLegend,\n    columnPercentConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst percent = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    result.percent = true;\n    return result;\n};\nconst columnPercent = [\n    initColumn,\n    stackCornerRadius_stackCornerRadius,\n    stackInverse,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    percent,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    verticalCrosshairRect,\n    colorBarStyleFill(barStyle_barStyle),\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotColumnPercent = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initColumn,\n        stackCornerRadius_stackCornerRadius,\n        stackInverse,\n        colorAdapter(color_color, linearColor),\n        percent,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairRect,\n        colorBarStyleFill(barStyle_barStyle),\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst columnPercentSpecPipeline = [\n    pivotAdapter_pivotAdapter(columnPercent, pivotColumnPercent)\n];\nconst registerColumnPercent = ()=>{\n    Builder._advancedPipelineMap.columnPercent = columnPercentAdvancedPipeline;\n    Builder._specPipelineMap.columnPercent = columnPercentSpecPipeline;\n};\nconst encodingForBar = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) bar_generateDimensionEncoding(dimensions, encoding);\n    else bar_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) bar_generateMeasureEncoding(measures, encoding);\n    else bar_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst bar_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.x = unique(measures.filter((item)=>'xAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst bar_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const onlyMeasureName = 1 === dimensions.length && dimensions.find((item)=>item.id === MeasureName);\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.y = uniqueDimIds.slice(0, 1);\n    encoding.color = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.detail = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.tooltip = uniqueDimIds;\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst bar_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.x = unique(measures.filter((item)=>'xAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n    return encoding;\n};\nconst bar_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.y = unique(dimensions.filter((item)=>'yAxis' === item.encoding).map((item)=>item.id));\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.y.length) encoding.y = [\n        dimensions[0].id\n    ];\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n    if (0 === encoding.detail.length) encoding.detail = dimensions.filter((item)=>!encoding.y?.includes(item.id)).map((item)=>item.id);\n};\nconst sortYBandAxis = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { sort: sortAxis } = vseed;\n    const { datasetReshapeInfo, dataset } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const yField = unfoldInfo?.encodingY;\n    if (!sortAxis || !yField) return advancedVSeed;\n    if (!result.analysis) result.analysis = {};\n    if (!result.analysis.orderMapping) result.analysis.orderMapping = {};\n    const axisOrderResult = calcOrder(sortAxis, yField, dataset.flat(2));\n    result.analysis.orderMapping[yField] = axisOrderResult;\n    return result;\n};\nconst barAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForBar,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortYBandAxis,\n    sortLegend_sortLegend,\n    barConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initBar = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    result.type = 'bar';\n    result.direction = 'horizontal';\n    result.yField = unfoldInfo.encodingY;\n    result.xField = foldInfo.measureValue;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst datasetYX = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { analysis, datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const orderMapping = analysis?.orderMapping || {};\n    const angle = unfoldInfo.encodingAngle;\n    const y = unfoldInfo.encodingY;\n    const colorId = unfoldInfo.encodingColorId;\n    const id = datasetReshapeInfo[0].id;\n    const fields = {};\n    if (angle) fields[angle] = {\n        sortIndex: 0\n    };\n    if (y) {\n        const order = orderMapping[y];\n        if (order) fields[y] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[y] = {\n            sortIndex: 0\n        };\n    }\n    if (colorId) {\n        const order = orderMapping[colorId];\n        if (order) fields[colorId] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[colorId] = {\n            sortIndex: 0\n        };\n    }\n    return {\n        ...spec,\n        data: {\n            id,\n            values: isPivotChart(vseed) ? void 0 : advancedVSeed.dataset,\n            fields: fields\n        }\n    };\n};\nconst xLinear = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const { locale } = advancedVSeed;\n    const config = advancedVSeed.config?.[chartType]?.xAxis;\n    if (!result.axes) result.axes = [];\n    if (!config) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                type: 'linear',\n                orient: 'bottom'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, zero, nice, inverse, max, min, log, logBase = 10 } = config;\n    const linearAxis = {\n        visible,\n        type: log ? 'log' : 'linear',\n        base: logBase,\n        orient: 'bottom',\n        nice,\n        zero: log ? false : zero,\n        inverse,\n        max,\n        min,\n        label: {\n            visible: label?.visible,\n            formatMethod: (value)=>autoFormatter(value, locale),\n            style: {\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            }\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        innerOffset: {\n            right: LINEAR_AXIS_INNER_OFFSET_TOP\n        }\n    };\n    result.axes = [\n        ...result.axes,\n        linearAxis\n    ];\n    return result;\n};\nconst yBand = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.yAxis;\n    if (!result.axes) result.axes = [];\n    if (!config) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                type: 'band',\n                orient: 'left'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, labelAutoHide, labelAutoHideGap, labelAutoLimit, labelAutoLimitLength = 80, labelAutoRotate, labelAutoRotateAngleRange } = config;\n    const sampling = !(labelAutoHide || labelAutoRotate || labelAutoLimit);\n    const bandAxis = {\n        visible,\n        type: 'band',\n        orient: 'left',\n        maxWidth: labelAutoLimitLength + 60,\n        sampling,\n        hover: true,\n        label: {\n            visible: label?.visible,\n            flush: true,\n            containerAlign: 'right',\n            space: 8,\n            style: {\n                maxLineWidth: labelAutoLimitLength,\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            },\n            minGap: labelAutoHideGap,\n            autoHide: labelAutoHide,\n            autoHideMethod: 'greedy',\n            autoHideSeparation: labelAutoHideGap,\n            autoLimit: labelAutoLimit,\n            autoRotate: labelAutoRotate,\n            autoRotateAngle: labelAutoRotateAngleRange,\n            lastVisible: true\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        paddingInner: [\n            0.15,\n            0.1\n        ],\n        paddingOuter: [\n            0.075,\n            0.1\n        ]\n    };\n    result.axes = [\n        ...result.axes,\n        bandAxis\n    ];\n    return result;\n};\nconst horizontalCrosshairRect = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.crosshairRect;\n    if (!config) return result;\n    if (!result.crosshair) result.crosshair = {};\n    const visible = config.visible || true;\n    const rectColor = config.rectColor || void 0;\n    const labelColor = config.labelColor || void 0;\n    const labelVisible = config.labelVisible || false;\n    const labelBackgroundColor = config.labelBackgroundColor || void 0;\n    const crosshair = result.crosshair;\n    crosshair.yField = {\n        visible,\n        line: {\n            type: 'rect',\n            style: {\n                lineWidth: 0,\n                opacity: 0.2,\n                fill: rectColor\n            }\n        },\n        label: {\n            visible: labelVisible,\n            labelBackground: {\n                visible: labelVisible,\n                style: {\n                    fill: labelBackgroundColor\n                }\n            },\n            style: {\n                fill: labelColor\n            }\n        }\n    };\n    return result;\n};\nconst bar = [\n    initBar,\n    stackCornerRadius_stackCornerRadius,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetYX,\n    progressive,\n    xLinear,\n    yBand,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    horizontalCrosshairRect,\n    colorBarStyleFill(barStyle_barStyle),\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotBar = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsCol,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initBar,\n        stackCornerRadius_stackCornerRadius,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetYX,\n        progressive,\n        xLinear,\n        yBand,\n        label_label,\n        label_label,\n        tooltip_tooltip,\n        colorBarStyleFill(barStyle_barStyle),\n        horizontalCrosshairRect,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst barSpecPipeline = [\n    pivotAdapter_pivotAdapter(bar, pivotBar)\n];\nconst registerBar = ()=>{\n    Builder._advancedPipelineMap.bar = barAdvancedPipeline;\n    Builder._specPipelineMap.bar = barSpecPipeline;\n};\nconst barParallelAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForBar,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortYBandAxis,\n    sortLegend_sortLegend,\n    barParallelConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initBarParallel = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, dimensions } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    const sameDimensionsMode = dimensions.length > 1 && dimensions.every((dim)=>dim.id === dimensions[0].id);\n    result.type = 'bar';\n    result.direction = 'horizontal';\n    result.yField = sameDimensionsMode ? [\n        unfoldInfo.encodingY\n    ] : [\n        unfoldInfo.encodingY,\n        unfoldInfo.encodingDetail\n    ];\n    result.xField = foldInfo.measureValue;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst barParallel = [\n    initBarParallel,\n    stackCornerRadius_stackCornerRadius,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetYX,\n    progressive,\n    xLinear,\n    yBand,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    horizontalCrosshairRect,\n    colorBarStyleFill(barStyle_barStyle),\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotBarParallel = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsCol,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initBarParallel,\n        stackCornerRadius_stackCornerRadius,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetYX,\n        xLinear,\n        yBand,\n        label_label,\n        tooltip_tooltip,\n        colorBarStyleFill(barStyle_barStyle),\n        horizontalCrosshairRect,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst barParallelSpecPipeline = [\n    pivotAdapter_pivotAdapter(barParallel, pivotBarParallel)\n];\nconst registerBarParallel = ()=>{\n    Builder._advancedPipelineMap.barParallel = barParallelAdvancedPipeline;\n    Builder._specPipelineMap.barParallel = barParallelSpecPipeline;\n};\nconst barPercentAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForBar,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortYBandAxis,\n    sortLegend_sortLegend,\n    barPercentConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst barPercent = [\n    initBar,\n    stackCornerRadius_stackCornerRadius,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    percent,\n    datasetYX,\n    progressive,\n    xLinear,\n    yBand,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    horizontalCrosshairRect,\n    colorBarStyleFill(barStyle_barStyle),\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotBarPercent = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsCol,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initBar,\n        stackCornerRadius_stackCornerRadius,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        percent,\n        datasetYX,\n        yBand,\n        xLinear,\n        label_label,\n        tooltip_tooltip,\n        colorBarStyleFill(barStyle_barStyle),\n        horizontalCrosshairRect,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst barPercentSpecPipeline = [\n    pivotAdapter_pivotAdapter(barPercent, pivotBarPercent)\n];\nconst registerBarPercent = ()=>{\n    Builder._advancedPipelineMap.barPercent = barPercentAdvancedPipeline;\n    Builder._specPipelineMap.barPercent = barPercentSpecPipeline;\n};\nconst areaAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForLine,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortXBandAxis,\n    sortLegend_sortLegend,\n    areaConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initArea = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    result.type = 'area';\n    result.direction = 'vertical';\n    result.yField = foldInfo.measureValue;\n    result.xField = unfoldInfo.encodingX;\n    result.seriesField = isLinearColor(advancedVSeed) ? unfoldInfo.encodingDetail : unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst colorAreaStyleFill = (stylePipe)=>(spec, context)=>{\n        const result = stylePipe(spec, context);\n        const { advancedVSeed } = context;\n        const { datasetReshapeInfo } = advancedVSeed;\n        const { unfoldInfo } = datasetReshapeInfo[0];\n        if (isLinearColor(advancedVSeed)) {\n            if (result?.area?.style) result.area.style.fill = {\n                field: unfoldInfo.encodingColor,\n                scale: 'color'\n            };\n        }\n        return result;\n    };\nconst areaStyle_areaStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { markStyle, datasetReshapeInfo, dataset } = advancedVSeed;\n    const { areaStyle } = markStyle;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const result = {\n        ...spec,\n        area: {\n            visible: true,\n            style: {}\n        }\n    };\n    if (!areaStyle) return result;\n    const areaStyles = Array.isArray(areaStyle) ? areaStyle : [\n        areaStyle\n    ];\n    const group = unfoldInfo.encodingColorId;\n    const areaGroups = groupBy(dataset, (d)=>d[group ?? '']);\n    const customMap = areaStyles.reduce((result, style, index)=>{\n        const { areaColor, areaColorOpacity, areaVisible = true } = style;\n        return {\n            ...result,\n            [`custom${index + 1}`]: {\n                level: index + 1,\n                filter: (datum)=>{\n                    const lineData = areaGroups[datum[group ?? '']];\n                    for (const d of lineData)if (selector_selector(d, style.selector)) return true;\n                    return false;\n                },\n                style: {\n                    visible: areaVisible,\n                    fill: areaColor,\n                    fillOpacity: areaColorOpacity\n                }\n            }\n        };\n    }, {});\n    return {\n        ...result,\n        area: {\n            ...result.area,\n            visible: true,\n            state: {\n                ...customMap\n            }\n        }\n    };\n};\nconst area_area = [\n    initArea,\n    stackInverse,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    verticalCrosshairLine,\n    colorPointStyleFill(pointStyle_pointStyle),\n    pointStateDimensionHover,\n    colorLineStyleFill(lineStyle_lineStyle),\n    colorAreaStyleFill(areaStyle_areaStyle),\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotArea = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initArea,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        stackInverse,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        colorPointStyleFill(pointStyle_pointStyle),\n        pointStateDimensionHover,\n        colorLineStyleFill(lineStyle_lineStyle),\n        colorAreaStyleFill(areaStyle_areaStyle),\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst areaSpecPipeline = [\n    pivotAdapter_pivotAdapter(area_area, pivotArea)\n];\nconst registerArea = ()=>{\n    Builder._advancedPipelineMap.area = areaAdvancedPipeline;\n    Builder._specPipelineMap.area = areaSpecPipeline;\n};\nconst areaPercentAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForLine,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortXBandAxis,\n    sortLegend_sortLegend,\n    areaPercentConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst areaPercent = [\n    initArea,\n    stackInverse,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    percent,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    verticalCrosshairLine,\n    colorPointStyleFill(pointStyle_pointStyle),\n    pointStateDimensionHover,\n    colorLineStyleFill(lineStyle_lineStyle),\n    colorAreaStyleFill(areaStyle_areaStyle),\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotAreaPercent = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initArea,\n        stackInverse,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        percent,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        colorPointStyleFill(pointStyle_pointStyle),\n        pointStateDimensionHover,\n        colorLineStyleFill(lineStyle_lineStyle),\n        colorAreaStyleFill(areaStyle_areaStyle),\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst areaPercentSpecPipeline = [\n    pivotAdapter_pivotAdapter(areaPercent, pivotAreaPercent)\n];\nconst registerAreaPercent = ()=>{\n    Builder._advancedPipelineMap.areaPercent = areaPercentAdvancedPipeline;\n    Builder._specPipelineMap.areaPercent = areaPercentSpecPipeline;\n};\nconst encodingForScatter = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) scatter_generateDimensionEncoding(dimensions, encoding);\n    else scatter_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) scatter_generateMeasureEncoding(measures, encoding);\n    else scatter_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst scatter_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.y = unique(measures.filter((item)=>'xAxis' === item.encoding || 'yAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst scatter_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const dimensionsWithoutMeasureName = dimensions.filter((item)=>item.id !== MeasureName);\n    const uniqueDimIds = unique(dimensionsWithoutMeasureName.map((d)=>d.id));\n    encoding.color = uniqueDimIds.slice(0);\n    encoding.detail = uniqueDimIds.slice(0);\n    encoding.tooltip = uniqueDimIds;\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst scatter_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.y = unique(measures.filter((item)=>'xAxis' === item.encoding || 'yAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n};\nconst scatter_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n    if (0 === encoding.detail.length) encoding.detail = dimensions.filter((item)=>!encoding.x?.includes(item.id)).map((item)=>item.id);\n};\nconst buildMeasuresForScatter = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    if (isMeasureTreeWithChildren(vseed)) {\n        advancedVSeed.measures = vseed.measures;\n        return advancedVSeed;\n    }\n    if (isMeasureTreeWithParentId(vseed)) {\n        advancedVSeed.measures = buildMeasuresForScatter_generateMeasuresByParentId(vseed.measures);\n        return advancedVSeed;\n    }\n    const scatterMeasures = vseed.scatterMeasures ? vseed.scatterMeasures : basicMeasuresToScatterMeasures(advancedVSeed.measures || []);\n    advancedVSeed.measures = scatterMeasuresToMeasureTree(scatterMeasures);\n    return advancedVSeed;\n};\nconst basicMeasuresToScatterMeasures = (basicMeasures)=>{\n    const yMeasures = [];\n    const xMeasures = [];\n    for(let index = 0; index < basicMeasures.length; index++){\n        const item = basicMeasures[index];\n        const encoding = Array.isArray(item.encoding) ? item.encoding : [\n            item.encoding\n        ];\n        const isYAxis = encoding.includes('yAxis');\n        const isXAxis = encoding.includes('xAxis');\n        if (isYAxis) yMeasures.push(item);\n        else if (isXAxis) xMeasures.push(item);\n        else if (0 === index) yMeasures.push(item);\n        else xMeasures.push(item);\n    }\n    return [\n        {\n            id: 'scatterMeasures',\n            xMeasures,\n            yMeasures\n        }\n    ];\n};\nconst scatterMeasuresToMeasureTree = (scatterMeasures)=>{\n    const measureTree = scatterMeasures.map((item, index)=>{\n        const { id, xMeasures, yMeasures } = item;\n        const groupChildren = [];\n        let groupId = `${id}-`;\n        if (xMeasures) {\n            const arrPrimaryMeasures = Array.isArray(xMeasures) ? xMeasures : [\n                xMeasures\n            ];\n            const alias = arrPrimaryMeasures.map((item)=>item.alias || item.id).toString();\n            groupId += alias;\n            groupChildren.push({\n                id: `${index}-x`,\n                alias: arrPrimaryMeasures.map((item)=>item.alias || item.id).toString(),\n                children: arrPrimaryMeasures\n            });\n        }\n        if (yMeasures) {\n            const arrSecondaryMeasures = Array.isArray(yMeasures) ? yMeasures : [\n                yMeasures\n            ];\n            const alias = arrSecondaryMeasures.map((item)=>item.alias || item.id).toString();\n            groupId += alias;\n            groupChildren.push({\n                id: `${index}-y`,\n                alias: arrSecondaryMeasures.map((item)=>item.alias || item.id).toString(),\n                children: arrSecondaryMeasures\n            });\n        }\n        return {\n            id: groupId,\n            alias: groupId,\n            children: groupChildren\n        };\n    });\n    if (1 === scatterMeasures.length) return measureTree[0].children || [];\n    return measureTree;\n};\nconst buildMeasuresForScatter_generateMeasuresByParentId = (measures)=>{\n    const scatterMeasures = [];\n    measures.forEach((item)=>{\n        if (!item.parentId) return;\n        if (!scatterMeasures.find((d)=>d.id === item.parentId)) scatterMeasures.push({\n            id: item.parentId,\n            yMeasures: [],\n            xMeasures: []\n        });\n        const scatterChart = scatterMeasures.find((d)=>d.id === item.parentId);\n        if (!scatterChart || !Array.isArray(scatterChart.yMeasures) || !Array.isArray(scatterChart.xMeasures)) return;\n        const encoding = Array.isArray(item.encoding) ? item.encoding : [\n            item.encoding\n        ];\n        const isX = encoding.includes('xAxis');\n        const isY = encoding.includes('yAxis');\n        const isEmpty = !encoding.length;\n        if (isY) scatterChart.yMeasures.push(item);\n        else if (isX) scatterChart.xMeasures.push(item);\n        else if (isEmpty) if (0 === scatterChart.yMeasures.length) scatterChart.yMeasures.push(item);\n        else scatterChart.xMeasures.push(item);\n    });\n    return scatterMeasuresToMeasureTree(scatterMeasures);\n};\nconst reshapeWithScatterEncoding = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures, encoding, chartType } = advancedVSeed;\n    if (!measures || !dimensions || !dataset || !encoding) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    if (measures.length > 2) throw new Error('measures can not be more than 2');\n    const foldInfoList = [];\n    const unfoldInfoList = [];\n    const datasets = [];\n    const xMeasures = measures[0];\n    const yMeasures = measures[1] || xMeasures;\n    if (xMeasures && xMeasures.children) {\n        const { dataset: newDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, uniqueBy(dimensions, (d)=>d.id), uniqueBy(xMeasures.children, (d)=>d.id), encoding, {\n            foldMeasureValue: FoldXMeasureValue,\n            colorItemAsId: true,\n            colorMeasureId: getColorMeasureId(advancedVSeed)\n        });\n        datasets.push(newDataset);\n        foldInfoList.push(foldInfo);\n        unfoldInfoList.push(unfoldInfo);\n    }\n    if (yMeasures && yMeasures.children) {\n        const { dataset: newDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(datasets[0], uniqueBy(dimensions, (d)=>d.id), uniqueBy(yMeasures.children, (d)=>d.id), encoding, {\n            foldMeasureValue: FoldYMeasureValue,\n            colorItemAsId: true,\n            colorMeasureId: getColorMeasureId(advancedVSeed)\n        });\n        datasets[0] = newDataset;\n        foldInfoList.push(foldInfo);\n        unfoldInfoList.push(unfoldInfo);\n    }\n    const unfoldInfo = {\n        ...unfoldInfoList[0],\n        colorItems: unfoldInfoList.flatMap((d)=>d.colorItems),\n        colorIdMap: unfoldInfoList.reduce((prev, cur)=>({\n                ...prev,\n                ...cur.colorIdMap\n            }), {})\n    };\n    return {\n        ...result,\n        dataset: datasets[0],\n        datasetReshapeInfo: [\n            {\n                id: String(chartType),\n                index: 0,\n                foldInfo: foldInfoList[0],\n                foldInfoList: foldInfoList,\n                unfoldInfo: unfoldInfo\n            }\n        ]\n    };\n};\nconst pivotReshapeWithScatterEncoding = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures, encoding, chartType } = advancedVSeed;\n    if (!measures || !dimensions || !dataset || !encoding) return result;\n    const measureGroups = [];\n    const depth = measureDepth(measures);\n    if (3 === depth) measures.forEach((measure)=>{\n        measureGroups.push(measure.children);\n    });\n    else if (2 === depth) measureGroups.push(measures);\n    const datasetList = [];\n    const datasetReshapeInfo = [];\n    measureGroups.forEach((measures, index)=>{\n        if (0 === measures.length) throw new Error('measures can not be empty');\n        if (measures.length > 2) throw new Error('measures can not be more than 2');\n        const foldInfoList = [];\n        const unfoldInfoList = [];\n        const datasets = [];\n        const xMeasures = measures[0];\n        const yMeasures = measures[1] || xMeasures;\n        if (xMeasures && xMeasures.children) {\n            const { dataset: newDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, dimensions, xMeasures.children, encoding, {\n                foldMeasureValue: `${FoldXMeasureValue}${index}`,\n                colorItemAsId: true,\n                colorMeasureId: getColorMeasureId(advancedVSeed)\n            });\n            datasets.push(newDataset);\n            foldInfoList.push(foldInfo);\n            unfoldInfoList.push(unfoldInfo);\n        }\n        if (yMeasures && yMeasures.children) {\n            const { dataset: newDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, dimensions, yMeasures.children, encoding, {\n                foldMeasureValue: `${FoldYMeasureValue}${index}`,\n                colorItemAsId: true,\n                colorMeasureId: getColorMeasureId(advancedVSeed)\n            });\n            datasets.push(newDataset);\n            foldInfoList.push(foldInfo);\n            unfoldInfoList.push(unfoldInfo);\n        }\n        const unfoldInfo = {\n            ...unfoldInfoList[0],\n            colorItems: unfoldInfoList.flatMap((d)=>d.colorItems),\n            colorIdMap: unfoldInfoList.reduce((prev, cur)=>({\n                    ...prev,\n                    ...cur.colorIdMap\n                }), {})\n        };\n        const reshapeInfo = {\n            id: `${chartType}-${index}`,\n            index,\n            foldInfo: foldInfoList[0],\n            foldInfoList: foldInfoList,\n            unfoldInfo: unfoldInfo\n        };\n        datasetReshapeInfo.push(reshapeInfo);\n        datasetList.push(datasets[0].map((d, index)=>({\n                ...d,\n                ...datasets[1]?.[index] || {}\n            })));\n    });\n    return {\n        ...result,\n        dataset: datasetList,\n        datasetReshapeInfo: datasetReshapeInfo\n    };\n};\nconst scatterAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForScatter,\n    buildMeasuresForScatter,\n    pivotAdapter([\n        reshapeWithScatterEncoding\n    ], [\n        pivotReshapeWithScatterEncoding\n    ]),\n    scatterConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initScatter = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfoList } = datasetReshapeInfo[0];\n    result.type = 'scatter';\n    result.direction = 'vertical';\n    result.xField = foldInfoList?.[0].measureValue;\n    if (foldInfoList?.[1]) result.yField = foldInfoList[1].measureValue;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst datasetScatter = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const id = datasetReshapeInfo[0].id;\n    const fields = {};\n    return {\n        ...spec,\n        data: {\n            id,\n            values: isPivotChart(vseed) ? void 0 : advancedVSeed.dataset.flat(),\n            fields: fields\n        }\n    };\n};\nconst horizontalCrosshairLine = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.crosshairLine;\n    if (!config) return result;\n    if (!result.crosshair) result.crosshair = {};\n    const visible = config.visible || true;\n    const lineColor = config.lineColor || void 0;\n    const labelColor = config.labelColor || void 0;\n    const labelVisible = config.labelVisible || void 0;\n    const labelBackgroundColor = config.labelBackgroundColor || void 0;\n    const crosshair = result.crosshair;\n    crosshair.yField = {\n        visible,\n        line: {\n            type: 'line',\n            style: {\n                lineWidth: 1,\n                opacity: 1,\n                stroke: lineColor,\n                lineDash: [\n                    4,\n                    2\n                ]\n            }\n        },\n        label: {\n            visible: labelVisible,\n            labelBackground: {\n                visible: labelVisible,\n                style: {\n                    fill: labelBackgroundColor\n                }\n            },\n            style: {\n                fill: labelColor\n            }\n        }\n    };\n    return result;\n};\nconst scatter = [\n    initScatter,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetScatter,\n    progressive,\n    xLinear,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    verticalCrosshairLine,\n    horizontalCrosshairLine,\n    colorPointStyleFill(pointStyle_pointStyle),\n    pointStateHover,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotScatter = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initScatter,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetScatter,\n        progressive,\n        xLinear,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        horizontalCrosshairLine,\n        colorPointStyleFill(pointStyle_pointStyle),\n        pointStateHover,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst scatterSpecPipeline = [\n    pivotAdapter_pivotAdapter(scatter, pivotScatter)\n];\nconst registerScatter = ()=>{\n    Builder._advancedPipelineMap.scatter = scatterAdvancedPipeline;\n    Builder._specPipelineMap.scatter = scatterSpecPipeline;\n};\nconst encodingForDualAxis = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) dualAxis_generateDimensionEncoding(dimensions, encoding);\n    else dualAxis_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) dualAxis_generateMeasureEncoding(measures, encoding);\n    else dualAxis_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst dualAxis_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.y = unique(measures.filter((item)=>'primaryYAxis' === item.encoding || 'secondaryYAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst dualAxis_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const onlyMeasureName = 1 === dimensions.length && dimensions.find((item)=>item.id === MeasureName);\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.x = uniqueDimIds.slice(0, 1);\n    encoding.color = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.detail = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.tooltip = uniqueDimIds;\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst dualAxis_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.y = unique(measures.filter((item)=>'primaryYAxis' === item.encoding || 'secondaryYAxis' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n    return encoding;\n};\nconst dualAxis_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.x = unique(dimensions.filter((item)=>'xAxis' === item.encoding).map((item)=>item.id));\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.x.length) encoding.x = [\n        dimensions[0].id\n    ];\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n    if (0 === encoding.detail.length) encoding.detail = dimensions.filter((item)=>!encoding.x?.includes(item.id)).map((item)=>item.id);\n};\nconst buildMeasuresForDualAxis = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    if (isMeasureTreeWithChildren(vseed)) {\n        advancedVSeed.measures = vseed.measures;\n        return advancedVSeed;\n    }\n    if (isMeasureTreeWithParentId(vseed)) {\n        advancedVSeed.measures = buildMeasuresForDualAxis_generateMeasuresByParentId(vseed.measures);\n        return advancedVSeed;\n    }\n    const dualMeasures = vseed.dualMeasures ? vseed.dualMeasures : basicMeasuresToDualMeasures(advancedVSeed.measures || []);\n    advancedVSeed.measures = dualMeasuresToMeasureTree(dualMeasures);\n    return advancedVSeed;\n};\nconst basicMeasuresToDualMeasures = (basicMeasures)=>{\n    const primaryMeasures = [];\n    const secondaryMeasures = [];\n    for(let index = 0; index < basicMeasures.length; index++){\n        const item = basicMeasures[index];\n        const encoding = Array.isArray(item.encoding) ? item.encoding : [\n            item.encoding\n        ];\n        const isPrimaryYAxis = encoding.includes('primaryYAxis');\n        const isSecondaryYAxis = encoding.includes('secondaryYAxis');\n        if (isPrimaryYAxis) primaryMeasures.push(item);\n        else if (isSecondaryYAxis) secondaryMeasures.push(item);\n        else if (0 === index) primaryMeasures.push(item);\n        else secondaryMeasures.push(item);\n    }\n    return [\n        {\n            id: 'dualMeasures',\n            primaryMeasures,\n            secondaryMeasures\n        }\n    ];\n};\nconst dualMeasuresToMeasureTree = (dualMeasures)=>{\n    const measureTree = dualMeasures.map((item, index)=>{\n        const { id, primaryMeasures, secondaryMeasures } = item;\n        const groupChildren = [];\n        let groupId = `${id}-`;\n        if (primaryMeasures) {\n            const arrPrimaryMeasures = Array.isArray(primaryMeasures) ? primaryMeasures : [\n                primaryMeasures\n            ];\n            const alias = arrPrimaryMeasures.map((item)=>item.alias || item.id).toString();\n            groupId += alias;\n            groupChildren.push({\n                id: `${index}-primary`,\n                alias: arrPrimaryMeasures.map((item)=>item.alias || item.id).toString(),\n                children: arrPrimaryMeasures\n            });\n        }\n        if (secondaryMeasures) {\n            const arrSecondaryMeasures = Array.isArray(secondaryMeasures) ? secondaryMeasures : [\n                secondaryMeasures\n            ];\n            const alias = arrSecondaryMeasures.map((item)=>item.alias || item.id).toString();\n            groupId += alias;\n            groupChildren.push({\n                id: `${index}-secondary`,\n                alias: arrSecondaryMeasures.map((item)=>item.alias || item.id).toString(),\n                children: arrSecondaryMeasures\n            });\n        }\n        return {\n            id: groupId,\n            alias: groupId,\n            children: groupChildren\n        };\n    });\n    if (1 === dualMeasures.length) return measureTree[0].children || [];\n    return measureTree;\n};\nconst buildMeasuresForDualAxis_generateMeasuresByParentId = (measures)=>{\n    const dualMeasures = [];\n    measures.forEach((item)=>{\n        if (!item.parentId) return;\n        if (!dualMeasures.find((d)=>d.id === item.parentId)) dualMeasures.push({\n            id: item.parentId,\n            primaryMeasures: [],\n            secondaryMeasures: []\n        });\n        const dualChart = dualMeasures.find((d)=>d.id === item.parentId);\n        if (!dualChart || !Array.isArray(dualChart.primaryMeasures) || !Array.isArray(dualChart.secondaryMeasures)) return;\n        const encoding = Array.isArray(item.encoding) ? item.encoding : [\n            item.encoding\n        ];\n        const isPrimary = encoding.includes('primaryYAxis');\n        const isSecondary = encoding.includes('secondaryYAxis');\n        const isEmpty = !item.encoding;\n        if (isPrimary) dualChart.primaryMeasures.push(item);\n        else if (isSecondary) dualChart.secondaryMeasures.push(item);\n        else if (isEmpty) if (0 === dualChart.primaryMeasures.length) dualChart.primaryMeasures.push(item);\n        else dualChart.secondaryMeasures.push(item);\n    });\n    return dualMeasuresToMeasureTree(dualMeasures);\n};\nconst reshapeWithDualEncoding = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures, encoding, chartType } = advancedVSeed;\n    if (!measures || !dimensions || !dataset || !encoding) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    if (measures.length > 2) throw new Error('measures can not be more than 2');\n    const foldInfoList = [];\n    const unfoldInfoList = [];\n    const datasets = [];\n    const primaryMeasures = measures[0];\n    const secondaryMeasures = measures[1] || [];\n    const hasEncoding = (vseed.dimensions || []).some((item)=>item.encoding);\n    if (primaryMeasures && primaryMeasures.children) {\n        const { dataset: newDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, dimensions, primaryMeasures.children, encoding, {\n            colorItemAsId: hasEncoding,\n            foldMeasureValue: FoldPrimaryMeasureValue,\n            colorMeasureId: getColorMeasureId(advancedVSeed)\n        });\n        datasets.push(newDataset);\n        foldInfoList.push(foldInfo);\n        unfoldInfoList.push(unfoldInfo);\n    }\n    if (secondaryMeasures && secondaryMeasures.children) {\n        const { dataset: newDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, dimensions, secondaryMeasures.children, encoding, {\n            foldMeasureValue: FoldSecondaryMeasureValue,\n            colorMeasureId: getColorMeasureId(advancedVSeed)\n        });\n        datasets.push(newDataset);\n        foldInfoList.push(foldInfo);\n        unfoldInfoList.push(unfoldInfo);\n    }\n    const unfoldInfo = {\n        ...unfoldInfoList[0],\n        colorItems: unfoldInfoList.flatMap((d)=>d.colorItems),\n        colorIdMap: unfoldInfoList.reduce((prev, cur)=>({\n                ...prev,\n                ...cur.colorIdMap\n            }), {})\n    };\n    return {\n        ...result,\n        dataset: datasets,\n        datasetReshapeInfo: [\n            {\n                id: String(chartType),\n                index: 0,\n                foldInfo: foldInfoList[0],\n                foldInfoList: foldInfoList,\n                unfoldInfo: unfoldInfo\n            }\n        ]\n    };\n};\nconst pivotReshapeWithDualEncoding = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures, encoding, chartType } = advancedVSeed;\n    if (!measures || !dimensions || !dataset || !encoding) return result;\n    const hasEncoding = (vseed.dimensions || []).some((item)=>item.encoding);\n    const datasetList = [];\n    const datasetReshapeInfo = [];\n    const measureGroups = [];\n    const depth = measureDepth(measures);\n    if (3 === depth) measures.forEach((measure)=>{\n        measureGroups.push(measure.children);\n    });\n    else if (2 === depth) measureGroups.push(measures);\n    measureGroups.forEach((measures, index)=>{\n        if (0 === measures.length) throw new Error('measures can not be empty');\n        if (measures.length > 2) throw new Error('measures can not be more than 2');\n        const foldInfoList = [];\n        const unfoldInfoList = [];\n        const datasets = [];\n        const primaryMeasures = measures[0];\n        const secondaryMeasures = measures[1] || [];\n        if (primaryMeasures && primaryMeasures.children) {\n            const { dataset: newDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, dimensions, primaryMeasures.children, encoding, {\n                colorItemAsId: hasEncoding,\n                foldMeasureValue: `${FoldPrimaryMeasureValue}${index}`,\n                colorMeasureId: getColorMeasureId(advancedVSeed)\n            });\n            datasets.push(newDataset);\n            foldInfoList.push(foldInfo);\n            unfoldInfoList.push(unfoldInfo);\n        }\n        if (secondaryMeasures && secondaryMeasures.children) {\n            const { dataset: newDataset, foldInfo, unfoldInfo } = dataReshapeByEncoding(dataset, dimensions, secondaryMeasures.children, encoding, {\n                foldMeasureValue: `${FoldSecondaryMeasureValue}${index}`,\n                colorMeasureId: getColorMeasureId(advancedVSeed)\n            });\n            datasets.push(newDataset);\n            foldInfoList.push(foldInfo);\n            unfoldInfoList.push(unfoldInfo);\n        }\n        const unfoldInfo = {\n            ...unfoldInfoList[0],\n            colorItems: unfoldInfoList.flatMap((d)=>d.colorItems),\n            colorIdMap: unfoldInfoList.reduce((prev, cur)=>({\n                    ...prev,\n                    ...cur.colorIdMap\n                }), {})\n        };\n        const reshapeInfo = {\n            id: `${chartType}-${index}`,\n            index,\n            foldInfo: foldInfoList[0],\n            foldInfoList: foldInfoList,\n            unfoldInfo: unfoldInfo\n        };\n        datasetReshapeInfo.push(reshapeInfo);\n        datasetList.push(datasets.flat(2));\n    });\n    return {\n        ...result,\n        dataset: datasetList,\n        datasetReshapeInfo: datasetReshapeInfo\n    };\n};\nconst dualAxisConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'color',\n        'label',\n        'legend',\n        'tooltip',\n        'dualChartType',\n        'alignTicks',\n        'primaryYAxis',\n        'secondaryYAxis',\n        'crosshairLine'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst dualAxisAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForDualAxis,\n    buildMeasuresForDualAxis,\n    pivotAdapter([\n        reshapeWithDualEncoding\n    ], [\n        pivotReshapeWithDualEncoding\n    ]),\n    sortXBandAxis,\n    sortLegend_sortLegend,\n    dualAxisConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst series = (...args)=>{\n    const result = {\n        type: 'common',\n        padding: 0,\n        region: [\n            {\n                clip: true\n            }\n        ]\n    };\n    return (_, context)=>{\n        result.series = args.map((pipeline)=>execPipeline(pipeline, context, {}));\n        return result;\n    };\n};\nconst seriesDualAxis = (...args)=>{\n    const result = {\n        type: 'common',\n        padding: 0,\n        region: [\n            {\n                clip: true\n            }\n        ]\n    };\n    const createDualContext = (context, index)=>{\n        const { advancedVSeed } = context;\n        const dataset = advancedVSeed.dataset[index];\n        return {\n            ...context,\n            advancedVSeed: {\n                ...advancedVSeed,\n                dataset: dataset\n            }\n        };\n    };\n    return (_, context)=>{\n        result.series = args.map((pipeline, index)=>{\n            const seriesContext = createDualContext(context, index);\n            return execPipeline(pipeline, seriesContext, {});\n        });\n        return result;\n    };\n};\nconst initDualAxisPrimary = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfoList, id } = datasetReshapeInfo[0];\n    result.id = `${id}-primary-series`;\n    result.type = 'bar';\n    result.direction = 'vertical';\n    result.xField = unfoldInfo.encodingX;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.yField = foldInfoList?.[0].measureValue;\n    result.animation = true;\n    return result;\n};\nconst initDualAxisSecondary = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfoList, id } = datasetReshapeInfo[0];\n    result.id = `${id}-secondary-series`;\n    result.type = 'line';\n    result.direction = 'vertical';\n    result.xField = unfoldInfo.encodingX;\n    if (foldInfoList?.[1]) result.yField = foldInfoList[1].measureValue;\n    result.seriesField = isLinearColor(advancedVSeed) ? unfoldInfo.encodingDetail : unfoldInfo.encodingColorId;\n    result.animation = true;\n    return result;\n};\nconst dualChartTypePrimary = (spec, context)=>{\n    const result = {\n        ...spec,\n        zIndex: DUAL_AXIS_CHART_NON_COLUMN_Z_INDEX\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const index = datasetReshapeInfo[0].index;\n    const config = advancedVSeed.config?.[chartType]?.dualChartType || {\n        primary: 'column',\n        secondary: 'line'\n    };\n    const primary = Array.isArray(config) ? config[index].primary || config[0].primary : config.primary;\n    const secondary = Array.isArray(config) ? config[index].secondary || config[0].secondary : config.secondary;\n    const bothColumn = 'column' === primary && 'column' === secondary;\n    const type = bothColumn ? 'columnParallel' : primary;\n    switch(type){\n        case 'line':\n            result.type = 'line';\n            break;\n        case 'column':\n            result.type = 'bar';\n            result.zIndex = DUAL_AXIS_CHART_COLUMN_Z_INDEX;\n            break;\n        case 'columnParallel':\n            {\n                const columnSpec = result;\n                if (Array.isArray(columnSpec.xField)) columnSpec.xField.push(datasetReshapeInfo[0].unfoldInfo.encodingDetail);\n                else if (columnSpec.xField) columnSpec.xField = [\n                    columnSpec.xField,\n                    datasetReshapeInfo[0].unfoldInfo.encodingDetail\n                ];\n                columnSpec.type = 'bar';\n                result.zIndex = DUAL_AXIS_CHART_COLUMN_Z_INDEX;\n                break;\n            }\n        case 'columnPercent':\n            result.type = 'bar';\n            result.percent = true;\n            break;\n        case 'area':\n            result.type = 'area';\n            break;\n        case 'areaPercent':\n            result.type = 'area';\n            result.percent = true;\n            break;\n        case 'scatter':\n            result.type = 'scatter';\n            break;\n        default:\n            result.type = primary;\n    }\n    return result;\n};\nconst dualChartTypeSecondary = (spec, context)=>{\n    const result = {\n        ...spec,\n        zIndex: DUAL_AXIS_CHART_NON_COLUMN_Z_INDEX\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const config = advancedVSeed.config?.[chartType]?.dualChartType || {\n        primary: 'column',\n        secondary: 'line'\n    };\n    const index = datasetReshapeInfo[0].index;\n    const primary = Array.isArray(config) ? config[index].primary || config[0].primary : config.primary;\n    const secondary = Array.isArray(config) ? config[index].secondary || config[0].secondary : config.secondary;\n    const bothColumn = 'column' === primary && 'column' === secondary;\n    const type = bothColumn ? 'columnParallel' : secondary;\n    switch(type){\n        case 'line':\n            result.type = 'line';\n            break;\n        case 'column':\n            result.type = 'bar';\n            result.zIndex = DUAL_AXIS_CHART_COLUMN_Z_INDEX;\n            break;\n        case 'columnParallel':\n            {\n                const columnSpec = result;\n                if (Array.isArray(columnSpec.xField)) columnSpec.xField.push(datasetReshapeInfo[0].unfoldInfo.encodingDetail);\n                else if (columnSpec.xField) columnSpec.xField = [\n                    columnSpec.xField,\n                    datasetReshapeInfo[0].unfoldInfo.encodingDetail\n                ];\n                columnSpec.type = 'bar';\n                result.zIndex = DUAL_AXIS_CHART_COLUMN_Z_INDEX;\n                break;\n            }\n        case 'columnPercent':\n            result.type = 'bar';\n            result.percent = true;\n            break;\n        case 'area':\n            result.type = 'area';\n            break;\n        case 'areaPercent':\n            result.type = 'area';\n            result.percent = true;\n            break;\n        case 'scatter':\n            result.type = 'scatter';\n            break;\n        default:\n            result.type = secondary;\n    }\n    return result;\n};\nconst datasetPrimary = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { analysis, datasetReshapeInfo } = advancedVSeed;\n    const orderMapping = analysis?.orderMapping || {};\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const x = unfoldInfo.encodingX;\n    const colorId = unfoldInfo.encodingColorId;\n    const id = datasetReshapeInfo[0].id;\n    const fields = {};\n    if (x) {\n        const order = orderMapping[x];\n        if (order) fields[x] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[x] = {\n            sortIndex: 0\n        };\n    }\n    if (colorId) {\n        const order = orderMapping[colorId];\n        if (order) fields[colorId] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[colorId] = {\n            sortIndex: 0\n        };\n    }\n    return {\n        ...spec,\n        data: {\n            id: `${id}-primary-dataset`,\n            values: isPivotChart(vseed) ? void 0 : advancedVSeed.dataset,\n            fields: fields\n        }\n    };\n};\nconst datasetSecondary = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { analysis, datasetReshapeInfo } = advancedVSeed;\n    const orderMapping = analysis?.orderMapping || {};\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const x = unfoldInfo.encodingX;\n    const colorId = unfoldInfo.encodingColorId;\n    const id = datasetReshapeInfo[0].id;\n    const fields = {};\n    if (x) {\n        const order = orderMapping[x];\n        if (order) fields[x] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[x] = {\n            sortIndex: 0\n        };\n    }\n    if (colorId) {\n        const order = orderMapping[colorId];\n        if (order) fields[colorId] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[colorId] = {\n            sortIndex: 0\n        };\n    }\n    return {\n        ...spec,\n        data: {\n            id: `${id}-secondary-dataset`,\n            values: isPivotChart(vseed) ? void 0 : advancedVSeed.dataset,\n            fields: fields\n        }\n    };\n};\nconst labelPrimary = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, locale } = advancedVSeed;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.label) return result;\n    const foldInfoList = datasetReshapeInfo[0].foldInfoList;\n    const { measureId, measureValue } = foldInfoList[0];\n    const { label } = baseConfig;\n    const { enable } = label;\n    result.label = {\n        visible: enable,\n        formatMethod: (value, datum)=>{\n            const result = [];\n            const formatValue = (value)=>{\n                const id = datum[measureId];\n                const measure = findMeasureById(measures, id);\n                if (!measure) return value;\n                const { format = {}, autoFormat = true } = measure;\n                if (!external_remeda_isEmpty(format)) {\n                    const formatter = createFormatter(format);\n                    return formatter(value);\n                }\n                if (autoFormat) return autoFormatter(value, locale);\n                return String(value);\n            };\n            result.push(formatValue(datum[measureValue]));\n            return result.join(' ');\n        }\n    };\n    return result;\n};\nconst labelSecondary = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, locale } = advancedVSeed;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.label) return result;\n    if (isNullish(datasetReshapeInfo[0].foldInfoList?.[1])) return result;\n    const foldInfoList = datasetReshapeInfo[0].foldInfoList;\n    const { measureId, measureValue } = foldInfoList[1];\n    const { label } = baseConfig;\n    const { enable } = label;\n    result.label = {\n        visible: enable,\n        formatMethod: (value, datum)=>{\n            const result = [];\n            const formatValue = (value)=>{\n                const id = datum[measureId];\n                const measure = findMeasureById(measures, id);\n                if (!measure) return value;\n                const { format = {}, autoFormat = true } = measure;\n                if (!external_remeda_isEmpty(format)) {\n                    const formatter = createFormatter(format);\n                    return formatter(value);\n                }\n                if (autoFormat) return autoFormatter(value, locale);\n                return String(value);\n            };\n            result.push(formatValue(datum[measureValue]));\n            return result.join(' ');\n        }\n    };\n    return result;\n};\nconst tooltipPrimary = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, chartType, locale, dimensions } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    const { tooltip = {\n        enable: true\n    } } = baseConfig;\n    const { enable } = tooltip;\n    const foldInfoList = datasetReshapeInfo[0].foldInfoList;\n    const unfoldInfo = datasetReshapeInfo[0].unfoldInfo;\n    const { measureId, measureValue, measureName } = foldInfoList[0];\n    const { encodingColor: colorName } = unfoldInfo;\n    result.tooltip = {\n        visible: enable,\n        mark: {\n            title: {\n                visible: true\n            },\n            content: [\n                ...dimensions.map((item)=>({\n                        visible: true,\n                        hasShape: true,\n                        shapeType: 'rectRound',\n                        key: (datum)=>{\n                            if (item.alias || item.id) return item.alias || item.id;\n                            return datum && datum[item.id];\n                        },\n                        value: (datum)=>datum && datum[item.id]\n                    })),\n                {\n                    visible: true,\n                    hasShape: true,\n                    key: (datum)=>datum && datum[measureName || colorName] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const value = datum[measureValue];\n                        const id = datum[measureId];\n                        const measure = findMeasureById(measures, id);\n                        if (!measure) return String(value);\n                        const { format = {}, autoFormat = true } = measure;\n                        if (!external_remeda_isEmpty(format)) {\n                            const formatter = createFormatter(format);\n                            return formatter(value);\n                        }\n                        if (autoFormat) return autoFormatter(value, locale);\n                        return String(value);\n                    }\n                }\n            ]\n        },\n        dimension: {\n            content: [\n                {\n                    visible: true,\n                    key: (datum)=>datum && datum[colorName] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const value = datum[measureValue];\n                        const id = datum[measureId];\n                        const measure = findMeasureById(measures, id);\n                        if (!measure) return String(value);\n                        const { format = {}, autoFormat = true } = measure;\n                        if (!external_remeda_isEmpty(format)) {\n                            const formatter = createFormatter(format);\n                            return formatter(value);\n                        }\n                        if (autoFormat) return autoFormatter(value, locale);\n                        return String(value);\n                    },\n                    shapeType: 'rectRound'\n                }\n            ]\n        }\n    };\n    return result;\n};\nconst tooltipSecondary = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, chartType, locale, dimensions } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    const { tooltip = {\n        enable: true\n    } } = baseConfig;\n    const { enable } = tooltip;\n    if (isNullish(datasetReshapeInfo[0].foldInfoList?.[1])) return result;\n    const foldInfoList = datasetReshapeInfo[0].foldInfoList;\n    const unfoldInfo = datasetReshapeInfo[0].unfoldInfo;\n    const { measureId, measureValue, measureName } = foldInfoList[1];\n    const { encodingColorId } = unfoldInfo;\n    result.tooltip = {\n        visible: enable,\n        mark: {\n            title: {\n                visible: true\n            },\n            content: [\n                ...dimensions.map((item)=>({\n                        visible: true,\n                        hasShape: true,\n                        shapeType: 'rectRound',\n                        key: (datum)=>{\n                            if (item.alias || item.id) return item.alias || item.id;\n                            return datum && datum[item.id];\n                        },\n                        value: (datum)=>datum && datum[item.id]\n                    })),\n                {\n                    visible: true,\n                    hasShape: true,\n                    key: (datum)=>datum && datum[measureName || encodingColorId] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const value = datum[measureValue];\n                        const id = datum[measureId];\n                        const measure = findMeasureById(measures, id);\n                        if (!measure) return String(value);\n                        const { format = {}, autoFormat = true } = measure;\n                        if (!external_remeda_isEmpty(format)) {\n                            const formatter = createFormatter(format);\n                            return formatter(value);\n                        }\n                        if (autoFormat) return autoFormatter(value, locale);\n                        return String(value);\n                    }\n                }\n            ]\n        },\n        dimension: {\n            content: [\n                {\n                    visible: true,\n                    key: (datum)=>datum && datum[encodingColorId] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const value = datum[measureValue];\n                        const id = datum[measureId];\n                        const measure = findMeasureById(measures, id);\n                        if (!measure) return String(value);\n                        const { format = {}, autoFormat = true } = measure;\n                        if (!external_remeda_isEmpty(format)) {\n                            const formatter = createFormatter(format);\n                            return formatter(value);\n                        }\n                        if (autoFormat) return autoFormatter(value, locale);\n                        return String(value);\n                    },\n                    shapeType: 'rectRound'\n                }\n            ]\n        }\n    };\n    return result;\n};\nconst yLinearPrimary = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const { locale, datasetReshapeInfo } = advancedVSeed;\n    const { index, id: reshapeInfoId, foldInfoList } = datasetReshapeInfo[0];\n    const primaryYAxis = advancedVSeed.config?.[chartType]?.primaryYAxis;\n    const yAxisConfig = Array.isArray(primaryYAxis) ? primaryYAxis[index] || primaryYAxis[0] : primaryYAxis;\n    const alignTicks = advancedVSeed.config?.[chartType]?.alignTicks;\n    const alignTicksConfig = Array.isArray(alignTicks) ? alignTicks[index] || alignTicks[0] : alignTicks;\n    if (foldInfoList?.[0] && external_remeda_isEmpty(foldInfoList[0].foldMap)) return result;\n    const id = `${reshapeInfoId}-primary-axis`;\n    const seriesIds = [\n        `${reshapeInfoId}-primary-series`,\n        `${reshapeInfoId}-secondary-series`\n    ];\n    const seriesId = alignTicksConfig ? seriesIds : seriesIds[0];\n    if (!result.axes) result.axes = [];\n    if (!yAxisConfig) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                id,\n                seriesId,\n                type: 'linear',\n                orient: 'left'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, zero, nice, inverse, max, min, log, logBase = 10 } = yAxisConfig;\n    const linearAxis = {\n        visible,\n        id,\n        seriesId,\n        type: log ? 'log' : 'linear',\n        base: logBase,\n        orient: 'left',\n        nice,\n        zero: log ? false : zero,\n        inverse,\n        max,\n        min,\n        label: {\n            visible: label?.visible,\n            formatMethod: (value)=>autoFormatter(value, locale),\n            style: {\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            }\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        innerOffset: {\n            top: LINEAR_AXIS_INNER_OFFSET_TOP\n        }\n    };\n    result.axes = [\n        ...result.axes,\n        linearAxis\n    ];\n    return result;\n};\nconst yLinearSecondary = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const { locale, datasetReshapeInfo } = advancedVSeed;\n    const { index, id: reshapeInfoId, foldInfoList } = datasetReshapeInfo[0];\n    const secondaryYAxis = advancedVSeed.config?.[chartType]?.secondaryYAxis;\n    const yAxisConfig = Array.isArray(secondaryYAxis) ? secondaryYAxis[index] || secondaryYAxis[0] : secondaryYAxis;\n    const alignTicks = advancedVSeed.config?.[chartType]?.alignTicks;\n    const alignTicksConfig = Array.isArray(alignTicks) ? alignTicks[index] || alignTicks[0] : alignTicks;\n    if (isNullish(foldInfoList?.[1])) return result;\n    const sync = {\n        axisId: `${reshapeInfoId}-primary-axis`,\n        zeroAlign: true\n    };\n    const id = `${reshapeInfoId}-secondary-axis`;\n    const seriesIds = [\n        `${reshapeInfoId}-primary-series`,\n        `${reshapeInfoId}-secondary-series`\n    ];\n    const seriesId = alignTicksConfig ? seriesIds : seriesIds[1];\n    if (!result.axes) result.axes = [];\n    if (!yAxisConfig) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                id,\n                seriesId,\n                type: 'linear',\n                orient: 'right',\n                sync\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, zero, nice, inverse, max, min, log, logBase = 10 } = yAxisConfig;\n    const linearAxis = {\n        visible,\n        id,\n        seriesId,\n        sync,\n        type: log ? 'log' : 'linear',\n        base: logBase,\n        orient: 'right',\n        nice,\n        zero: log ? false : zero,\n        inverse,\n        max,\n        min,\n        label: {\n            visible: label?.visible,\n            formatMethod: (value)=>autoFormatter(value, locale),\n            style: {\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            }\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        innerOffset: {\n            top: LINEAR_AXIS_INNER_OFFSET_TOP\n        }\n    };\n    result.axes = [\n        ...result.axes,\n        linearAxis\n    ];\n    return result;\n};\nconst linearColorForDualAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, chartType } = advancedVSeed;\n    const { unfoldInfo, id } = datasetReshapeInfo[0];\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.color) return result;\n    const { color } = baseConfig;\n    const { colorScheme, linearColorScheme } = color;\n    result.color = {\n        type: 'linear',\n        range: linearColorScheme || colorScheme || [],\n        domain: [\n            {\n                dataId: `${id}-primary-dataset`,\n                fields: [\n                    unfoldInfo.encodingColor\n                ]\n            },\n            {\n                dataId: `${id}-secondary-dataset`,\n                fields: [\n                    unfoldInfo.encodingColor\n                ]\n            }\n        ]\n    };\n    return result;\n};\nconst dualAxis = [\n    seriesDualAxis([\n        initDualAxisPrimary,\n        dualChartTypePrimary,\n        datasetPrimary,\n        labelPrimary,\n        tooltipPrimary,\n        progressive,\n        colorBarStyleFill(barStyle_barStyle),\n        colorPointStyleFill(pointStyle_pointStyle),\n        pointStateDimensionHover,\n        colorLineStyleFill(lineStyle_lineStyle),\n        colorAreaStyleFill(areaStyle_areaStyle)\n    ], [\n        initDualAxisSecondary,\n        dualChartTypeSecondary,\n        datasetSecondary,\n        labelSecondary,\n        tooltipSecondary,\n        progressive,\n        colorBarStyleFill(barStyle_barStyle),\n        colorPointStyleFill(pointStyle_pointStyle),\n        pointStateDimensionHover,\n        colorLineStyleFill(lineStyle_lineStyle),\n        colorAreaStyleFill(areaStyle_areaStyle)\n    ]),\n    xBand,\n    yLinearPrimary,\n    yLinearSecondary,\n    colorAdapter(color_color, linearColorForDualAxis),\n    colorAdapter(discreteLegend, colorLegend),\n    background_backgroundColor,\n    verticalCrosshairRect,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotDualAxis = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        series([\n            initDualAxisPrimary,\n            dualChartTypePrimary,\n            datasetPrimary,\n            labelPrimary,\n            tooltipPrimary,\n            progressive,\n            colorBarStyleFill(barStyle_barStyle),\n            colorPointStyleFill(pointStyle_pointStyle),\n            pointStateDimensionHover,\n            colorLineStyleFill(lineStyle_lineStyle),\n            colorAreaStyleFill(areaStyle_areaStyle)\n        ], [\n            initDualAxisSecondary,\n            dualChartTypeSecondary,\n            datasetSecondary,\n            labelSecondary,\n            tooltipSecondary,\n            progressive,\n            colorBarStyleFill(barStyle_barStyle),\n            colorPointStyleFill(pointStyle_pointStyle),\n            pointStateDimensionHover,\n            colorLineStyleFill(lineStyle_lineStyle),\n            colorAreaStyleFill(areaStyle_areaStyle)\n        ]),\n        xBand,\n        yLinearPrimary,\n        yLinearSecondary,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        verticalCrosshairRect,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst dualAxisSpecPipeline = [\n    pivotAdapter_pivotAdapter(dualAxis, pivotDualAxis)\n];\nconst registerDualAxis = ()=>{\n    Builder._advancedPipelineMap.dualAxis = dualAxisAdvancedPipeline;\n    Builder._specPipelineMap.dualAxis = dualAxisSpecPipeline;\n};\nconst encodingForPie = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) pie_generateDimensionEncoding(dimensions, encoding);\n    else pie_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) pie_generateMeasureEncoding(measures, encoding);\n    else pie_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst pie_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.angle = unique(measures.filter((item)=>'angle' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst pie_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.color = uniqueDimIds.slice(0);\n    encoding.detail = uniqueDimIds.slice(0);\n    encoding.tooltip = uniqueDimIds;\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst pie_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.angle = unique(measures.filter((item)=>'angle' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n};\nconst pie_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n    if (0 === encoding.detail.length) encoding.detail = dimensions.map((item)=>item.id);\n};\nconst pieAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForPie,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    pieConfig,\n    theme_theme,\n    annotation_annotation\n];\nconst initPie = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    result.type = 'pie';\n    result.outerRadius = 0.8;\n    result.innerRadius = 0;\n    result.valueField = foldInfo.measureValue;\n    result.categoryField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst colorPieStyleFill = (stylePipe)=>(spec, context)=>{\n        const result = stylePipe(spec, context);\n        const { advancedVSeed } = context;\n        const { datasetReshapeInfo } = advancedVSeed;\n        const { unfoldInfo } = datasetReshapeInfo[0];\n        if (isLinearColor(advancedVSeed)) {\n            if (result?.pie?.style) result.pie.style.fill = {\n                field: unfoldInfo.encodingColor,\n                scale: 'color'\n            };\n        }\n        return result;\n    };\nconst pieStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { dataset } = advancedVSeed;\n    const showStroke = dataset.length <= 30;\n    const result = {\n        ...spec,\n        pie: {\n            style: {}\n        }\n    };\n    return {\n        ...result,\n        pie: {\n            style: {\n                stroke: '#ffffff',\n                lineWidth: showStroke ? 1 : 0\n            },\n            state: {\n                hover: {\n                    outerRadius: 1.1 * result.outerRadius\n                }\n            }\n        }\n    };\n};\nconst pie = [\n    initPie,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    colorPieStyleFill(pieStyle),\n    colorAdapter(discreteLegend, colorLegend),\n    label_label,\n    tooltip_tooltip,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotPie = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initPie,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        colorPieStyleFill(pieStyle),\n        label_label,\n        tooltip_tooltip,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst pieSpecPipeline = [\n    pivotAdapter_pivotAdapter(pie, pivotPie)\n];\nconst registerPie = ()=>{\n    Builder._advancedPipelineMap.pie = pieAdvancedPipeline;\n    Builder._specPipelineMap.pie = pieSpecPipeline;\n};\nconst donutAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    buildMeasures,\n    encodingForPie,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    donutConfig,\n    theme_theme,\n    annotation_annotation\n];\nconst initDonut = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { foldInfo, unfoldInfo } = datasetReshapeInfo[0];\n    result.type = 'pie';\n    result.outerRadius = 0.8;\n    result.innerRadius = 0.8 * result.outerRadius;\n    result.valueField = foldInfo.measureValue;\n    result.categoryField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst donut = [\n    initDonut,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    label_label,\n    colorPieStyleFill(pieStyle),\n    colorAdapter(discreteLegend, colorLegend),\n    tooltip_tooltip,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotDonut = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initDonut,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        label_label,\n        colorPieStyleFill(pieStyle),\n        tooltip_tooltip,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst donutSpecPipeline = [\n    pivotAdapter_pivotAdapter(donut, pivotDonut)\n];\nconst registerDonut = ()=>{\n    Builder._advancedPipelineMap.donut = donutAdvancedPipeline;\n    Builder._specPipelineMap.donut = donutSpecPipeline;\n};\nconst encodingForRose = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) rose_generateDimensionEncoding(dimensions, encoding);\n    else rose_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) rose_generateMeasureEncoding(measures, encoding);\n    else rose_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst rose_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.radius = unique(measures.filter((item)=>'radius' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst rose_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const onlyMeasureName = 1 === dimensions.length && dimensions.find((item)=>item.id === MeasureName);\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.angle = uniqueDimIds.slice(0, 1);\n    encoding.color = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.detail = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.tooltip = uniqueDimIds;\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst rose_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.radius = unique(measures.filter((item)=>'radius' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n};\nconst rose_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.angle = unique(dimensions.filter((item)=>'angle' === item.encoding).map((item)=>item.id));\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.angle.length) encoding.angle = [\n        dimensions[0].id\n    ];\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n    if (0 === encoding.detail.length) encoding.detail = dimensions.filter((item)=>!encoding.angle?.includes(item.id)).map((item)=>item.id);\n};\nconst roseAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForRose,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    roseConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initRose = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dataset, datasetReshapeInfo } = advancedVSeed;\n    const { foldInfo, unfoldInfo } = datasetReshapeInfo[0];\n    result.type = 'rose';\n    result.angleField = unfoldInfo.encodingAngle;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.valueField = foldInfo.measureValue;\n    result.padding = 0;\n    result.outerRadius = 0.9;\n    result.innerRadius = 0;\n    const hasNegativeValue = dataset.flat().find((d)=>d[foldInfo.measureValue] < 0);\n    if (hasNegativeValue) result.innerRadius = 0.05;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst angleAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dimensions, measures } = advancedVSeed;\n    if (!dimensions || !measures) return result;\n    const is0D = 0 === dimensions.length;\n    const is1M1D = 1 === dimensions.length && 1 === measures.length;\n    const showAxis = !(is0D || is1M1D);\n    if (!result.axes) result.axes = [];\n    result.axes.push({\n        orient: 'angle',\n        visible: showAxis,\n        zero: true,\n        nice: !!showAxis,\n        paddingInner: showAxis ? [\n            0.15,\n            0.1\n        ] : [\n            0,\n            0\n        ],\n        paddingOuter: showAxis ? [\n            0.075,\n            0.1\n        ] : [\n            0,\n            0\n        ],\n        grid: {\n            visible: showAxis\n        },\n        domainLine: {\n            visible: showAxis\n        },\n        tick: {\n            visible: showAxis\n        }\n    });\n    return result;\n};\nconst radiusAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dimensions, measures } = advancedVSeed;\n    if (!dimensions || !measures) return result;\n    const is0D = 0 === dimensions.length;\n    const is1M1D = 1 === dimensions.length && 1 === measures.length;\n    const showAxis = !(is0D || is1M1D);\n    if (!result.axes) result.axes = [];\n    result.axes.push({\n        orient: 'radius',\n        visible: showAxis,\n        zero: true,\n        nice: !!showAxis,\n        grid: {\n            visible: showAxis\n        },\n        tick: {\n            visible: showAxis\n        },\n        label: {\n            visible: showAxis\n        },\n        domainLine: {\n            visible: showAxis\n        }\n    });\n    return result;\n};\nconst colorRoseStyleFill = (stylePipe)=>(spec, context)=>{\n        const result = stylePipe(spec, context);\n        const { advancedVSeed } = context;\n        const { datasetReshapeInfo } = advancedVSeed;\n        const { unfoldInfo } = datasetReshapeInfo[0];\n        if (isLinearColor(advancedVSeed)) {\n            if (result?.rose?.style) result.rose.style.fill = {\n                field: unfoldInfo.encodingColor,\n                scale: 'color'\n            };\n        }\n        return result;\n    };\nconst roseStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { dataset } = advancedVSeed;\n    const showStroke = dataset.length <= 30;\n    const result = {\n        ...spec,\n        rose: {\n            style: {}\n        }\n    };\n    return {\n        ...result,\n        rose: {\n            style: {\n                stroke: '#ffffff',\n                lineWidth: showStroke ? 1 : 0\n            },\n            state: {\n                hover: {\n                    lineWidth: 1,\n                    fillOpacity: 0.6\n                }\n            }\n        }\n    };\n};\nconst rose = [\n    initRose,\n    stackCornerRadius_stackCornerRadius,\n    stackInverse,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    angleAxis,\n    radiusAxis,\n    verticalCrosshairRect,\n    colorRoseStyleFill(roseStyle),\n    colorAdapter(discreteLegend, colorLegend),\n    label_label,\n    tooltip_tooltip\n];\nconst pivotRose = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initRose,\n        stackCornerRadius_stackCornerRadius,\n        stackInverse,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        radiusAxis,\n        angleAxis,\n        verticalCrosshairRect,\n        colorRoseStyleFill(roseStyle),\n        label_label,\n        tooltip_tooltip\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst roseSpecPipeline = [\n    pivotAdapter_pivotAdapter(rose, pivotRose)\n];\nconst registerRose = ()=>{\n    Builder._advancedPipelineMap.rose = roseAdvancedPipeline;\n    Builder._specPipelineMap.rose = roseSpecPipeline;\n};\nconst roseParallelAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForRose,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    roseParallelConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initRoseParallel = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, dataset, dimensions } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    const sameDimensionsMode = dimensions.length > 1 && dimensions.every((dim)=>dim.id === dimensions[0].id);\n    result.type = 'rose';\n    result.angleField = sameDimensionsMode ? [\n        unfoldInfo.encodingAngle\n    ] : [\n        unfoldInfo.encodingAngle,\n        unfoldInfo.encodingDetail\n    ];\n    result.valueField = foldInfo.measureValue;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.outerRadius = 0.9;\n    result.innerRadius = 0;\n    const hasNegativeValue = dataset.flat().find((d)=>d[foldInfo.measureValue] < 0);\n    if (hasNegativeValue) result.innerRadius = 0.05;\n    result.rose = {\n        style: {\n            stroke: '#ffffff',\n            lineWidth: 1\n        },\n        state: {\n            hover: {\n                lineWidth: 1,\n                fillOpacity: 0.6\n            }\n        }\n    };\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst roseParallel = [\n    initRoseParallel,\n    stackCornerRadius_stackCornerRadius,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    radiusAxis,\n    angleAxis,\n    colorRoseStyleFill(roseStyle),\n    colorAdapter(discreteLegend, colorLegend),\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairRect,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotRoseParallel = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initRoseParallel,\n        stackCornerRadius_stackCornerRadius,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        radiusAxis,\n        angleAxis,\n        verticalCrosshairRect,\n        colorRoseStyleFill(roseStyle),\n        label_label,\n        tooltip_tooltip,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst roseParallelSpecPipeline = [\n    pivotAdapter_pivotAdapter(roseParallel, pivotRoseParallel)\n];\nconst registerRoseParallel = ()=>{\n    Builder._advancedPipelineMap.roseParallel = roseParallelAdvancedPipeline;\n    Builder._specPipelineMap.roseParallel = roseParallelSpecPipeline;\n};\nconst encodingForRadar = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) radar_generateDimensionEncoding(dimensions, encoding);\n    else radar_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) radar_generateMeasureEncoding(measures, encoding);\n    else radar_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst radar_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.radius = unique(measures.filter((item)=>'radius' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst radar_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.angle = uniqueDimIds.slice(0, 1);\n    encoding.color = uniqueDimIds.slice(1);\n    encoding.tooltip = uniqueDimIds;\n    encoding.detail = [];\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst radar_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.radius = unique(measures.filter((item)=>'radius' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n};\nconst radar_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.angle = unique(dimensions.filter((item)=>'angle' === item.encoding).map((item)=>item.id));\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = [];\n    if (0 === encoding.angle.length) encoding.angle = [\n        dimensions[0].id\n    ];\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n};\nconst radarAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForRadar,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortLegend_sortLegend,\n    radarConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initRadar = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    result.type = 'radar';\n    result.angleField = unfoldInfo.encodingAngle;\n    result.radiusField = foldInfo.measureValue;\n    result.seriesField = isLinearColor(advancedVSeed) ? unfoldInfo.encodingDetail : unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst radarAngleAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dimensions, measures } = advancedVSeed;\n    if (!dimensions || !measures) return result;\n    if (!result.axes) result.axes = [];\n    result.axes.push({\n        orient: 'angle',\n        visible: true,\n        zero: true,\n        nice: true,\n        grid: {\n            visible: true\n        },\n        domainLine: {\n            visible: true\n        },\n        tick: {\n            visible: true\n        }\n    });\n    return result;\n};\nconst radarRadiusAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dimensions, measures } = advancedVSeed;\n    if (!dimensions || !measures) return result;\n    if (!result.axes) result.axes = [];\n    result.axes.push({\n        orient: 'radius',\n        visible: true,\n        zero: true,\n        nice: true,\n        grid: {\n            visible: true\n        },\n        tick: {\n            visible: true\n        },\n        label: {\n            visible: true\n        },\n        domainLine: {\n            visible: true\n        }\n    });\n    return result;\n};\nconst radar = [\n    initRadar,\n    colorAdapter(color_color, linearColor),\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    radarAngleAxis,\n    radarRadiusAxis,\n    label_label,\n    tooltip_tooltip,\n    colorAdapter(discreteLegend, colorLegend),\n    verticalCrosshairLine,\n    colorPointStyleFill(pointStyle_pointStyle),\n    pointStateDimensionHover,\n    colorLineStyleFill(lineStyle_lineStyle),\n    colorAreaStyleFill(areaStyle_areaStyle)\n];\nconst pivotRadar = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initRadar,\n        colorAdapter(color_color, linearColor),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        radarAngleAxis,\n        radarRadiusAxis,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        colorPointStyleFill(pointStyle_pointStyle),\n        pointStateDimensionHover,\n        colorLineStyleFill(lineStyle_lineStyle),\n        colorAreaStyleFill(areaStyle_areaStyle)\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst radarSpecPipeline = [\n    pivotAdapter_pivotAdapter(radar, pivotRadar)\n];\nconst registerRadar = ()=>{\n    Builder._advancedPipelineMap.radar = radarAdvancedPipeline;\n    Builder._specPipelineMap.radar = radarSpecPipeline;\n};\nconst encodingForFunnel = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) funnel_generateDimensionEncoding(dimensions, encoding);\n    else funnel_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) funnel_generateMeasureEncoding(measures, encoding);\n    else funnel_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst funnel_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.size = unique(measures.filter((item)=>'size' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst funnel_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.color = uniqueDimIds.slice(0);\n    encoding.detail = uniqueDimIds.slice(0);\n    encoding.tooltip = uniqueDimIds;\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst funnel_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    encoding.size = unique(measures.filter((item)=>'size' === item.encoding || !item.encoding).map((item)=>item.id));\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n};\nconst funnel_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n    if (0 === encoding.detail.length) encoding.detail = dimensions.map((item)=>item.id);\n};\nconst funnelAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForFunnel,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    funnelConfig,\n    theme_theme,\n    annotation_annotation\n];\nconst initFunnel = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { foldInfo, unfoldInfo } = datasetReshapeInfo[0];\n    result.type = 'funnel';\n    result.valueField = foldInfo.measureValue;\n    result.categoryField = unfoldInfo.encodingColorId;\n    result.padding = 0;\n    result.isTransform = true;\n    result.shape = 'rect';\n    result.maxSize = '75%';\n    result.minSize = '10%';\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.transformLabel = {\n        visible: true\n    };\n    result.animation = true;\n    return result;\n};\nconst colorFunnelStyleFill = (stylePipe)=>(spec, context)=>{\n        const result = stylePipe(spec, context);\n        const { advancedVSeed } = context;\n        const { datasetReshapeInfo } = advancedVSeed;\n        const { unfoldInfo } = datasetReshapeInfo[0];\n        if (isLinearColor(advancedVSeed)) {\n            if (result?.funnel?.style) result.funnel.style.fill = {\n                field: unfoldInfo.encodingColor,\n                scale: 'color'\n            };\n        }\n        return result;\n    };\nconst funnelStyle = (spec)=>{\n    const result = {\n        ...spec,\n        funnel: {\n            style: {}\n        }\n    };\n    return {\n        ...result,\n        funnel: {\n            style: {\n                cornerRadius: 4\n            },\n            state: {\n                hover: {\n                    fillOpacity: 0.6\n                }\n            }\n        }\n    };\n};\nconst funnel = [\n    initFunnel,\n    background_backgroundColor,\n    datasetXY,\n    colorAdapter(color_color, linearColor),\n    label_label,\n    colorAdapter(discreteLegend, colorLegend),\n    colorFunnelStyleFill(funnelStyle),\n    tooltip_tooltip,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotFunnel = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initFunnel,\n        background_backgroundColor,\n        datasetXY,\n        colorAdapter(color_color, linearColor),\n        label_label,\n        tooltip_tooltip,\n        colorFunnelStyleFill(funnelStyle),\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst funnelSpecPipeline = [\n    pivotAdapter_pivotAdapter(funnel, pivotFunnel)\n];\nconst registerFunnel = ()=>{\n    Builder._advancedPipelineMap.funnel = funnelAdvancedPipeline;\n    Builder._specPipelineMap.funnel = funnelSpecPipeline;\n};\nconst encodingForHeatmap = (advancedVSeed)=>{\n    const { measures: vseedMeasures = [], dimensions = [] } = advancedVSeed;\n    const measures = findAllMeasures(vseedMeasures);\n    const hasDimensionEncoding = dimensions.some((item)=>item.encoding);\n    const hasMeasureEncoding = measures.some((item)=>item.encoding);\n    const encoding = {};\n    if (hasDimensionEncoding) heatmap_generateDimensionEncoding(dimensions, encoding);\n    else heatmap_generateDefaultDimensionEncoding(dimensions, encoding);\n    if (hasMeasureEncoding) heatmap_generateMeasureEncoding(measures, encoding);\n    else heatmap_generateDefaultMeasureEncoding(measures, encoding);\n    return {\n        ...advancedVSeed,\n        encoding\n    };\n};\nconst heatmap_generateDefaultMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = unique(measures.map((item)=>item.id));\n    encoding.color = unique(measures.filter((item)=>'color' === item.encoding || !item.encoding).map((item)=>item.id));\n};\nconst heatmap_generateDefaultDimensionEncoding = (dimensions, encoding)=>{\n    const onlyMeasureName = 1 === dimensions.length && dimensions.find((item)=>item.id === MeasureName);\n    const uniqueDimIds = unique(dimensions.map((d)=>d.id));\n    encoding.x = uniqueDimIds.slice(0, 1);\n    encoding.y = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.color = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.detail = uniqueDimIds.slice(onlyMeasureName ? 0 : 1);\n    encoding.tooltip = uniqueDimIds;\n    encoding.label = [];\n    encoding.row = [];\n    encoding.column = [];\n};\nconst heatmap_generateMeasureEncoding = (measures, encoding)=>{\n    encoding.tooltip = measures.map((item)=>item.id);\n    const color = unique(measures.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    if (color.length > 0) encoding.color = color;\n    return encoding;\n};\nconst heatmap_generateDimensionEncoding = (dimensions, encoding)=>{\n    encoding.x = unique(dimensions.filter((item)=>'xAxis' === item.encoding).map((item)=>item.id));\n    encoding.y = unique(dimensions.filter((item)=>'yAxis' === item.encoding).map((item)=>item.id));\n    encoding.color = unique(dimensions.filter((item)=>'color' === item.encoding).map((item)=>item.id));\n    encoding.detail = unique(dimensions.filter((item)=>'detail' === item.encoding).map((item)=>item.id));\n    if (0 === encoding.x.length) encoding.x = [\n        dimensions[0].id\n    ];\n    if (0 === encoding.y.length) if (dimensions.length > 1) encoding.y = dimensions.slice(1).map((item)=>item.id);\n    else encoding.y = dimensions.slice(0).map((item)=>item.id);\n    if (0 === encoding.color.length) encoding.color = [\n        MeasureName\n    ];\n    if (0 === encoding.detail.length) encoding.detail = dimensions.filter((item)=>!encoding.x?.includes(item.id)).map((item)=>item.id);\n};\nconst heatmapAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    defaultMeasures_defaultMeasures,\n    defaultDimensions,\n    defaultMeasureName,\n    encodingForHeatmap,\n    buildMeasures,\n    pivotAdapter([\n        reshapeWithEncoding\n    ], [\n        pivotReshapeWithEncoding\n    ]),\n    sortXBandAxis,\n    heatmapConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst labelColorInversion = (spec)=>{\n    const result = {\n        ...spec\n    };\n    if (result.label) result.label.smartInvert = true;\n    else result.label = {\n        smartInvert: true\n    };\n    return result;\n};\nconst colorCellStyleFill = (stylePipe)=>(spec, context)=>{\n        const result = stylePipe(spec, context);\n        const { advancedVSeed } = context;\n        const { datasetReshapeInfo } = advancedVSeed;\n        const { unfoldInfo } = datasetReshapeInfo[0];\n        if (isLinearColor(advancedVSeed)) {\n            if (result?.cell?.style) result.cell.style.fill = {\n                field: unfoldInfo.encodingColor,\n                scale: 'color'\n            };\n        }\n        return result;\n    };\nconst cellStyle = (spec)=>{\n    const result = {\n        ...spec,\n        cell: {\n            style: {}\n        }\n    };\n    return {\n        ...result,\n        cell: {\n            style: {\n                shape: 'rect',\n                stroke: '#ffffff',\n                lineWidth: 1\n            }\n        }\n    };\n};\nconst initHeatmap = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    result.type = 'heatmap';\n    result.direction = 'vertical';\n    result.xField = unfoldInfo.encodingX;\n    result.yField = unfoldInfo.encodingY;\n    result.seriesField = unfoldInfo.encodingColorId;\n    result.valueField = foldInfo.measureValue;\n    result.padding = 0;\n    result.axes = [\n        {\n            type: 'band',\n            orient: 'left',\n            bandPadding: 0\n        },\n        {\n            type: 'band',\n            orient: 'bottom',\n            bandPadding: 0\n        }\n    ];\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst heatmap = [\n    initHeatmap,\n    background_backgroundColor,\n    datasetXY,\n    colorAdapter(color_color, linearColor),\n    label_label,\n    labelColorInversion,\n    colorAdapter(discreteLegend, colorLegend),\n    colorCellStyleFill(cellStyle),\n    tooltip_tooltip,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotHeatmap = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initHeatmap,\n        background_backgroundColor,\n        datasetXY,\n        colorAdapter(color_color, linearColor),\n        label_label,\n        labelColorInversion,\n        discreteLegend,\n        tooltip_tooltip,\n        colorCellStyleFill(cellStyle),\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    colorAdapter(pivotDiscreteLegend, pivotColorLegend)\n];\nconst heatmapSpecPipeline = [\n    pivotAdapter_pivotAdapter(heatmap, pivotHeatmap)\n];\nconst registerHeatmap = ()=>{\n    Builder._advancedPipelineMap.heatmap = heatmapAdvancedPipeline;\n    Builder._specPipelineMap.heatmap = heatmapSpecPipeline;\n};\nconst lightTheme = ()=>{\n    const linearAxis = {\n        nice: true,\n        zero: true,\n        inverse: false,\n        label: {\n            visible: true,\n            labelAngle: 0,\n            labelColor: '#797B85',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        },\n        title: {\n            visible: false,\n            titleText: '',\n            titleColor: '#646A73',\n            titleFontSize: 12,\n            titleFontWeight: 400\n        },\n        grid: {\n            visible: true,\n            gridColor: '#36415926',\n            gridWidth: 0.5\n        },\n        tick: {\n            visible: false,\n            tickInside: false,\n            tickSize: 4,\n            tickColor: '#3641594d'\n        },\n        line: {\n            visible: false,\n            lineColor: '#3641594d',\n            lineWidth: 1\n        }\n    };\n    const bandAxis = {\n        labelAutoHide: true,\n        labelAutoHideGap: 4,\n        labelAutoLimit: true,\n        labelAutoLimitLength: 80,\n        labelAutoRotate: false,\n        labelAutoRotateAngleRange: [\n            0,\n            -45,\n            -90\n        ],\n        label: {\n            visible: true,\n            labelAngle: 0,\n            labelColor: '#797B85',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        },\n        title: {\n            visible: false,\n            titleText: '',\n            titleColor: '#646A73',\n            titleFontSize: 12,\n            titleFontWeight: 400\n        },\n        grid: {\n            visible: false,\n            gridColor: '#36415926',\n            gridWidth: 0.5\n        },\n        tick: {\n            visible: false,\n            tickInside: false,\n            tickSize: 4,\n            tickColor: '#3641594d'\n        },\n        line: {\n            visible: true,\n            lineColor: '#3641594d',\n            lineWidth: 1\n        }\n    };\n    const barBandAxis = {\n        ...bandAxis,\n        labelAutoHide: false,\n        labelAutoHideGap: 1,\n        labelAutoLimit: false,\n        labelAutoLimitLength: void 0,\n        labelAutoRotate: false,\n        labelAutoRotateAngleRange: [\n            0,\n            -45,\n            -90\n        ]\n    };\n    const crosshairLine = {\n        visible: true,\n        labelVisible: true,\n        lineColor: '#3641594d',\n        labelColor: '#ffffff',\n        labelBackgroundColor: '#364159'\n    };\n    const crosshairRect = {\n        visible: true,\n        labelVisible: true,\n        rectColor: '#3641594d',\n        labelColor: '#ffffff',\n        labelBackgroundColor: '#364159'\n    };\n    const baseConfig = {\n        backgroundColor: 'transparent',\n        color: {\n            linearColorScheme: [\n                '#C2CEFF',\n                '#5766EC'\n            ],\n            colorScheme: [\n                '#8D72F6',\n                '#5766EC',\n                '#66A3FE',\n                '#51D5E6',\n                '#4EC0B3',\n                '#F9DF90',\n                '#F9AD71',\n                '#ED8888',\n                '#E9A0C3',\n                '#D77DD3'\n            ]\n        },\n        label: {\n            enable: true\n        },\n        tooltip: {\n            enable: true\n        },\n        legend: {\n            enable: true,\n            border: true,\n            maxSize: 1,\n            shapeType: 'rectRound',\n            position: 'rt',\n            labelFontColor: '#646A73',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        }\n    };\n    const tableConfig = {\n        borderColor: '#e3e5eb',\n        bodyFontSize: 12,\n        bodyFontColor: '#141414',\n        bodyBackgroundColor: 'transparent',\n        headerFontSize: 12,\n        headerFontColor: '#21252c',\n        headerBackgroundColor: '#f6f7f9',\n        hoverBodyBackgroundColor: '#bedaff',\n        hoverBodyInlineBackgroundColor: '#bedaff33',\n        hoverHeaderBackgroundColor: '#D9DDE4',\n        hoverHeaderInlineBackgroundColor: '#D9DDE455',\n        selectedBorderColor: '#4080ff',\n        selectedBackgroundColor: '#bedaff33',\n        backgroundColor: 'transparent'\n    };\n    return {\n        config: {\n            table: tableConfig,\n            pivotTable: tableConfig,\n            line: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine\n            },\n            column: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            columnParallel: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            columnPercent: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            bar: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            barParallel: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            barPercent: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            area: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine\n            },\n            areaPercent: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine\n            },\n            scatter: {\n                ...baseConfig,\n                xAxis: {\n                    ...linearAxis,\n                    line: {\n                        ...linearAxis.line,\n                        visible: true\n                    }\n                },\n                yAxis: {\n                    ...linearAxis,\n                    line: {\n                        ...linearAxis.line,\n                        visible: true\n                    }\n                },\n                crosshairLine\n            },\n            dualAxis: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                primaryYAxis: linearAxis,\n                secondaryYAxis: {\n                    ...linearAxis,\n                    grid: {\n                        visible: false\n                    }\n                },\n                dualChartType: {\n                    primary: 'column',\n                    secondary: 'line'\n                },\n                crosshairRect\n            },\n            pie: {\n                ...baseConfig\n            },\n            donut: {\n                ...baseConfig\n            },\n            radar: {\n                ...baseConfig\n            },\n            rose: {\n                ...baseConfig\n            },\n            roseParallel: {\n                ...baseConfig\n            },\n            funnel: {\n                ...baseConfig\n            },\n            heatmap: {\n                ...baseConfig\n            }\n        }\n    };\n};\nconst darkTheme = ()=>{\n    const linearAxis = {\n        nice: true,\n        zero: true,\n        label: {\n            visible: true,\n            labelAngle: 0,\n            labelColor: '#E2E3E6',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        },\n        title: {\n            visible: false,\n            titleText: '',\n            titleColor: '#FDFDFD',\n            titleFontSize: 12,\n            titleFontWeight: 400\n        },\n        grid: {\n            visible: true,\n            gridColor: '#404349',\n            gridWidth: 0.5\n        },\n        tick: {\n            visible: false,\n            tickInside: false,\n            tickSize: 4,\n            tickColor: '#4B4F54'\n        },\n        line: {\n            visible: false,\n            lineColor: '#4B4F54',\n            lineWidth: 1\n        }\n    };\n    const bandAxis = {\n        labelAutoHide: true,\n        labelAutoHideGap: 4,\n        labelAutoLimit: true,\n        labelAutoLimitLength: 80,\n        labelAutoRotate: false,\n        labelAutoRotateAngleRange: [\n            0,\n            -45,\n            -90\n        ],\n        label: {\n            visible: true,\n            labelAngle: 0,\n            labelColor: '#E2E3E6',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        },\n        title: {\n            visible: false,\n            titleText: '',\n            titleColor: '#FDFDFD',\n            titleFontSize: 12,\n            titleFontWeight: 400\n        },\n        grid: {\n            visible: false,\n            gridColor: '#404349',\n            gridWidth: 0.5\n        },\n        tick: {\n            visible: false,\n            tickInside: false,\n            tickSize: 4,\n            tickColor: '#4B4F54'\n        },\n        line: {\n            visible: true,\n            lineColor: '#4B4F54',\n            lineWidth: 1\n        }\n    };\n    const barBandAxis = {\n        ...bandAxis,\n        labelAutoHide: false,\n        labelAutoHideGap: 1,\n        labelAutoLimit: false,\n        labelAutoLimitLength: void 0,\n        labelAutoRotate: false,\n        labelAutoRotateAngleRange: [\n            0,\n            -45,\n            -90\n        ]\n    };\n    const crosshairLine = {\n        visible: true,\n        labelVisible: true,\n        lineColor: '#E2E3E6',\n        labelColor: '#4B4F54',\n        labelBackgroundColor: '#ffffff'\n    };\n    const crosshairRect = {\n        visible: true,\n        labelVisible: true,\n        lineColor: '#E2E3E6',\n        labelColor: '#4B4F54',\n        labelBackgroundColor: '#ffffff'\n    };\n    const baseConfig = {\n        backgroundColor: 'transparent',\n        color: {\n            linearColorScheme: [\n                '#A0CEFF',\n                '#2E62F1'\n            ],\n            colorScheme: [\n                '#2E62F1',\n                '#4DC36A',\n                '#FF8406',\n                '#FFCC00',\n                '#4F44CF',\n                '#5AC8FA',\n                '#003A8C',\n                '#B08AE2',\n                '#FF6341',\n                '#98DD62'\n            ]\n        },\n        label: {\n            enable: true\n        },\n        tooltip: {\n            enable: true\n        },\n        legend: {\n            enable: true,\n            border: true,\n            maxSize: 1,\n            position: 'rt',\n            shapeType: 'rectRound',\n            labelFontColor: '#FDFDFD',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        }\n    };\n    const tableConfig = {\n        borderColor: '#4b4e53',\n        bodyFontSize: 12,\n        bodyFontColor: '#fdfdfd',\n        bodyBackgroundColor: 'transparent',\n        headerFontSize: 12,\n        headerFontColor: '#fdfdfd',\n        headerBackgroundColor: '#36393e',\n        hoverBodyBackgroundColor: '#4284ff66',\n        hoverBodyInlineBackgroundColor: '#4284ff10',\n        hoverHeaderBackgroundColor: '#6f7984cc',\n        hoverHeaderInlineBackgroundColor: '#4b4f54',\n        selectedBorderColor: '#3073f2',\n        selectedBackgroundColor: '#4284ff33'\n    };\n    return {\n        config: {\n            table: tableConfig,\n            pivotTable: tableConfig,\n            line: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine: crosshairLine\n            },\n            column: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            columnParallel: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            columnPercent: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            bar: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            barParallel: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            barPercent: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            area: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine: crosshairLine\n            },\n            areaPercent: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine: crosshairLine\n            },\n            scatter: {\n                ...baseConfig,\n                xAxis: {\n                    ...linearAxis,\n                    line: {\n                        ...linearAxis.line,\n                        visible: true\n                    }\n                },\n                yAxis: {\n                    ...linearAxis,\n                    line: {\n                        ...linearAxis.line,\n                        visible: true\n                    }\n                },\n                crosshairLine\n            },\n            dualAxis: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                primaryYAxis: linearAxis,\n                secondaryYAxis: {\n                    ...linearAxis,\n                    grid: {\n                        visible: false\n                    }\n                },\n                dualChartType: {\n                    primary: 'column',\n                    secondary: 'line'\n                },\n                crosshairRect\n            },\n            pie: {\n                ...baseConfig\n            },\n            donut: {\n                ...baseConfig\n            },\n            radar: {\n                ...baseConfig\n            },\n            rose: {\n                ...baseConfig\n            },\n            roseParallel: {\n                ...baseConfig\n            },\n            funnel: {\n                ...baseConfig\n            },\n            heatmap: {\n                ...baseConfig\n            }\n        }\n    };\n};\nconst registerCustomTheme = (key, themeConfig)=>{\n    const customTheme = 'function' == typeof themeConfig ? themeConfig({\n        lightTheme: lightTheme(),\n        darkTheme: darkTheme()\n    }) : themeConfig;\n    Builder._themeMap[key] = customTheme;\n};\nconst registerLightTheme = ()=>{\n    registerCustomTheme('light', lightTheme());\n};\nconst registerDarkTheme = ()=>{\n    registerCustomTheme('dark', darkTheme());\n};\nconst registerAll = ()=>{\n    registerTable();\n    registerPivotTable();\n    registerLine();\n    registerColumn();\n    registerColumnParallel();\n    registerColumnPercent();\n    registerBar();\n    registerBarParallel();\n    registerBarPercent();\n    registerArea();\n    registerAreaPercent();\n    registerScatter();\n    registerDualAxis();\n    registerPie();\n    registerDonut();\n    registerRose();\n    registerRoseParallel();\n    registerRadar();\n    registerFunnel();\n    registerHeatmap();\n    registerLightTheme();\n    registerDarkTheme();\n};\nconst updateAdvanced = (chartType, advancedPipe)=>{\n    Builder._customAdvancedPipe[chartType] = advancedPipe;\n};\nconst updateSpec = (chartType, specPipe)=>{\n    Builder._customSpecPipe[chartType] = specPipe;\n};\nconst zChartType = z[\"enum\"]([\n    'table',\n    'pivotTable',\n    'line',\n    'column',\n    'columnPercent',\n    'columnParallel',\n    'bar',\n    'barPercent',\n    'barParallel',\n    'area',\n    'areaPercent',\n    'scatter',\n    'dualAxis',\n    'rose',\n    'roseParallel',\n    'pie',\n    'donut',\n    'radar',\n    'funnel',\n    'heatmap'\n]);\nconst zDualChartType = z.object({\n    primary: z[\"enum\"]([\n        'line',\n        'column',\n        'columnParallel',\n        'area',\n        'scatter'\n    ]).default('column'),\n    secondary: z[\"enum\"]([\n        'line',\n        'column',\n        'columnParallel',\n        'area',\n        'scatter'\n    ]).default('line')\n});\nconst zDatum = z.record(z.string().or(z.number()), z.any());\nconst zDataset = z.array(zDatum);\nconst zDimension = z.object({\n    id: z.string(),\n    alias: z.string().optional(),\n    location: z[\"enum\"]([\n        'dimension',\n        'rowDimension',\n        'columnDimension'\n    ]).default('dimension'),\n    encoding: z[\"enum\"]([\n        'xAxis',\n        'yAxis',\n        'angle',\n        'color',\n        'detail',\n        'tooltip',\n        'label',\n        'row',\n        'column'\n    ]).optional()\n});\nconst zDimensionGroup = z.object({\n    id: z.string(),\n    alias: z.string().optional(),\n    get children () {\n        return z.array(zDimensionGroup.or(zDimension)).optional();\n    }\n});\nconst zDimensions = z.array(zDimension);\nconst zDimensionTree = z.array(zDimensionGroup.or(zDimension));\nconst zNumFormat = z.object({\n    type: z[\"enum\"]([\n        'number',\n        'percent',\n        'permille',\n        'scientific'\n    ]).default('number').optional(),\n    ratio: z.number().default(1).optional(),\n    symbol: z.string().default('').optional(),\n    thousandSeparator: z.boolean().default(false).optional(),\n    prefix: z.string().default('').optional(),\n    suffix: z.string().default('').optional(),\n    fractionDigits: z.number().default(2).optional(),\n    significantDigits: z.number().default(0).optional(),\n    roundingPriority: z[\"enum\"]([\n        'morePrecision',\n        'lessPrecision'\n    ]).default('morePrecision').optional(),\n    roundingMode: z[\"enum\"]([\n        'floor',\n        'ceil',\n        'halfEven',\n        'expand',\n        'trunc',\n        'halfFloor',\n        'halfCeil',\n        'halfExpand',\n        'halfTrunc'\n    ]).default('halfCeil').optional()\n}).optional();\nconst zMeasure = z.object({\n    id: z.string(),\n    alias: z.string().optional(),\n    autoFormat: z.boolean().default(true),\n    format: zNumFormat[\"default\"]({}),\n    encoding: z[\"enum\"]([\n        'primaryYAxis',\n        'secondaryYAxis',\n        'xAxis',\n        'yAxis',\n        'angle',\n        'radius',\n        'size',\n        'color',\n        'label',\n        'tooltip',\n        'detail',\n        'column'\n    ]).optional(),\n    parentId: z.string().optional()\n});\nconst zMeasureGroup = z.object({\n    id: z.string(),\n    alias: z.string().optional(),\n    get children () {\n        return z.array(zMeasureGroup.or(zMeasure)).optional();\n    }\n});\nconst zMeasures = z.array(zMeasure);\nconst zMeasureTree = z.array(zMeasureGroup.or(zMeasure));\nconst zDualMeasure = z.object({\n    id: z.string(),\n    primaryMeasures: z.array(zMeasure).or(zMeasure).optional(),\n    secondaryMeasures: z.array(zMeasure).or(zMeasure).optional()\n});\nconst zDualMeasures = z.array(zDualMeasure);\nconst zScatterMeasure = z.object({\n    id: z.string(),\n    xMeasures: z.array(zMeasure).or(zMeasure).optional(),\n    yMeasures: z.array(zMeasure).or(zMeasure).optional()\n});\nconst zScatterMeasures = z.array(zScatterMeasure);\nconst zFoldInfo = z.object({\n    foldMap: z.record(z.string(), z.string().or(z.undefined())),\n    colorRange: z.array(z.number()),\n    measureRange: z.array(z.number()),\n    measureId: z.string(),\n    measureName: z.string(),\n    measureValue: z.string()\n});\nconst zUnfoldInfo = z.object({\n    encodingX: z.string(),\n    encodingY: z.string(),\n    encodingColor: z.string(),\n    encodingColorId: z.string(),\n    encodingDetail: z.string(),\n    encodingAngle: z.string(),\n    colorItems: z.array(z.string()),\n    colorIdMap: z.record(z.string(), z.string())\n});\nconst zDatasetReshapeInfo = z.array(z.object({\n    id: z.string(),\n    index: z.number(),\n    foldInfo: zFoldInfo,\n    foldInfoList: z.array(zFoldInfo).nullish(),\n    unfoldInfo: zUnfoldInfo\n}));\nconst zEncoding = z.object({\n    x: z.array(z.string()).nullish(),\n    y: z.array(z.string()).nullish(),\n    angle: z.array(z.string()).nullish(),\n    radius: z.array(z.string()).nullish(),\n    detail: z.array(z.string()).nullish(),\n    color: z.array(z.string()).nullish(),\n    size: z.array(z.string()).nullish(),\n    tooltip: z.array(z.string()).nullish(),\n    label: z.array(z.string()).nullish(),\n    row: z.array(z.string()).nullish(),\n    column: z.array(z.string()).nullish(),\n    group: z.array(z.string()).nullish().describe(\"\\u5DF2\\u5F03\\u7528, \\u8BF7\\u4F7F\\u7528\\u989C\\u8272\\u66FF\\u4EE3\")\n});\nconst zXBandAxis = z.object({\n    visible: z.boolean().default(true).nullish(),\n    labelAutoHide: z.boolean().default(true).nullish(),\n    labelAutoHideGap: z.number().default(0).nullish(),\n    labelAutoRotate: z.boolean().default(true).nullish(),\n    labelAutoRotateAngleRange: z.array(z.number()).default([\n        0,\n        -45,\n        -90\n    ]).nullish(),\n    labelAutoLimit: z.boolean().default(true).nullish(),\n    labelAutoLimitLength: z.number().default(100).nullish(),\n    label: z.object({\n        visible: z.boolean().default(true).nullish(),\n        labelColor: z.string().default('#797B85').nullish(),\n        labelFontSize: z.number().default(12).nullish(),\n        labelFontWeight: z.number().default(400).nullish(),\n        labelAngle: z.number().default(0).nullish()\n    }).nullish(),\n    line: z.object({\n        visible: z.boolean().default(true).nullish(),\n        lineColor: z.string().default('rgba(54, 65, 89, 0.30)').nullish(),\n        lineWidth: z.number().default(1).nullish()\n    }).nullish(),\n    tick: z.object({\n        visible: z.boolean().default(true).nullish(),\n        tickInside: z.boolean().default(false).nullish(),\n        tickColor: z.string().default('rgba(54, 65, 89, 0.30)').nullish(),\n        tickSize: z.number().default(4).nullish()\n    }).nullish(),\n    title: z.object({\n        visible: z.boolean().default(false).nullish(),\n        titleText: z.string().default('').nullish(),\n        titleColor: z.string().default('#646A73').nullish(),\n        titleFontSize: z.number().default(12).nullish(),\n        titleFontWeight: z.number().default(400).nullish()\n    }).nullish(),\n    grid: z.object({\n        visible: z.boolean().default(false).nullish(),\n        gridColor: z.string().default('rgba(54, 65, 89, 0.15)').nullish(),\n        gridWidth: z.number().default(0.5).nullish()\n    }).nullish()\n});\nconst zYBandAxis = zXBandAxis;\nconst zXLinearAxis = z.object({\n    visible: z.boolean().default(true).nullish(),\n    min: z.number().nullish(),\n    max: z.number().nullish(),\n    nice: z.boolean().default(true).nullish(),\n    zero: z.boolean().default(true).nullish(),\n    log: z.boolean().default(false).nullish(),\n    logBase: z.number().default(10).nullish(),\n    inverse: z.boolean().default(false).nullish(),\n    label: z.object({\n        visible: z.boolean().default(true).nullish(),\n        labelColor: z.string().default('#797B85').nullish(),\n        labelFontSize: z.number().default(12).nullish(),\n        labelFontWeight: z.number().default(400).nullish(),\n        labelAngle: z.number().default(0).nullish()\n    }).nullish(),\n    line: z.object({\n        visible: z.boolean().default(true).nullish(),\n        lineColor: z.string().default('rgba(54, 65, 89, 0.30)').nullish(),\n        lineWidth: z.number().default(1).nullish()\n    }).nullish(),\n    tick: z.object({\n        visible: z.boolean().default(true).nullish(),\n        tickInside: z.boolean().default(false).nullish(),\n        tickColor: z.string().default('rgba(54, 65, 89, 0.30)').nullish(),\n        tickSize: z.number().default(4).nullish()\n    }).nullish(),\n    title: z.object({\n        visible: z.boolean().default(false).nullish(),\n        titleText: z.string().default('').nullish(),\n        titleColor: z.string().default('#646A73').nullish(),\n        titleFontSize: z.number().default(12).nullish(),\n        titleFontWeight: z.number().default(400).nullish()\n    }).nullish(),\n    grid: z.object({\n        visible: z.boolean().default(false).nullish(),\n        gridColor: z.string().default('rgba(54, 65, 89, 0.15)').nullish(),\n        gridWidth: z.number().default(0.5).nullish()\n    }).nullish()\n});\nconst zYLinearAxis = zXLinearAxis;\nconst zCrosshairLine = z.object({\n    visible: z.boolean().nullish(),\n    lineColor: z.string().nullish(),\n    labelColor: z.string().nullish(),\n    labelVisible: z.boolean().nullish(),\n    labelBackgroundColor: z.string().nullish()\n});\nconst zCrosshairRect = z.object({\n    visible: z.boolean().nullish(),\n    rectColor: z.string().nullish(),\n    labelColor: z.string().nullish(),\n    labelVisible: z.boolean().nullish(),\n    labelBackgroundColor: z.string().nullish()\n});\nconst zStackCornerRadius = z.number().or(z.array(z.number())).default([\n    3,\n    3,\n    0,\n    0\n]);\nconst zBackgroundColor = z.string().default('transparent').nullish();\nconst zColor = z.object({\n    colorScheme: z.array(z.string()).nullish(),\n    linearColorScheme: z.array(z.string()).nullish(),\n    colorMapping: z.record(z.string(), z.string()).nullish()\n});\nconst zLinearColor = z.object({\n    linearColorScheme: z.array(z.string()).nullish()\n});\nconst zLabel = z.object({\n    enable: z.boolean().default(true).nullish()\n});\nconst zLegend = z.object({\n    enable: z.boolean().default(true).nullish(),\n    border: z.boolean().default(true).nullish(),\n    maxSize: z.number().default(1).nullish(),\n    shapeType: z[\"enum\"]([\n        'circle',\n        'cross',\n        'diamond',\n        'square',\n        'arrow',\n        'arrow2Left',\n        'arrow2Right',\n        'wedge',\n        'thinTriangle',\n        'triangle',\n        'triangleUp',\n        'triangleDown',\n        'triangleRight',\n        'triangleLeft',\n        'stroke',\n        'star',\n        'wye',\n        'rect',\n        'arrowLeft',\n        'arrowRight',\n        'rectRound',\n        'roundLine'\n    ]).default('rectRound').nullish(),\n    position: z[\"enum\"]([\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb',\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr',\n        'right',\n        'rightTop',\n        'rightBottom',\n        'rt',\n        'rb',\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ]).default('bottom').nullish(),\n    labelFontSize: z.number().default(12).nullish(),\n    labelFontColor: z.string().default('#fff').nullish(),\n    labelFontWeight: z.number().or(z.string()).default(400).nullish()\n});\nconst zColorLegend = z.object({\n    position: z[\"enum\"]([\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb',\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr',\n        'right',\n        'rightTop',\n        'rightBottom',\n        'rt',\n        'rb',\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ]).default('bottom').nullish(),\n    enable: z.boolean().default(true).nullish()\n});\nconst zTooltip = z.object({\n    enable: z.boolean().default(true).nullish()\n});\nconst zTableConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    borderColor: z.string().nullish(),\n    bodyFontSize: z.number().nullish(),\n    bodyFontColor: z.string().nullish(),\n    bodyBackgroundColor: z.string().nullish(),\n    hoverBodyBackgroundColor: z.string().nullish(),\n    hoverBodyInlineBackgroundColor: z.string().nullish(),\n    headerFontSize: z.number().nullish(),\n    headerFontColor: z.string().nullish(),\n    headerBackgroundColor: z.string().nullish(),\n    hoverHeaderBackgroundColor: z.string().nullish(),\n    hoverHeaderInlineBackgroundColor: z.string().nullish(),\n    selectedBorderColor: z.string().nullish(),\n    selectedBackgroundColor: z.string().nullish()\n});\nconst zPivotTableConfig = zTableConfig;\nconst zLineConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    label: zLabel.nullish(),\n    color: zColor.nullish(),\n    tooltip: zTooltip.nullish(),\n    legend: zLegend.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairLine: zCrosshairLine.nullish()\n});\nconst zColumnConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    label: zLabel.nullish(),\n    color: zColor.nullish(),\n    tooltip: zTooltip.nullish(),\n    legend: zLegend.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    stackCornerRadius: zStackCornerRadius.nullish()\n});\nconst zColumnParallelConfig = zColumnConfig;\nconst zColumnPercentConfig = zColumnConfig;\nconst zBarConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    label: zLabel.nullish(),\n    color: zColor.nullish(),\n    tooltip: zTooltip.nullish(),\n    legend: zLegend.nullish(),\n    xAxis: zXLinearAxis.nullish(),\n    yAxis: zYBandAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    stackCornerRadius: zStackCornerRadius.nullish()\n});\nconst zBarParallelConfig = zBarConfig;\nconst zBarPercentConfig = zBarConfig;\nconst zAreaConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    label: zLabel.nullish(),\n    color: zColor.nullish(),\n    tooltip: zTooltip.nullish(),\n    legend: zLegend.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairLine: zCrosshairLine.nullish()\n});\nconst zAreaPercentConfig = zAreaConfig;\nconst zDualAxisConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    label: zLabel.nullish(),\n    color: zColor.nullish(),\n    tooltip: zTooltip.nullish(),\n    legend: zLegend.nullish(),\n    dualChartType: z.array(zDualChartType).or(zDualChartType).nullish(),\n    alignTicks: z.array(z.boolean()).or(z.boolean()).nullish(),\n    primaryYAxis: z.array(zYLinearAxis).or(zYLinearAxis).nullish(),\n    secondaryYAxis: z.array(zYLinearAxis).or(zYLinearAxis).nullish(),\n    xAxis: zXBandAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish()\n});\nconst zScatterConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    label: zLabel.nullish(),\n    color: zColor.nullish(),\n    tooltip: zTooltip.nullish(),\n    legend: zLegend.nullish(),\n    xAxis: zXLinearAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairLine: zCrosshairLine.nullish()\n});\nconst zRoseConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    label: zLabel.nullish(),\n    color: zColor.nullish(),\n    tooltip: zTooltip.nullish(),\n    legend: zLegend.nullish()\n});\nconst zRoseParallelConfig = zRoseConfig;\nconst zPieConfig = z.object({\n    backgroundColor: zBackgroundColor.nullish(),\n    label: zLabel.nullish(),\n    color: zColor.nullish(),\n    tooltip: zTooltip.nullish(),\n    legend: zLegend.nullish()\n});\nconst zDonutConfig = zPieConfig;\nconst zRadarConfig = zPieConfig;\nconst zFunnelConfig = zPieConfig;\nconst zHeatmapConfig = zPieConfig;\nconst zConfig = z.object({\n    table: zTableConfig.nullish(),\n    pivotTable: zPivotTableConfig.nullish(),\n    line: zLineConfig.nullish(),\n    column: zColumnConfig.nullish(),\n    columnParallel: zColumnParallelConfig.nullish(),\n    columnPercent: zColumnPercentConfig.nullish(),\n    bar: zBarConfig.nullish(),\n    barParallel: zBarParallelConfig.nullish(),\n    barPercent: zBarPercentConfig.nullish(),\n    area: zAreaConfig.nullish(),\n    areaPercent: zAreaPercentConfig.nullish(),\n    scatter: zScatterConfig.nullish(),\n    dualAxis: zDualAxisConfig.nullish(),\n    rose: zRoseConfig.nullish(),\n    roseParallel: zRoseParallelConfig.nullish(),\n    pie: zPieConfig.nullish(),\n    donut: zDonutConfig.nullish(),\n    radar: zRadarConfig.nullish(),\n    funnel: zFunnelConfig.nullish(),\n    heatmap: zHeatmapConfig.nullish()\n});\nconst zAxis = z.object({\n    visible: z.boolean().default(true).nullish(),\n    min: z.number().nullish(),\n    max: z.number().nullish(),\n    nice: z.boolean().default(true).nullish(),\n    zero: z.boolean().default(true).nullish(),\n    inverse: z.boolean().default(false).nullish(),\n    log: z.boolean().default(false).nullish(),\n    logBase: z.number().default(10).nullish(),\n    labelAutoHide: z.boolean().default(true).nullish(),\n    labelAutoHideGap: z.number().default(4).nullish(),\n    labelAutoRotate: z.boolean().default(true).nullish(),\n    labelAutoRotateAngleRange: z.array(z.number()).default([\n        0,\n        -45,\n        -90\n    ]).nullish(),\n    labelAutoLimit: z.boolean().default(true).nullish(),\n    labelAutoLimitLength: z.number().default(100).nullish(),\n    label: z.object({\n        visible: z.boolean().default(true).nullish(),\n        labelColor: z.string().default('#797B85').nullish(),\n        labelFontSize: z.number().default(12).nullish(),\n        labelFontWeight: z.number().default(400).nullish(),\n        labelAngle: z.number().default(0).nullish()\n    }).nullish(),\n    line: z.object({\n        visible: z.boolean().default(true).nullish(),\n        lineColor: z.string().default('rgba(54, 65, 89, 0.30)').nullish(),\n        lineWidth: z.number().default(1).nullish()\n    }).nullish(),\n    tick: z.object({\n        visible: z.boolean().default(true).nullish(),\n        tickInside: z.boolean().default(false).nullish(),\n        tickColor: z.string().default('rgba(54, 65, 89, 0.30)').nullish(),\n        tickSize: z.number().default(4).nullish()\n    }).nullish(),\n    title: z.object({\n        visible: z.boolean().default(false).nullish(),\n        titleText: z.string().default('').nullish(),\n        titleColor: z.string().default('#646A73').nullish(),\n        titleFontSize: z.number().default(12).nullish(),\n        titleFontWeight: z.number().default(400).nullish()\n    }).nullish(),\n    grid: z.object({\n        visible: z.boolean().default(false).nullish(),\n        gridColor: z.string().default('rgba(54, 65, 89, 0.15)').nullish(),\n        gridWidth: z.number().default(0.5).nullish()\n    }).nullish()\n});\nconst zCustomThemeConfig = z.object({\n    config: zConfig.nullish()\n});\nconst zCustomTheme = z.record(z.string(), zCustomThemeConfig).nullish();\nconst zTheme = z.string();\nconst zSelector = z.union([\n    z.string(),\n    z.number(),\n    z.object({\n        field: z.string(),\n        operator: z[\"enum\"]([\n            '=',\n            '==',\n            '!=',\n            '>',\n            '<',\n            '>=',\n            '<=',\n            'between'\n        ]).nullish(),\n        op: z[\"enum\"]([\n            '=',\n            '==',\n            '!=',\n            '>',\n            '<',\n            '>=',\n            '<=',\n            'between'\n        ]).nullish(),\n        value: z.union([\n            z.string(),\n            z.number(),\n            z.array(z.union([\n                z.string(),\n                z.number()\n            ]))\n        ])\n    }),\n    z.object({\n        field: z.string(),\n        operator: z[\"enum\"]([\n            'in',\n            'not in'\n        ]).nullish(),\n        op: z[\"enum\"]([\n            'in',\n            'not in'\n        ]).nullish(),\n        value: z.union([\n            z.string(),\n            z.number(),\n            z.array(z.union([\n                z.string(),\n                z.number()\n            ]))\n        ])\n    })\n]);\nconst zSelectors = z.array(zSelector);\nconst zBarStyle = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).nullish(),\n    barVisible: z.boolean().nullish(),\n    barColor: z.string().nullish(),\n    barColorOpacity: z.number().nullish(),\n    barBorderColor: z.string().nullish(),\n    barBorderWidth: z.number().nullish(),\n    barBorderStyle: z.union([\n        z.literal('solid'),\n        z.literal('dashed'),\n        z.literal('dotted')\n    ]).nullish(),\n    barRadius: z.union([\n        z.number(),\n        z.array(z.number())\n    ]).nullish()\n});\nconst zPointStyle = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).nullish(),\n    pointVisible: z.boolean().nullish(),\n    pointSize: z.number().nullish(),\n    pointColor: z.string().nullish(),\n    pointColorOpacity: z.number().nullish(),\n    pointBorderColor: z.string().nullish(),\n    pointBorderWidth: z.number().nullish(),\n    pointBorderStyle: z.union([\n        z[\"enum\"]([\n            'solid',\n            'dashed',\n            'dotted'\n        ])\n    ]).nullish()\n});\nconst zLineStyle = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).nullish(),\n    lineVisible: z.boolean().nullish(),\n    lineSmooth: z.boolean().nullish(),\n    lineColor: z.string().nullish(),\n    lineColorOpacity: z.number().nullish(),\n    lineWidth: z.number().nullish(),\n    lineStyle: z.union([\n        z[\"enum\"]([\n            'solid',\n            'dashed',\n            'dotted'\n        ])\n    ]).nullish()\n});\nconst zAreaStyle = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).nullish(),\n    areaVisible: z.boolean().nullish(),\n    areaColor: z.string().nullish(),\n    areaColorOpacity: z.number().nullish()\n});\nconst zMarkStyle = z.object({\n    barStyle: zBarStyle.or(z.array(zBarStyle)).nullish(),\n    pointStyle: zPointStyle.or(z.array(zPointStyle)).nullish(),\n    lineStyle: zLineStyle.or(z.array(zLineStyle)).nullish(),\n    areaStyle: zAreaStyle.or(z.array(zAreaStyle)).nullish()\n});\nconst zAnnotationPoint = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]),\n    text: z.string().or(z.array(z.string())).nullish(),\n    textColor: z.string().default('#ffffff').nullish(),\n    textFontSize: z.number().default(12).nullish(),\n    textFontWeight: z.number().default(400).nullish(),\n    textAlign: z[\"enum\"]([\n        'left',\n        'right',\n        'center'\n    ]).default('center').nullish(),\n    textBaseline: z[\"enum\"]([\n        'top',\n        'middle',\n        'bottom'\n    ]).default('middle').nullish(),\n    textBackgroundVisible: z.boolean().default(true).nullish(),\n    textBackgroundColor: z.string().default('#212121').nullish(),\n    textBackgroundBorderColor: z.string().nullish(),\n    textBackgroundBorderWidth: z.number().default(1).nullish(),\n    textBackgroundBorderRadius: z.number().default(4).nullish(),\n    textBackgroundPadding: z.number().nullish(),\n    offsetY: z.number().default(0).nullish(),\n    offsetX: z.number().default(0).nullish()\n});\nconst zAnnotationVerticalLine = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).nullish(),\n    xValue: z.union([\n        z.number(),\n        z.string(),\n        z.array(z.union([\n            z.number(),\n            z.string()\n        ]))\n    ]).nullish(),\n    text: z.string().or(z.array(z.string())).nullish(),\n    textPosition: z[\"enum\"]([\n        'outsideStart',\n        'outsideEnd',\n        'outsideMiddle',\n        'insideStart',\n        'insideMiddle',\n        'insideEnd'\n    ]).default('insideEnd').nullish(),\n    textColor: z.string().default('#ffffff').nullish(),\n    textFontSize: z.number().default(12).nullish(),\n    textFontWeight: z.number().default(400).nullish(),\n    textAlign: z[\"enum\"]([\n        'left',\n        'right',\n        'center'\n    ]).default('right').nullish(),\n    textBaseline: z[\"enum\"]([\n        'top',\n        'middle',\n        'bottom'\n    ]).default('top').nullish(),\n    textBackgroundVisible: z.boolean().default(true).nullish(),\n    textBackgroundColor: z.string().default('#212121').nullish(),\n    textBackgroundBorderColor: z.string().default('#212121').nullish(),\n    textBackgroundBorderRadius: z.number().default(4).nullish(),\n    textBackgroundBorderWidth: z.number().default(1).nullish(),\n    textBackgroundPadding: z.number().default(2).nullish(),\n    lineVisible: z.boolean().default(true).nullish(),\n    lineColor: z.string().default('#212121').nullish(),\n    lineWidth: z.number().default(1).nullish(),\n    lineStyle: z.union([\n        z.literal('solid'),\n        z.literal('dashed'),\n        z.literal('dotted')\n    ]).default('dashed').nullish()\n});\nconst zAnnotationHorizontalLine = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).nullish(),\n    yValue: z.union([\n        z.number(),\n        z.string(),\n        z.array(z.union([\n            z.number(),\n            z.string()\n        ]))\n    ]).nullish(),\n    text: z.string().or(z.array(z.string())).nullish(),\n    textPosition: z[\"enum\"]([\n        'outsideStart',\n        'outsideEnd',\n        'outsideMiddle',\n        'insideStart',\n        'insideMiddle',\n        'insideEnd'\n    ]).default('insideEnd').nullish(),\n    textColor: z.string().default('#ffffff').nullish(),\n    textFontSize: z.number().default(12).nullish(),\n    textFontWeight: z.number().default(400).nullish(),\n    textAlign: z[\"enum\"]([\n        'left',\n        'right',\n        'center'\n    ]).default('right').nullish(),\n    textBaseline: z[\"enum\"]([\n        'top',\n        'middle',\n        'bottom'\n    ]).default('top').nullish(),\n    lineVisible: z.boolean().default(true).nullish(),\n    lineColor: z.string().default('#212121').nullish(),\n    lineWidth: z.number().default(1).nullish(),\n    lineStyle: z.union([\n        z.literal('solid'),\n        z.literal('dashed'),\n        z.literal('dotted')\n    ]).default('dashed').nullish(),\n    textBackgroundVisible: z.boolean().default(true).nullish(),\n    textBackgroundColor: z.string().default('#212121').nullish(),\n    textBackgroundBorderColor: z.string().default('#212121').nullish(),\n    textBackgroundBorderRadius: z.number().default(4).nullish(),\n    textBackgroundBorderWidth: z.number().default(1).nullish(),\n    textBackgroundPadding: z.number().default(2).nullish()\n});\nconst zAnnotationArea = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]),\n    textPosition: z[\"enum\"]([\n        'top',\n        'topRight',\n        'topLeft',\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'left',\n        'right'\n    ]).default('top').nullish(),\n    text: z.string().or(z.array(z.string())).nullish(),\n    textColor: z.string().default('#ffffff').nullish(),\n    textFontSize: z.number().default(12).nullish(),\n    textFontWeight: z.number().default(400).nullish(),\n    textAlign: z[\"enum\"]([\n        'left',\n        'right',\n        'center'\n    ]).default('center').nullish(),\n    textBaseline: z[\"enum\"]([\n        'top',\n        'middle',\n        'bottom'\n    ]).default('top').nullish(),\n    textBackgroundVisible: z.boolean().default(true).nullish(),\n    textBackgroundColor: z.string().default('#191d24').nullish(),\n    textBackgroundBorderColor: z.string().default('#191d24').nullish(),\n    textBackgroundBorderWidth: z.number().default(1).nullish(),\n    textBackgroundBorderRadius: z.number().default(4).nullish(),\n    textBackgroundPadding: z.number().default(4).nullish(),\n    areaColor: z.string().default('#888888').nullish(),\n    areaColorOpacity: z.number().default(0.15).nullish(),\n    areaBorderColor: z.string().default('#888888').nullish(),\n    areaBorderWidth: z.number().default(1).nullish(),\n    areaBorderRadius: z.number().default(4).nullish(),\n    outerPadding: z.number().default(4).nullish()\n});\nconst zAnnotation = z.object({\n    annotationPoint: zAnnotationPoint.or(z.array(zAnnotationPoint)).nullish(),\n    annotationVerticalLine: zAnnotationVerticalLine.or(z.array(zAnnotationVerticalLine)).nullish(),\n    annotationHorizontalLine: zAnnotationHorizontalLine.or(z.array(zAnnotationHorizontalLine)).nullish(),\n    annotationArea: zAnnotationArea.or(z.array(zAnnotationArea)).nullish()\n});\nconst zSort = z.object({\n    order: z[\"enum\"]([\n        'asc',\n        'desc'\n    ]).default('asc'),\n    orderBy: z.string().nullish(),\n    customOrder: z.array(z.any()).nullish()\n});\nconst zSortLegend = z.object({\n    order: z[\"enum\"]([\n        'asc',\n        'desc'\n    ]).default('asc'),\n    orderBy: z.string().nullish(),\n    customOrder: z.array(z.any()).nullish()\n});\nconst zAnalysis = z.object({\n    orderMapping: z.record(z.string(), z.array(z.string())).nullish()\n});\nconst zLocale = z[\"enum\"]([\n    'zh-CN',\n    'en-US'\n]).default('zh-CN');\nconst zTable = z.object({\n    chartType: z.literal('table'),\n    dataset: zDataset.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    borderColor: z.string().nullish(),\n    bodyFontSize: z.number().nullish(),\n    bodyFontColor: z.string().nullish(),\n    bodyBackgroundColor: z.string().nullish(),\n    hoverBodyBackgroundColor: z.string().nullish(),\n    hoverBodyInlineBackgroundColor: z.string().nullish(),\n    headerFontSize: z.number().nullish(),\n    headerFontColor: z.string().nullish(),\n    headerBackgroundColor: z.string().nullish(),\n    hoverHeaderBackgroundColor: z.string().nullish(),\n    hoverHeaderInlineBackgroundColor: z.string().nullish(),\n    selectedBorderColor: z.string().nullish(),\n    selectedBackgroundColor: z.string().nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zPivotTable = z.object({\n    chartType: z.literal('pivotTable'),\n    dataset: zDataset.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasures.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    borderColor: z.string().nullish(),\n    bodyFontSize: z.number().nullish(),\n    bodyFontColor: z.string().nullish(),\n    bodyBackgroundColor: z.string().nullish(),\n    hoverBodyBackgroundColor: z.string().nullish(),\n    hoverBodyInlineBackgroundColor: z.string().nullish(),\n    headerFontSize: z.number().nullish(),\n    headerFontColor: z.string().nullish(),\n    headerBackgroundColor: z.string().nullish(),\n    hoverHeaderBackgroundColor: z.string().nullish(),\n    hoverHeaderInlineBackgroundColor: z.string().nullish(),\n    selectedBorderColor: z.string().nullish(),\n    selectedBackgroundColor: z.string().nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zLine = z.object({\n    chartType: z.literal('line'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairLine: zCrosshairLine.nullish(),\n    sort: zSort.nullish(),\n    sortLegend: zSortLegend.nullish(),\n    theme: zTheme.nullish(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).nullish(),\n    lineStyle: z.array(zLineStyle).or(zLineStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zColumn = z.object({\n    chartType: z.literal('column'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    stackCornerRadius: zStackCornerRadius.nullish(),\n    theme: zTheme.nullish(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zColumnParallel = z.object({\n    chartType: z.literal('columnParallel'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    stackCornerRadius: zStackCornerRadius.nullish(),\n    theme: zTheme.nullish(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zColumnPercent = z.object({\n    chartType: z.literal('columnPercent'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    stackCornerRadius: zStackCornerRadius.nullish(),\n    theme: zTheme.nullish(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zBar = z.object({\n    chartType: z.literal('bar'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXLinearAxis.nullish(),\n    yAxis: zYBandAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    stackCornerRadius: zStackCornerRadius.nullish(),\n    theme: zTheme.nullish(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zBarParallel = z.object({\n    chartType: z.literal('barParallel'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXLinearAxis.nullish(),\n    yAxis: zYBandAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    stackCornerRadius: zStackCornerRadius.nullish(),\n    theme: zTheme.nullish(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zBarPercent = z.object({\n    chartType: z.literal('barPercent'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXLinearAxis.nullish(),\n    yAxis: zYBandAxis.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    stackCornerRadius: zStackCornerRadius.nullish(),\n    theme: zTheme.nullish(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zArea = z.object({\n    chartType: z.literal('area'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairLine: zCrosshairLine.nullish(),\n    theme: zTheme.nullish(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).nullish(),\n    lineStyle: z.array(zLineStyle).or(zLineStyle).nullish(),\n    areaStyle: z.array(zAreaStyle).or(zAreaStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zAreaPercent = z.object({\n    chartType: z.literal('areaPercent'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXBandAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairLine: zCrosshairLine.nullish(),\n    theme: zTheme.nullish(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).nullish(),\n    lineStyle: z.array(zLineStyle).or(zLineStyle).nullish(),\n    areaStyle: z.array(zAreaStyle).or(zAreaStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zScatter = z.object({\n    chartType: z.literal('scatter'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    scatterMeasures: zScatterMeasures.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    xAxis: zXLinearAxis.nullish(),\n    yAxis: zYLinearAxis.nullish(),\n    crosshairLine: zCrosshairLine.nullish(),\n    theme: zTheme.nullish(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zDualAxis = z.object({\n    chartType: z.literal('dualAxis'),\n    dataset: zDataset.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    dualMeasures: zDualMeasures.nullish(),\n    dualChartType: z.array(zDualChartType).or(zDualChartType).nullish(),\n    alignTicks: z.array(z.boolean()).or(z.boolean()).nullish(),\n    primaryYAxis: z.array(zYLinearAxis).or(zYLinearAxis).nullish(),\n    secondaryYAxis: z.array(zYLinearAxis).or(zYLinearAxis).nullish(),\n    xAxis: zXBandAxis.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    crosshairRect: zCrosshairRect.nullish(),\n    sort: zSort.nullish(),\n    sortLegend: zSortLegend.nullish(),\n    theme: zTheme.nullish(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).nullish(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).nullish(),\n    lineStyle: z.array(zLineStyle).or(zLineStyle).nullish(),\n    areaStyle: z.array(zAreaStyle).or(zAreaStyle).nullish(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).nullish(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).nullish(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).nullish(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).nullish(),\n    locale: zLocale.nullish()\n});\nconst zRose = z.object({\n    chartType: z.literal('rose'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zRoseParallel = z.object({\n    chartType: z.literal('roseParallel'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zPie = z.object({\n    chartType: z.literal('pie'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zDonut = z.object({\n    chartType: z.literal('donut'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zRadar = z.object({\n    chartType: z.literal('radar'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zFunnel = z.object({\n    chartType: z.literal('funnel'),\n    dataset: zDataset.nullish(),\n    encoding: zEncoding.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zColorLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zHeatmap = z.object({\n    chartType: z.literal('heatmap'),\n    dataset: zDataset.nullish(),\n    dimensions: zDimensions.nullish(),\n    measures: zMeasureTree.nullish(),\n    backgroundColor: zBackgroundColor.nullish(),\n    color: zColor.nullish(),\n    label: zLabel.nullish(),\n    legend: zColorLegend.nullish(),\n    tooltip: zTooltip.nullish(),\n    theme: zTheme.nullish(),\n    locale: zLocale.nullish()\n});\nconst zVSeed = z.discriminatedUnion('chartType', [\n    zTable,\n    zPivotTable,\n    zLine,\n    zColumn,\n    zColumnParallel,\n    zColumnPercent,\n    zBar,\n    zBarParallel,\n    zBarPercent,\n    zArea,\n    zAreaPercent,\n    zScatter,\n    zDualAxis,\n    zPie,\n    zDonut,\n    zRose,\n    zRoseParallel,\n    zRadar,\n    zFunnel,\n    zHeatmap\n]);\nconst zAdvancedVSeed = z.object({\n    chartType: zChartType,\n    dataset: zDataset,\n    datasetReshapeInfo: zDatasetReshapeInfo,\n    dimensions: zDimensionTree,\n    measures: zMeasureTree,\n    encoding: zEncoding,\n    config: zConfig,\n    analysis: zAnalysis,\n    theme: zTheme,\n    markStyle: zMarkStyle,\n    customTheme: zCustomThemeConfig,\n    annotation: zAnnotation,\n    locale: zLocale\n});\nexport { AngleEncoding, Builder, ColorEncoding, ColorIdEncoding, DetailEncoding, FoldMeasureId, FoldMeasureName, FoldMeasureValue, FoldPrimaryMeasureValue, FoldSecondaryMeasureValue, FoldXMeasureValue, FoldYMeasureValue, MeasureName, ORIGINAL_DATA, Separator, XEncoding, YEncoding, areaAdvancedPipeline, areaPercentAdvancedPipeline, areaPercentSpecPipeline, areaSpecPipeline, autoFormatter, autoNumFormatter, barAdvancedPipeline, barParallelAdvancedPipeline, barParallelSpecPipeline, barPercentAdvancedPipeline, barPercentSpecPipeline, barSpecPipeline, columnAdvancedPipeline, columnParallelAdvancedPipeline, columnParallelSpecPipeline, columnPercentAdvancedPipeline, columnPercentSpecPipeline, columnSpecPipeline, createFormatter, createNumFormatter, darkTheme, dataReshapeByEncoding, donutAdvancedPipeline, donutSpecPipeline, dualAxisAdvancedPipeline, dualAxisSpecPipeline, execPipeline, findAllDimensions, findAllMeasures, findFirstMeasure, findMeasureById, foldMeasures, funnelAdvancedPipeline, funnelSpecPipeline, heatmapAdvancedPipeline, heatmapSpecPipeline, i18n, intl, isDimensionSelector, isMeasure, isMeasureGroup, isMeasureSelector, isMeasures, isPartialDatumSelector, isPivotChart, isPivotTable, isTable, isVChart, isVTable, isValueSelector, lightTheme, lineAdvancedPipeline, lineSpecPipeline, measureDepth, pieAdvancedPipeline, pieSpecPipeline, pivotTableAdvancedPipeline, pivotTableSpecPipeline, preorderTraverse, radarAdvancedPipeline, radarSpecPipeline, registerAll, registerArea, registerAreaPercent, registerBar, registerBarParallel, registerBarPercent, registerColumn, registerColumnParallel, registerColumnPercent, registerCustomTheme, registerDarkTheme, registerDonut, registerFunnel, registerHeatmap, registerLightTheme, registerLine, registerPie, registerPivotTable, registerRadar, registerRose, registerRoseParallel, registerScatter, registerTable, roseAdvancedPipeline, roseParallelAdvancedPipeline, roseParallelSpecPipeline, roseSpecPipeline, scatterAdvancedPipeline, scatterSpecPipeline, selector_selector as selector, tableAdvancedPipeline, tableSpecPipeline, unfoldDimensions, updateAdvanced, updateSpec, zAdvancedVSeed, zAnalysis, zAnnotation, zAnnotationArea, zAnnotationHorizontalLine, zAnnotationPoint, zAnnotationVerticalLine, zArea, zAreaConfig, zAreaPercent, zAreaPercentConfig, zAreaStyle, zAxis, zBackgroundColor, zBar, zBarConfig, zBarParallel, zBarParallelConfig, zBarPercent, zBarPercentConfig, zBarStyle, zChartType, zColor, zColorLegend, zColumn, zColumnConfig, zColumnParallel, zColumnParallelConfig, zColumnPercent, zColumnPercentConfig, zConfig, zCrosshairLine, zCrosshairRect, zCustomTheme, zCustomThemeConfig, zDataset, zDatasetReshapeInfo, zDatum, zDimension, zDimensionGroup, zDimensionTree, zDimensions, zDonut, zDonutConfig, zDualAxis, zDualAxisConfig, zDualChartType, zDualMeasure, zDualMeasures, zEncoding, zFoldInfo, zFunnel, zFunnelConfig, zHeatmap, zHeatmapConfig, zLabel, zLegend, zLine, zLineConfig, zLineStyle, zLinearColor, zLocale, zMarkStyle, zMeasure, zMeasureGroup, zMeasureTree, zMeasures, zNumFormat, zPie, zPieConfig, zPivotTable, zPivotTableConfig, zPointStyle, zRadar, zRadarConfig, zRose, zRoseConfig, zRoseParallel, zRoseParallelConfig, zScatter, zScatterConfig, zScatterMeasure, zScatterMeasures, zSort, zSortLegend, zStackCornerRadius, zTable, zTableConfig, zTheme, zTooltip, zUnfoldInfo, zVSeed, zXBandAxis, zXLinearAxis, zYBandAxis, zYLinearAxis };\n\n//# sourceMappingURL=index.js.map"],"names":["i","performance","Date","Error","e","console","JSON","t","r","c","Array","Object","l","Intl","Number","String","h","Math","Set","n","d","a","s","u"],"mappings":"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K,IAC/B,EAAOA,KAAK,GAAG,IAAI,EAAO,KAAK,IACrC,MAAO,CACH,CACI,EAAG,EACH,EAAG,CACP,EACA,CACI,EAAG,EACH,EAAG,CACP,EACA,CACI,EAAG,EACH,EAAG,CACP,EACA,CACI,EAAG,EACH,EAAG,CACP,EACH,AACL,CACA,MAAO,EAAE,AACb,EACA,MAAO,CACH,SAAU,CAAW,CAAC,GAAgB,MAAM,CAC5C,QAAS,GACT,KAAMV,EACN,MAAO,CACH,GAAI,EACJ,UAAW,EACX,aAAc,EACd,OAAQ,EACR,UAAW,EACX,KAAM,EACN,SAAU,EACV,WAAY,CAChB,EACA,gBAAiB,CACb,QAAS,EACT,QAAS,EACT,MAAO,CACH,GAAI,EACJ,aAAc,GAA8B,EAC5C,KAAM,EACN,OAAQ,EACR,UAAW,CACf,CACJ,CACJ,EACA,KAAM,CACF,MAAO,CACH,QAAS,GACT,KAAM,EACN,YAAa,EACb,OAAQ,EACR,UAAW,EACX,aAAc,CAClB,CACJ,CACJ,CACJ,GACA,MAAO,CACH,GAAG,CAAI,CACP,SAAU,CACd,CACJ,EAiDM,GAAqB,CACvB,GAjDW,CACX,GACA,GACA,GACA,GAAa,GAAa,IAC1B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAAa,GAAgB,IAC7B,GAAkB,IAClB,GACA,GACA,GACA,GACH,CACmB,CAChB,GACA,GACA,GACA,GACA,GAAgC,CAC5B,GACA,GACA,GACA,GAAa,GAAa,IAC1B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAAkB,IAClB,GACA,GACA,GACA,GACH,EACD,GACA,GACA,GAAa,GAAqB,IACrC,EAGA,CACK,GAAiB,KACnB,EAAQ,oBAAoB,CAAC,MAAM,CAAG,GACtC,EAAQ,gBAAgB,CAAC,MAAM,CAAG,EACtC,EACM,GAAiC,CACnC,GACA,GACA,GACA,GACA,GACA,GACA,GAAa,CACT,GACH,CAAE,CACC,GACH,EACD,GACA,GA/yEyB,GAizEzB,EACA,GACA,GACH,CACK,GAAqB,CAAC,EAAM,KAC9B,IAAM,EAAS,CACX,GAAG,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,GAAmB,CACrB,GArDc,CACd,GACA,GACA,GAAa,GAAa,IAC1B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAAa,GAAgB,IAC7B,GACA,GAAoB,IACpB,GACA,GAAmB,IACnB,GAAmB,IACnB,GACA,GACA,GACA,GACH,CACiB,CACd,GACA,GACA,GACA,GACA,GAAgC,CAC5B,GACA,GAAa,GAAa,IAC1B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAAoB,IACpB,GACA,GAAmB,IACnB,GAAmB,IACnB,GACA,GACA,GACA,GACH,EACD,GACA,GACA,GAAa,GAAqB,IACrC,EAGA,CACK,GAAe,KACjB,EAAQ,oBAAoB,CAAC,IAAI,CAAG,GACpC,EAAQ,gBAAgB,CAAC,IAAI,CAAG,EACpC,EACM,GAA8B,CAChC,GACA,GACA,GACA,GACA,GACA,GACA,GAAa,CACT,GACH,CAAE,CACC,GACH,EACD,GACA,GAztGsB,GA2tGtB,EACA,GACA,GACH,CAuDK,GAA0B,CAC5B,GAvDgB,CAChB,GACA,GACA,GAAa,GAAa,IAC1B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAAa,GAAgB,IAC7B,GACA,GAAoB,IACpB,GACA,GAAmB,IACnB,GAAmB,IACnB,GACA,GACA,GACA,GACH,CACwB,CACrB,GACA,GACA,GACA,GACA,GAAgC,CAC5B,GACA,GACA,GAAa,GAAa,IAC1B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAAoB,IACpB,GACA,GAAmB,IACnB,GAAmB,IACnB,GACA,GACA,GACA,GACH,EACD,GACA,GACA,GAAa,GAAqB,IACrC,EAGA,CACK,GAAsB,KACxB,EAAQ,oBAAoB,CAAC,WAAW,CAAG,GAC3C,EAAQ,gBAAgB,CAAC,WAAW,CAAG,EAC3C,EAgBM,GAAyC,CAAC,EAAU,KACtD,EAAS,OAAO,CAAG,QAAO,EAAS,GAAG,CAAC,AAAC,GAAO,EAAK,EAAE,GACtD,EAAS,CAAC,CAAG,QAAO,EAAS,MAAM,CAAC,AAAC,GAAO,UAAY,EAAK,QAAQ,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S,EACT,UAAW,YACX,SAAU,KACV,eAAgB,UAChB,cAAe,GACf,gBAAiB,GACrB,CACJ,EACM,EAAc,CAChB,YAAa,UACb,aAAc,GACd,cAAe,UACf,oBAAqB,cACrB,eAAgB,GAChB,gBAAiB,UACjB,sBAAuB,UACvB,yBAA0B,UAC1B,+BAAgC,YAChC,2BAA4B,UAC5B,iCAAkC,YAClC,oBAAqB,UACrB,wBAAyB,YACzB,gBAAiB,aACrB,EACA,MAAO,CACH,OAAQ,CACJ,MAAO,EACP,WAAY,EACZ,KAAM,CACF,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,eACJ,EACA,OAAQ,CACJ,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,eAAgB,CACZ,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,cAAe,CACX,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,IAAK,CACD,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,YAAa,CACT,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,WAAY,CACR,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,KAAM,CACF,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,eACJ,EACA,YAAa,CACT,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,eACJ,EACA,QAAS,CACL,GAAG,CAAU,CACb,MAAO,CACH,GAAG,CAAU,CACb,KAAM,CACF,GAAG,EAAW,IAAI,CAClB,QAAS,EACb,CACJ,EACA,MAAO,CACH,GAAG,CAAU,CACb,KAAM,CACF,GAAG,EAAW,IAAI,CAClB,QAAS,EACb,CACJ,EACA,eACJ,EACA,SAAU,CACN,GAAG,CAAU,CACb,MAAO,EACP,aAAc,EACd,eAAgB,CACZ,GAAG,CAAU,CACb,KAAM,CACF,QAAS,EACb,CACJ,EACA,cAAe,CACX,QAAS,SACT,UAAW,MACf,EACA,eACJ,EACA,IAAK,CACD,GAAG,CAAU,AACjB,EACA,MAAO,CACH,GAAG,CAAU,AACjB,EACA,MAAO,CACH,GAAG,CAAU,AACjB,EACA,KAAM,CACF,GAAG,CAAU,AACjB,EACA,aAAc,CACV,GAAG,CAAU,AACjB,EACA,OAAQ,CACJ,GAAG,CAAU,AACjB,EACA,QAAS,CACL,GAAG,CAAU,AACjB,CACJ,CACJ,CACJ,EACM,GAAY,KACd,IAAM,EAAa,CACf,KAAM,GACN,KAAM,GACN,MAAO,CACH,QAAS,GACT,WAAY,EACZ,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,MAAO,CACH,QAAS,GACT,UAAW,GACX,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,KAAM,CACF,QAAS,GACT,UAAW,UACX,UAAW,EACf,EACA,KAAM,CACF,QAAS,GACT,WAAY,GACZ,SAAU,EACV,UAAW,SACf,EACA,KAAM,CACF,QAAS,GACT,UAAW,UACX,UAAW,CACf,CACJ,EACM,EAAW,CACb,cAAe,GACf,iBAAkB,EAClB,eAAgB,GAChB,qBAAsB,GACtB,gBAAiB,GACjB,0BAA2B,CACvB,EACA,IACA,IACH,CACD,MAAO,CACH,QAAS,GACT,WAAY,EACZ,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,MAAO,CACH,QAAS,GACT,UAAW,GACX,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,KAAM,CACF,QAAS,GACT,UAAW,UACX,UAAW,EACf,EACA,KAAM,CACF,QAAS,GACT,WAAY,GACZ,SAAU,EACV,UAAW,SACf,EACA,KAAM,CACF,QAAS,GACT,UAAW,UACX,UAAW,CACf,CACJ,EACM,EAAc,CAChB,GAAG,CAAQ,CACX,cAAe,GACf,iBAAkB,EAClB,eAAgB,GAChB,qBAAsB,KAAK,EAC3B,gBAAiB,GACjB,0BAA2B,CACvB,EACA,IACA,IACH,AACL,EACM,EAAgB,CAClB,QAAS,GACT,aAAc,GACd,UAAW,UACX,WAAY,UACZ,qBAAsB,SAC1B,EACM,EAAgB,CAClB,QAAS,GACT,aAAc,GACd,UAAW,UACX,WAAY,UACZ,qBAAsB,SAC1B,EACM,EAAa,CACf,gBAAiB,cACjB,MAAO,CACH,kBAAmB,CACf,UACA,UACH,CACD,YAAa,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACH,AACL,EACA,MAAO,CACH,OAAQ,EACZ,EACA,QAAS,CACL,OAAQ,EACZ,EACA,OAAQ,CACJ,OAAQ,GACR,OAAQ,GACR,QAAS,EACT,SAAU,KACV,UAAW,YACX,eAAgB,UAChB,cAAe,GACf,gBAAiB,GACrB,CACJ,EACM,EAAc,CAChB,YAAa,UACb,aAAc,GACd,cAAe,UACf,oBAAqB,cACrB,eAAgB,GAChB,gBAAiB,UACjB,sBAAuB,UACvB,yBAA0B,YAC1B,+BAAgC,YAChC,2BAA4B,YAC5B,iCAAkC,UAClC,oBAAqB,UACrB,wBAAyB,WAC7B,EACA,MAAO,CACH,OAAQ,CACJ,MAAO,EACP,WAAY,EACZ,KAAM,CACF,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,CACnB,EACA,OAAQ,CACJ,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,eAAgB,CACZ,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,cAAe,CACX,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,IAAK,CACD,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,YAAa,CACT,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EAC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"}