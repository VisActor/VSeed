"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["8522"],{51896:function(e,s,d){d.r(s),d.d(s,{default:()=>l});var i=d(31549),n=d(6603);function c(e){let s=Object.assign({h1:"h1",a:"a",div:"div",p:"p",ul:"ul",li:"li",code:"code",h2:"h2",ol:"ol"},(0,n.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.h1,{id:"dsl-设计",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#dsl-设计",children:"#"}),"DSL 设计"]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive info",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"意义"}),(0,i.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,i.jsx)(s.p,{children:"VSeed 是声明式 DSL"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"DSL 设计是领域问题的表达艺术, 能有效地将复杂问题简单化。"}),"\n",(0,i.jsx)(s.li,{children:"DSL 让熟悉的人像书写母语一样自然地编码。当你熟悉VSeed后, 渲染图表就像在写自然语言一样简单。"}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"VChart"}),"、",(0,i.jsx)(s.code,{children:"VTable"}),"亦如此"]}),"\n"]})]})]}),"\n",(0,i.jsxs)(s.div,{className:"rspress-directive tip",children:[(0,i.jsx)(s.div,{className:"rspress-directive-title",children:"TIP"}),(0,i.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"声明式 DSL"}),' 关注"是什么" （What）。描述期望的结果或最终状态应该是什么样子，而不关心计算机内部如何达到这个状态的具体步骤。']}),(0,i.jsx)(s.code,{children:"命令式 DSL"}),(0,i.jsx)(s.p,{children:'关注"如何做" （How）。提供一系列明确的、逐步执行的指令，告诉计算机如何一步步达到目标状态。'})]})]}),"\n",(0,i.jsxs)(s.h2,{id:"vseed-取舍",children:[(0,i.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#vseed-取舍",children:"#"}),"VSeed 取舍"]}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"领域聚焦性（Focus）"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"牺牲一定的通用性, 专注于解决特定领域的问题。因此VSeed的核心目标 不深入满足一个图表类型的所有需求, 而是专注于图表类型之前的数据转换。其余的功能, 如主题、交互、动画等."}),"\n",(0,i.jsxs)(s.ol,{start:"2",children:["\n",(0,i.jsx)(s.li,{children:"抽象层级（Abstraction Level）"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"VSeed"})," 提供了较高的抽象层级, 使得用户可以专注于解决问题, 而不是关注底层的实现细节。从而提升开发效率, 例如切换图表类型, 改一个参数即可, 而不需要关注如何切换的细节"]}),"\n",(0,i.jsxs)(s.ol,{start:"3",children:["\n",(0,i.jsx)(s.li,{children:"约束即优势（Constraint is Advantage）"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"VSeed"})," 强调约束, 接收一个",(0,i.jsx)(s.code,{children:"VSeed DSL"}),", 输出一个",(0,i.jsx)(s.code,{children:"VTable"}),"或者",(0,i.jsx)(s.code,{children:"VChart"}),"的",(0,i.jsx)(s.code,{children:"spec"}),", 这使得用户可以更灵活的控制单个图表的功能, ",(0,i.jsx)(s.code,{children:"VSeed"}),"非是一个黑盒."]}),"\n",(0,i.jsxs)(s.p,{children:["因此VSeed可以简单的认为是一个",(0,i.jsx)(s.code,{children:"Spec Builder"}),", 不破坏",(0,i.jsx)(s.code,{children:"VTable"}),"或者",(0,i.jsx)(s.code,{children:"VChart"}),"的原始功能, 任何",(0,i.jsx)(s.code,{children:"VChart"}),", ",(0,i.jsx)(s.code,{children:"VTable"}),"用户都可以快速在现有的平台内接入",(0,i.jsx)(s.code,{children:"VSeed"})]})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,n.ah)(),e.components);return s?(0,i.jsx)(s,Object.assign({},e,{children:(0,i.jsx)(c,e)})):c(e)}let l=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["zh-CN%2Fdevelopment%2FdesignPhilosophy%2FdslDesign.md"]={toc:[{id:"vseed-取舍",text:"VSeed 取舍",depth:2}],title:"DSL 设计",headingTitle:"DSL 设计",frontmatter:{}}}}]);
//# sourceMappingURL=8522.efdc301b.js.map