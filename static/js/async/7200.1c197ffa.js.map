{"version":3,"file":"static/js/async/7200.1c197ffa.js","sources":["webpack://website/./docs/zh-CN/development/designPhilosophy/dataReshape/dataReshapeImplementation.md"],"sourcesContent":["const frontmatter = {};\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Playground from \"/home/runner/work/VSeed/VSeed/node_modules/.pnpm/@rspress+plugin-playground@1.45.3_@rspress+core@2.0.0-beta.28_@types+react@18.0.0_acorn_f6d4f2a217c455639d7206d79af6fedc/node_modules/@rspress/plugin-playground/static/global-components/Playground.tsx\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h1, {\n      id: \"数据重塑-实现\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#数据重塑-实现\",\n        children: \"#\"\n      }), \"数据重塑-实现\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rspress-directive info\",\n      children: [_jsx(_components.div, {\n        className: \"rspress-directive-title\",\n        children: \"简单而又巧妙\"\n      }), _jsxs(_components.div, {\n        className: \"rspress-directive-content\",\n        children: [_jsx(_components.p, {\n          children: \"\\n这是VSeed最有意思的, 也是最核心的模块, 看似复杂, 实则非常简单与巧妙, 仅仅不到200行代码.\"\n        }), _jsx(_components.p, {\n          children: \"只要善用foldMeasures 与 unfoldDimensions, 可以将任意指标维度, 转换为固定的指标与维度, 做到足够自由的可视化映射.\"\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"foldmeasures\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#foldmeasures\",\n        children: \"#\"\n      }), \"foldMeasures\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/VisActor/VSeed/blob/main/packages/vseed/src/dataReshape/foldMeasures.ts\",\n        rel: \"noopener noreferrer\",\n        target: \"_blank\",\n        children: \"源代码位置\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"foldMeasures 将所有的指标 \", _jsx(_components.code, {\n        children: \"fold\"\n      }), \" 为一个指标, 增加一个\", _jsx(_components.code, {\n        children: \"指标名称维度\"\n      }), \"和一个\", _jsx(_components.code, {\n        children: \"指标Id\"\n      }), \"维度, 所有的可能丢失信息都存储在\", _jsx(_components.code, {\n        children: \"foldInfo\"\n      }), \"内, 并且在这个过程中可以进行数据统计\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"特性\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#特性\",\n        children: \"#\"\n      }), \"特性\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"特性1: foldMeasures执行完之后, 一定只有1个指标字段, 即能够将多指标描述的数据, 都转换成1个指标; 将任意多指标数据对应一个图元\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"特性2: 1. 数据条目与图元（几何元素）的数据严格一致，一条数据对应一个图元\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"特性3: 该过程进行数据统计\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rspress-directive tip\",\n      children: [_jsx(_components.div, {\n        className: \"rspress-directive-title\",\n        children: \"最妙的地方!!!\"\n      }), _jsx(_components.div, {\n        className: \"rspress-directive-content\",\n        children: _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"1\"\n            }), \"个指标\", _jsx(_components.code, {\n              children: \"0\"\n            }), \"个维度, foldMeasures 后可以获得\", _jsx(_components.code, {\n              children: \"1\"\n            }), \"个指标\", _jsx(_components.code, {\n              children: \"2\"\n            }), \"个维度(包括指标名称和指标Id)\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"4\"\n            }), \"个指标\", _jsx(_components.code, {\n              children: \"1\"\n            }), \"个维度, 经过\", _jsx(_components.code, {\n              children: \"2\"\n            }), \"次foldMeasures 后可以获得\", _jsx(_components.code, {\n              children: \"2\"\n            }), \"个指标\", _jsx(_components.code, {\n              children: \"3\"\n            }), \"个维度(包括指标名称和指标Id), 从而完美的可以支持双轴图等场景.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"N\"\n            }), \"个指标\", _jsx(_components.code, {\n              children: \"0\"\n            }), \"个维度, 经过\", _jsx(_components.code, {\n              children: \"Y\"\n            }), \"(Y ≤ N)次foldMeasures 后, 可以获得\", _jsx(_components.code, {\n              children: \"Y\"\n            }), \"个指标和\", _jsx(_components.code, {\n              children: \"2\"\n            }), \"个维度(包括指标名称和指标Id)\"]\n          }), \"\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"最小可运行示例\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#最小可运行示例\",\n        children: \"#\"\n      }), \"最小可运行示例\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        meta: \"title=foldMeasures\",\n        children: \"const data = [\\n  { category: 'A', sales: 100, profit: 30 },\\n  { category: 'B', sales: 200, profit: 50 },\\n]\\n\\nconst measures = [\\n  { id: 'sales', alias: 'Sales' },\\n  { id: 'profit', alias: 'Profit' },\\n]\\n\\nfunction foldMeasures(dataset, measures, options) {\\n  const {\\n    measureId,\\n    measureName,\\n    measureValue,\\n    colorMeasureId,\\n    allowEmptyFold = true,\\n  } = options || {}\\n\\n  const foldInfo = {\\n    measureId,\\n    measureName,\\n    measureValue,\\n    statistics: {\\n      max: -Infinity,\\n      min: Infinity,\\n      sum: 0,\\n      count: 0,\\n      colorMin: Infinity,\\n      colorMax: -Infinity,\\n    },\\n    foldMap: {},\\n  }\\n\\n  const ids = measures.map(m => m.id)\\n  const result = []\\n\\n  for (const row of dataset) {\\n    for (const measure of measures) {\\n      const { id, alias } = measure\\n      const newRow = { ...row }\\n\\n      // 删除其他指标字段，避免重复\\n      for (const key of ids) {\\n        delete newRow[key]\\n      }\\n\\n      newRow[measureId] = id\\n      newRow[measureName] = alias || id\\n      newRow[measureValue] = row[id]\\n\\n      if (colorMeasureId) {\\n        const colorValue = row[colorMeasureId]\\n        newRow.color = colorValue\\n        foldInfo.statistics.colorMin = Math.min(foldInfo.statistics.colorMin, Number(colorValue))\\n        foldInfo.statistics.colorMax = Math.max(foldInfo.statistics.colorMax, Number(colorValue))\\n      }\\n\\n      const val = Number(row[id])\\n      foldInfo.statistics.min = Math.min(foldInfo.statistics.min, val)\\n      foldInfo.statistics.max = Math.max(foldInfo.statistics.max, val)\\n      foldInfo.statistics.sum += val\\n      foldInfo.statistics.count++\\n\\n      foldInfo.foldMap[id] = alias\\n\\n      result.push(newRow)\\n    }\\n  }\\n\\n  return { dataset: result, foldInfo }\\n}\\n\\nconst { dataset: foldedData, foldInfo } = foldMeasures(data, measures, {\\n  measureId: '__MeaId__',\\n  measureName: '__MeaName__',\\n  measureValue: '__MeaValue__',\\n})\\n\\nconsole.log(foldedData)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        meta: \"title=预期输出\",\n        children: \"[\\n  {\\n    \\\"category\\\": \\\"A\\\",\\n    \\\"__MeaId__\\\": \\\"sales\\\",\\n    \\\"__MeaName__\\\": \\\"Sales\\\",\\n    \\\"__MeaValue__\\\": 100\\n  },\\n  {\\n    \\\"category\\\": \\\"A\\\",\\n    \\\"__MeaId__\\\": \\\"profit\\\",\\n    \\\"__MeaName__\\\": \\\"Profit\\\",\\n    \\\"__MeaValue__\\\": 30\\n  },\\n  {\\n    \\\"category\\\": \\\"B\\\",\\n    \\\"__MeaId__\\\": \\\"sales\\\",\\n    \\\"__MeaName__\\\": \\\"Sales\\\",\\n    \\\"__MeaValue__\\\": 200\\n  },\\n  {\\n    \\\"category\\\": \\\"B\\\",\\n    \\\"__MeaId__\\\": \\\"profit\\\",\\n    \\\"__MeaName__\\\": \\\"Profit\\\",\\n    \\\"__MeaValue__\\\": 50\\n  }\\n]\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"unfolddimensions\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#unfolddimensions\",\n        children: \"#\"\n      }), \"unfoldDimensions\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/VisActor/VSeed/blob/main/packages/vseed/src/dataReshape/unfoldDimensions.ts\",\n        rel: \"noopener noreferrer\",\n        target: \"_blank\",\n        children: \"源代码位置\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"unfoldDimensions 在不丢失信息的前提下, 将任意的维度 \", _jsx(_components.code, {\n        children: \"concat\"\n      }), \" 为一个新的维度, 所有的增加的信息都存储在\", _jsx(_components.code, {\n        children: \"unfoldInfo\"\n      }), \"内.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"一个完整unfoldDimensions == 所有维度值转指标 + 一次foldMeasures\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但遍历dataset的开销是巨大的, 一次多余的 foldMeasures 会导致性能下降.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"foldMeasures 可以直接保证一条数据只有一个指标, 因此可以直接在源数据上进行单纯的合并, 就能巧妙的达到等价效果, 最终从而大幅度提升性能.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"经过思考, 理论上unfoldDimensions可以和foldMeasures完全合并, 在一次dataset 遍历中完成所有数据处理, 但为了可读性和可维护性, 在没有性能瓶颈的情况下, 暂定不合并.\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"特性-1\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#特性-1\",\n        children: \"#\"\n      }), \"特性\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"特性1: unfoldDimensions执行完之后, 一定只有1个指标字段,\\n特性2: 可以在不丢失原数据的情况下, 合并维度\"\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rspress-directive tip\",\n      children: [_jsx(_components.div, {\n        className: \"rspress-directive-title\",\n        children: \"最妙的地方!!!\"\n      }), _jsx(_components.div, {\n        className: \"rspress-directive-content\",\n        children: _jsxs(_components.ol, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"只要在foldMeasures后进行, 就可以通过最简单的 concat 操作, 即可完成展开维度与合并指标, 性能极其优异.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"任意的维度都能合并为一个全新的维度字段, 做到任意的视觉通道映射.\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"因为本身并不复杂, 所以理论上可以和 \", _jsx(_components.code, {\n              children: \"foldMeasures\"\n            }), \" 合并在一起, 降低遍历次数, 提升性能.\"]\n          }), \"\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"最小可运行示例-1\",\n      children: [_jsx(_components.a, {\n        className: \"header-anchor\",\n        \"aria-hidden\": \"true\",\n        href: \"#最小可运行示例-1\",\n        children: \"#\"\n      }), \"最小可运行示例\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const XEncoding = '__DimX__'\\nconst ColorEncoding = '__DimColor__'\\n/**\\n * 展开并合并视觉通道的维度, 在foldMeasures后合并维度, 所以不需要进行笛卡尔积\\n * @param {Array<Object>} dataset 原始数据集\\n * @param {Array<Object>} dimensions 维度数组，每个维度对象至少包含 id 字段\\n * @param {Object} encoding 编码对象，key为通道名，value为维度id数组\\n * @param {Object} options 配置项\\n *  - foldMeasureId: 折叠指标的字段名\\n *  - separator: 维度值拼接分隔符\\n *  - colorItemAsId: 是否只用颜色项作为 colorId，默认 false\\n * @returns {Object} { dataset, unfoldInfo }\\n */\\nfunction unfoldDimensions(dataset, dimensions, encoding, options) {\\n  const { foldMeasureId, separator, colorItemAsId } = options || {}\\n\\n  const unfoldInfo = {\\n    encodingX: XEncoding,\\n    encodingColor: ColorEncoding,\\n\\n    colorItems: [],\\n    colorIdMap: {},\\n  }\\n\\n  // 根据 encoding 过滤对应维度\\n  const xDimensions = encoding.x ? dimensions.filter(d => encoding.x.includes(d.id)) : []\\n  const colorDimensions = encoding.color ? dimensions.filter(d => encoding.color.includes(d.id)) : []\\n\\n  const colorItemsSet = new Set()\\n  const colorIdMap = {}\\n\\n  for (let i = 0; i < dataset.length; i++) {\\n    const datum = dataset[i]\\n\\n    applyEncoding(XEncoding, xDimensions, datum, separator)\\n    applyEncoding(ColorEncoding, colorDimensions, datum, separator)\\n\\n    const measureId = String(datum[foldMeasureId])\\n    const colorItem = String(datum[ColorEncoding])\\n    colorItemsSet.add(colorItem)\\n  }\\n\\n  unfoldInfo.colorItems = Array.from(colorItemsSet)\\n\\n  return {\\n    dataset,\\n    unfoldInfo,\\n  }\\n}\\n\\n/**\\n * 应用编码至数据中, 原地修改 datum\\n * @param {string} encoding 编码字段名\\n * @param {Array<Object>} dimensions 维度数组\\n * @param {Object} datum 单条数据\\n * @param {string} separator 拼接分隔符\\n */\\nfunction applyEncoding(encoding, dimensions, datum, separator) {\\n  if (encoding && dimensions.length) {\\n    datum[encoding] = dimensions.map(dim => String(datum[dim.id])).join(separator)\\n  }\\n}\\n\\n\\nconst dataset = [\\n  { \\\"category\\\": \\\"A\\\", \\\"__MeaId__\\\": \\\"sales\\\",  \\\"__MeaName__\\\":  \\\"Sales\\\",  \\\"__MeaValue__\\\": 100 },\\n  { \\\"category\\\": \\\"A\\\", \\\"__MeaId__\\\": \\\"profit\\\", \\\"__MeaName__\\\": \\\"Profit\\\",  \\\"__MeaValue__\\\": 30  },\\n  { \\\"category\\\": \\\"B\\\", \\\"__MeaId__\\\": \\\"sales\\\",  \\\"__MeaName__\\\":  \\\"Sales\\\",  \\\"__MeaValue__\\\": 200 },\\n  { \\\"category\\\": \\\"B\\\", \\\"__MeaId__\\\": \\\"profit\\\", \\\"__MeaName__\\\": \\\"Profit\\\",  \\\"__MeaValue__\\\": 50  }\\n]\\nconst dimensions = [\\n  { id: 'category'},\\n  { id: '__MeaName__'},\\n]\\n\\nconst encoding = {\\n  x: ['category'],\\n  color: ['__MeaName__'],\\n}\\n\\nconst options = {\\n  foldMeasureId: '__MeaId__',\\n  separator: '-',\\n  colorItemAsId: false,\\n}\\n\\nconst { dataset: unfoldedData, unfoldInfo } = unfoldDimensions(dataset, dimensions, encoding, options)\\n\\nconsole.log(unfoldedData)\\n\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        meta: \"title=预期输出\",\n        children: \"[\\n  {\\n    \\\"category\\\": \\\"A\\\",\\n    \\\"__MeaId__\\\": \\\"sales\\\",\\n    \\\"__MeaName__\\\": \\\"Sales\\\",\\n    \\\"__MeaValue__\\\": 100,\\n    \\\"__DimX__\\\": \\\"A\\\",\\n    \\\"__DimColor__\\\": \\\"Sales\\\"\\n  },\\n  {\\n    \\\"category\\\": \\\"A\\\",\\n    \\\"__MeaId__\\\": \\\"profit\\\",\\n    \\\"__MeaName__\\\": \\\"Profit\\\",\\n    \\\"__MeaValue__\\\": 30,\\n    \\\"__DimX__\\\": \\\"A\\\",\\n    \\\"__DimColor__\\\": \\\"Profit\\\"\\n  },\\n  {\\n    \\\"category\\\": \\\"B\\\",\\n    \\\"__MeaId__\\\": \\\"sales\\\",\\n    \\\"__MeaName__\\\": \\\"Sales\\\",\\n    \\\"__MeaValue__\\\": 200,\\n    \\\"__DimX__\\\": \\\"B\\\",\\n    \\\"__DimColor__\\\": \\\"Sales\\\"\\n  },\\n  {\\n    \\\"category\\\": \\\"B\\\",\\n    \\\"__MeaId__\\\": \\\"profit\\\",\\n    \\\"__MeaName__\\\": \\\"Profit\\\",\\n    \\\"__MeaValue__\\\": 50,\\n    \\\"__DimX__\\\": \\\"B\\\",\\n    \\\"__DimColor__\\\": \\\"Profit\\\"\\n  }\\n]\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n\nMDXContent.__RSPRESS_PAGE_META = {};\n\nMDXContent.__RSPRESS_PAGE_META[\"zh-CN%2Fdevelopment%2FdesignPhilosophy%2FdataReshape%2FdataReshapeImplementation.md\"] = {\"toc\":[{\"id\":\"foldmeasures\",\"text\":\"foldMeasures\",\"depth\":2},{\"id\":\"特性\",\"text\":\"特性\",\"depth\":3},{\"id\":\"最小可运行示例\",\"text\":\"最小可运行示例\",\"depth\":3},{\"id\":\"unfolddimensions\",\"text\":\"unfoldDimensions\",\"depth\":2},{\"id\":\"特性-1\",\"text\":\"特性\",\"depth\":3},{\"id\":\"最小可运行示例-1\",\"text\":\"最小可运行示例\",\"depth\":3}],\"title\":\"数据重塑-实现\",\"headingTitle\":\"数据重塑-实现\",\"frontmatter\":{}};\n"],"names":["_createMdxContent","props","_components","Object","_provideComponents","_jsxs","_Fragment","_jsx","MDXContent","MDXLayout"],"mappings":"iKAKA,SAASA,EAAkBC,CAAK,EAC9B,IAAMC,EAAcC,OAAO,MAAM,CAAC,CAChC,GAAI,KACJ,EAAG,IACH,IAAK,MACL,EAAG,IACH,GAAI,KACJ,KAAM,OACN,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,IAAK,KACP,EAAGC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAAsBH,EAAM,UAAU,EACzC,MAAOI,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMC,EAAAA,QAASA,CAAE,CACtB,SAAU,CAACD,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC/B,GAAI,UACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,WACN,SAAU,GACZ,GAAI,UAAU,AAChB,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,GAAG,CAAE,CAC/B,UAAW,yBACX,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC/B,UAAW,0BACX,SAAU,QACZ,GAAIG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,GAAG,CAAE,CACzB,UAAW,4BACX,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,SAAU,wDACZ,GAAIK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CACtB,SAAU,4EACZ,GAAG,AACL,GAAG,AACL,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,eACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,gBACN,SAAU,GACZ,GAAI,eAAe,AACrB,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,KAAM,6FACN,IAAK,sBACL,OAAQ,SACR,SAAU,OACZ,EACF,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,CAAC,CAAE,CAC7B,SAAU,CAAC,uBAAwBK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACxD,SAAU,MACZ,GAAI,eAAgBK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACzC,SAAU,QACZ,GAAI,MAAOK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,MACZ,GAAI,oBAAqBK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC9C,SAAU,UACZ,GAAI,sBAAsB,AAC5B,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,KACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,MACN,SAAU,GACZ,GAAI,KAAK,AACX,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CACpC,SAAU,4EACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,yCACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,gBACZ,GAAI,KAAK,AACX,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,GAAG,CAAE,CAC/B,UAAW,wBACX,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC/B,UAAW,0BACX,SAAU,UACZ,GAAIK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CACxB,UAAW,4BACX,SAAUG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CACrC,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,GACZ,GAAI,MAAOK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,GACZ,GAAI,0BAA2BK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACpD,SAAU,GACZ,GAAI,MAAOK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,GACZ,GAAI,mBAAmB,AACzB,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,GACZ,GAAI,MAAOK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,GACZ,GAAI,UAAWK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACpC,SAAU,GACZ,GAAI,sBAAuBK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChD,SAAU,GACZ,GAAI,MAAOK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,GACZ,GAAI,qCAAqC,AAC3C,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,GACZ,GAAI,MAAOK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAChC,SAAU,GACZ,GAAI,UAAWK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACpC,SAAU,GACZ,GAAI,+BAAgCK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACzD,SAAU,GACZ,GAAI,OAAQK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACjC,SAAU,GACZ,GAAI,mBAAmB,AACzB,GAAI,KAAK,AACX,EACF,GAAG,AACL,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,UACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,WACN,SAAU,GACZ,GAAI,UAAU,AAChB,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC9B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC/B,UAAW,cACX,KAAM,qBACN,SAAU,g7DACZ,EACF,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC9B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC/B,UAAW,gBACX,KAAM,aACN,SAAU,idACZ,EACF,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,mBACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,oBACN,SAAU,GACZ,GAAI,mBAAmB,AACzB,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,KAAM,iGACN,IAAK,sBACL,OAAQ,SACR,SAAU,OACZ,EACF,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,CAAC,CAAE,CAC7B,SAAU,CAAC,uCAAwCK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACxE,SAAU,QACZ,GAAI,yBAA0BK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACnD,SAAU,YACZ,GAAI,KAAK,AACX,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,mDACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,gDACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,8EACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,wGACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,OACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,QACN,SAAU,GACZ,GAAI,KAAK,AACX,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC5B,SAAU,mEACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,GAAG,CAAE,CAC/B,UAAW,wBACX,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC/B,UAAW,0BACX,SAAU,UACZ,GAAIK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CACxB,UAAW,4BACX,SAAUG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CACpC,SAAU,iEACZ,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,EAAE,CAAE,CAC7B,SAAU,mCACZ,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,SAAU,CAAC,sBAAuBK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CACvD,SAAU,cACZ,GAAI,wBAAwB,AAC9B,GAAI,KAAK,AACX,EACF,GAAG,AACL,GAAI,KAAMG,AAAAA,GAAAA,EAAAA,IAAAA,AAAAA,EAAMH,EAAY,EAAE,CAAE,CAC9B,GAAI,YACJ,SAAU,CAACK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,CAAC,CAAE,CAC7B,UAAW,gBACX,cAAe,OACf,KAAM,aACN,SAAU,GACZ,GAAI,UAAU,AAChB,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC9B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC/B,UAAW,cACX,SAAU,+mFACZ,EACF,GAAI,KAAMK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,GAAG,CAAE,CAC9B,SAAUK,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKL,EAAY,IAAI,CAAE,CAC/B,UAAW,gBACX,KAAM,aACN,SAAU,mqBACZ,EACF,GAAG,AACL,EACF,CACA,SAASM,I,IAAWP,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,AAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAQ,CAAC,EACrB,CAAC,QAASQ,CAAS,CAAC,CAAGN,OAAO,MAAM,CAAC,CAAC,EAAGC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAAsBH,EAAM,UAAU,EACrF,OAAOQ,EAAYF,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKE,EAAWN,OAAO,MAAM,CAAC,CAAC,EAAGF,EAAO,CAC1D,SAAUM,AAAAA,GAAAA,EAAAA,GAAAA,AAAAA,EAAKP,EAAmBC,EACpC,IAAMD,EAAkBC,EAC1B,CACA,MAAeO,CAEfA,CAAAA,EAAW,mBAAmB,CAAG,CAAC,EAElCA,EAAW,mBAAmB,CAAC,sFAAsF,CAAG,CAAC,IAAM,CAAC,CAAC,GAAK,eAAe,KAAO,eAAe,MAAQ,CAAC,EAAE,CAAC,GAAK,KAAK,KAAO,KAAK,MAAQ,CAAC,EAAE,CAAC,GAAK,UAAU,KAAO,UAAU,MAAQ,CAAC,EAAE,CAAC,GAAK,mBAAmB,KAAO,mBAAmB,MAAQ,CAAC,EAAE,CAAC,GAAK,OAAO,KAAO,KAAK,MAAQ,CAAC,EAAE,CAAC,GAAK,YAAY,KAAO,UAAU,MAAQ,CAAC,EAAE,CAAC,MAAQ,UAAU,aAAe,UAAU,YAAc,CAAC,CAAC,C"}