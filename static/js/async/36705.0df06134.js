"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["36705"],{8119:function(e,n,t){t.r(n),t.d(n,{default:()=>i});var r=t(69787),s=t(15825),a=t(53671);function o(e){let n={a:"a",h1:"h1",h2:"h2",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"updatespec",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#updatespec",children:"#"}),"updateSpec"]}),"\n",(0,r.jsxs)(n.h2,{id:"分段面积图",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分段面积图",children:"#"}),"分段面积图"]}),"\n",(0,r.jsx)(a.Z,{code:"const Demo = () => {\n  const vseed: VSeed = {\n    chartType: 'areaRange',\n    dataset: [\n      { date: '2019', region: 'east', city: 'A', profit: 10, sales: 60 },\n      { date: '2019', region: 'east', city: 'B', profit: 30, sales: 60 },\n      { date: '2019', region: 'east', city: 'C', profit: 30, sales: 60 },\n      { date: '2019', region: 'east', city: 'D', profit: 50, sales: 60 },\n      { date: '2019', region: 'east', city: 'E', profit: 40, sales: 60 },\n      { date: '2020', region: 'east', city: 'A', profit: 100, sales: 60 },\n      { date: '2020', region: 'east', city: 'B', profit: 123, sales: 60 },\n      { date: '2020', region: 'east', city: 'C', profit: 134, sales: 60 },\n      { date: '2020', region: 'east', city: 'D', profit: 111, sales: 60 },\n      { date: '2020', region: 'east', city: 'E', profit: 210, sales: 60 },\n    ],\n    dimensions: [{ id: 'date' }, { id: 'city' }],\n    measures: [{ id: 'profit' }, { id: 'sales' }],\n    annotationHorizontalLine: {\n      yValue: 60,\n      text: 'text',\n      textAlign: 'left',\n      textPosition: 'insideStart',\n    },\n  }\n\n  updateSpec('areaRange', (spec, context) => {\n    const { vseed } = context\n\n    const maxValue = Math.max(...vseed.dataset.map((d) => d.profit))\n    const minValue = Math.min(...vseed.dataset.map((d) => d.profit))\n    const middle = 60\n    const percent = (maxValue - middle) / (maxValue - minValue)\n\n    spec.series[0].area = {\n      style: {\n        curveType: 'monotoneX',\n        fillOpacity: 0.15,\n        fill: {\n          gradient: 'linear',\n          x0: 0.5,\n          y0: 0,\n          x1: 0.5,\n          y1: 1,\n          stops: [\n            {\n              offset: 0,\n              color: '#5766EC',\n            },\n            {\n              offset: percent,\n              color: 'rgba(0,0,255,0)',\n            },\n            {\n              offset: percent,\n              color: 'rgba(0,0,255,0)',\n            },\n            {\n              offset: 1,\n              color: '#2ef1adff',\n            },\n          ],\n        },\n      },\n    }\n    spec.series[1].line = {\n      style: {\n        visible: true,\n        curveType: 'monotoneX',\n        stroke: {\n          gradient: 'linear',\n          x0: 0.5,\n          y0: 0,\n          x1: 0.5,\n          y1: 1,\n          stops: [\n            {\n              offset: 0,\n              color: '#5766EC',\n            },\n            {\n              offset: percent,\n              color: '#5766EC',\n            },\n            {\n              offset: percent,\n              color: '#2ef1adff',\n            },\n            {\n              offset: 1,\n              color: '#2ef1adff',\n            },\n          ],\n        },\n      },\n    }\n    spec.series[2].line = {\n      style: {\n        visible: false,\n        curveType: 'monotoneX',\n      },\n    }\n    spec.markLine[0].startSymbol = {\n      visible: true,\n      style: {\n        angle: 90,\n      },\n    }\n    spec.markLine[0].endSymbol = {\n      visible: false,\n    }\n    spec.tooltip.dimension.content = spec.tooltip.dimension.content.map((item) => {\n      return {\n        ...item,\n        shapeFill: (a) => {\n          console.log(a)\n          return '#5766EC'\n        },\n      }\n    })\n\n    return spec\n  })\n  if (zVSeed.safeParse(vseed).success) {\n    console.log('zVSeed parse success!!!')\n  } else {\n    console.error('zVSeed parse error!!!')\n  }\n\n  return <SimpleVSeedRender vseed={vseed} />\n}\n\nimport { useRef, useEffect } from 'react'\nimport { useDark } from '@rspress/core/runtime'\nimport VChart from '@visactor/vchart'\nimport { ListTable, PivotTable, PivotChart, register } from '@visactor/vtable'\nimport {\n  registerAll,\n  VSeed,\n  Builder,\n  isPivotChart,\n  isVChart,\n  isPivotTable,\n  isTable,\n  zVSeed,\n  updateSpec,\n} from '@visactor/vseed'\n\nregisterAll()\nregister.chartModule('vchart', VChart)\n\nconst SimpleVSeedRender = (props: { vseed: VSeed }) => {\n  const { vseed } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const builderRef = useRef<Builder>()\n  const dark = useDark()\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const theme = dark ? 'dark' : 'light'\n    const builder = Builder.from({ ...vseed, theme })\n    const spec = builder.build()\n\n    builderRef.current = builder\n    if (isPivotChart(vseed)) {\n      const tableInstance = new PivotChart(ref.current, spec)\n      return () => tableInstance.release()\n    } else if (isVChart(vseed)) {\n      const vchart = new VChart(spec, { dom: ref.current })\n      vchart.renderSync()\n      return () => vchart.release()\n    } else if (isTable(vseed)) {\n      const tableInstance = new ListTable(ref.current, spec)\n      return () => tableInstance.release()\n    } else if (isPivotTable(vseed)) {\n      const tableInstance = new PivotTable(ref.current, spec)\n      return () => tableInstance.release()\n    }\n  }, [vseed, dark])\n\n  return (\n    <div\n      ref={ref}\n      style={{ height: 300, width: '100%' }}\n      onClick={() => {\n        console.group(`selected ${vseed.chartType}`)\n        console.log('builder', builderRef.current)\n        console.log('spec', builderRef.current.spec)\n        console.log('vseed', builderRef.current.vseed)\n        console.log('advancedVSeed', builderRef.current.advancedVSeed)\n        console.groupEnd()\n      }}\n    ></div>\n  )\n}\n\nexport default Demo",language:"tsx",direction:"",editorPosition:"left"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh-CN%2Fgalley%2Fapi%2FupdateSpec.mdx"]={toc:[{id:"分段面积图",text:"分段面积图",depth:2}],title:"updateSpec",headingTitle:"updateSpec",frontmatter:{pageType:"doc"}}}}]);
//# sourceMappingURL=36705.0df06134.js.map