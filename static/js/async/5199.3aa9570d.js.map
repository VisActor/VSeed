{"version":3,"file":"static/js/async/5199.3aa9570d.js","sources":["webpack://website/../../packages/vseed/dist/index.js"],"sourcesContent":["import { clone, groupBy, isArray, isEmpty, isNullish, isNumber, isString, mergeDeep, omit, pick, sort, unique } from \"remeda\";\nimport { z } from \"zod\";\nconst execPipeline = (pipeline, context, initialValue = {})=>{\n    const result = pipeline.reduce((prev, cur)=>cur(prev, context), initialValue);\n    return result;\n};\nconst buildAdvanced = (builder)=>{\n    const start = 'undefined' != typeof performance ? performance.now() : Date.now();\n    const { chartType } = builder.vseed;\n    if (!chartType) throw new Error('chartType is nil in buildAdvanced');\n    const pipeline = builder.getAdvancedPipeline(chartType);\n    if (!pipeline) throw new Error(`no advanced pipeline for chartType ${chartType}`);\n    const context = {\n        vseed: builder.vseed,\n        customTheme: builder.getThemeMap()\n    };\n    try {\n        return execPipeline(pipeline, context);\n    } catch (e) {\n        console.error(e);\n        throw new Error(\"buildAdvanced error, see error info in console\");\n    } finally{\n        const end = 'undefined' != typeof performance ? performance.now() : Date.now();\n        builder.performance['buildAdvanced'] = `${(end - start).toFixed(4)}ms`;\n    }\n};\nconst buildSpec = (builder, advancedVSeed)=>{\n    const start = 'undefined' != typeof performance ? performance.now() : Date.now();\n    const { chartType } = builder.vseed;\n    if (!chartType) throw new Error('chartType is nil in buildSpec');\n    const pipeline = builder.getSpecPipeline(chartType);\n    if (!pipeline) throw new Error(`no spec pipeline for chartType ${chartType}`);\n    const context = {\n        vseed: builder.vseed,\n        advancedVSeed\n    };\n    try {\n        return execPipeline(pipeline, context);\n    } catch (e) {\n        console.error(e);\n        throw new Error(\"buildSpec error, see error info in console\");\n    } finally{\n        const end = 'undefined' != typeof performance ? performance.now() : Date.now();\n        builder.performance['buildSpec'] = `${(end - start).toFixed(4)}ms`;\n    }\n};\nconst build = (builder)=>{\n    const advancedVSeed = builder.buildAdvanced();\n    builder.advancedVSeed = advancedVSeed;\n    if (!advancedVSeed) throw new Error('advancedVSeed is null');\n    const spec = builder.buildSpec(advancedVSeed);\n    builder.spec = spec;\n    return spec;\n};\nvar i18n_namespaceObject = JSON.parse('{\"指标名称\":{\"en-US\":\"MeasureName\",\"zh-CN\":\"指标名称\"},\"指标Id\":{\"en-US\":\"MeasureId\",\"zh-CN\":\"指标Id\"},\"指标值\":{\"en-US\":\"MeasureValue\",\"zh-CN\":\"指标值\"}}');\nclass i18n_Intl {\n    static instance;\n    translateMap = i18n_namespaceObject;\n    locale = 'zh-CN';\n    canTranslate = (value)=>!!this.translateMap[value];\n    i18n = (segments, ...values)=>{\n        const text = segments.map((segment, index)=>segment + (values[index] || '')).join('');\n        const translatedText = this.translateMap?.[text]?.[this.locale];\n        if (isNullish(translatedText)) {\n            console.warn(`i18n ${this.locale} no translate: ${text}`);\n            return text;\n        }\n        return translatedText;\n    };\n    setLocale = (locale)=>{\n        this.locale = locale;\n    };\n    getLocale = ()=>this.locale;\n    static getInstance() {\n        if (!i18n_Intl.instance) i18n_Intl.instance = new i18n_Intl();\n        return i18n_Intl.instance;\n    }\n}\nconst intl = i18n_Intl.getInstance();\nconst i18n = intl.i18n;\nconst getColorItems = (builder)=>{\n    const advancedVSeed = builder.advancedVSeed;\n    if (!advancedVSeed) return [];\n    const { datasetReshapeInfo } = advancedVSeed;\n    const colorItems = unique(datasetReshapeInfo.flatMap((d)=>d.unfoldInfo.colorItems));\n    const colorIdMap = datasetReshapeInfo.reduce((prev, cur)=>({\n            ...prev,\n            ...cur.unfoldInfo.colorIdMap\n        }), {});\n    return colorItems.map((d)=>colorIdMap[d]);\n};\nconst getColorIdMap = (builder)=>{\n    const advancedVSeed = builder.advancedVSeed;\n    if (!advancedVSeed) return {};\n    const { datasetReshapeInfo } = advancedVSeed;\n    const colorIdMap = datasetReshapeInfo.reduce((prev, cur)=>({\n            ...prev,\n            ...cur.unfoldInfo.colorIdMap\n        }), {});\n    return colorIdMap;\n};\nclass Builder {\n    _vseed;\n    _advancedVSeed = null;\n    _spec = null;\n    _performance = {};\n    constructor(vseed){\n        this._vseed = vseed;\n        this._vseed.locale = vseed.locale || intl.getLocale();\n    }\n    build = ()=>build(this);\n    buildSpec = (advanced)=>buildSpec(this, advanced);\n    buildAdvanced = ()=>buildAdvanced(this);\n    getAdvancedPipeline = (chartType)=>{\n        const customPipe = Builder._customAdvancedPipe[chartType];\n        const pipeline = Builder._advancedPipelineMap[chartType];\n        if (customPipe) pipeline.push(customPipe);\n        return pipeline;\n    };\n    getSpecPipeline = (chartType)=>{\n        const customPipe = Builder._customSpecPipe[chartType];\n        const pipeline = Builder._specPipelineMap[chartType];\n        if (customPipe) pipeline.push(customPipe);\n        return pipeline;\n    };\n    getTheme = (themeKey)=>Builder._themeMap[themeKey];\n    getThemeMap = ()=>Builder._themeMap;\n    getColorItems = ()=>getColorItems(this);\n    getColorIdMap = ()=>getColorIdMap(this);\n    get vseed() {\n        return this._vseed;\n    }\n    set vseed(value) {\n        this._vseed = value;\n    }\n    get advancedVSeed() {\n        return this._advancedVSeed;\n    }\n    set advancedVSeed(value) {\n        this._advancedVSeed = value;\n    }\n    get spec() {\n        return this._spec;\n    }\n    set spec(value) {\n        this._spec = value;\n    }\n    get performance() {\n        return this._performance;\n    }\n    set performance(value) {\n        this._performance = value;\n    }\n    static _advancedPipelineMap = {};\n    static _specPipelineMap = {};\n    static _customAdvancedPipe = {};\n    static _customSpecPipe = {};\n    static _themeMap = {};\n    static from = (vseed)=>new Builder(vseed);\n}\nconst initAdvancedVSeed = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType, locale } = vseed;\n    return {\n        ...advancedVSeed,\n        chartType,\n        locale: locale || 'zh-CN'\n    };\n};\nconst autoMeasures = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { measures, dataset } = vseed;\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (measures && measures.length > 0) {\n        result.measures = measures;\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    result.measures = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'number' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key)).map((measure)=>({\n            id: measure,\n            alias: measure\n        }));\n    return result;\n};\nconst preorderTraverse = (tree, callback)=>{\n    if (!tree || 0 === tree.length) return;\n    const stack = [\n        ...tree\n    ].reverse();\n    while(stack.length > 0){\n        const node = stack.pop();\n        const stop = callback(node);\n        if (true === stop) return;\n        if (!('children' in node)) continue;\n        const children = node.children;\n        if (children && children.length > 0) for(let i = children.length - 1; i >= 0; i--){\n            const child = children[i];\n            stack.push(child);\n        }\n    }\n};\nconst findMeasureById = (measures = [], id)=>{\n    if (!measures) return;\n    let result;\n    preorderTraverse(measures, (node)=>{\n        if (!('children' in node)) {\n            if (node.id === id) {\n                result = node;\n                return true;\n            }\n        }\n        return false;\n    });\n    return result;\n};\nconst findFirstMeasure = (measures = [])=>{\n    if (!measures) return;\n    let result;\n    preorderTraverse(measures, (node)=>{\n        if (!('children' in node)) {\n            result = node;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\nconst findAllMeasures = (measures = [])=>{\n    if (!measures) return [];\n    const result = [];\n    preorderTraverse(measures, (node)=>{\n        if (!('children' in node)) result.push(node);\n        return false;\n    });\n    return result;\n};\nconst autoDimensions = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dimensions, dataset } = vseed;\n    const measures = findAllMeasures(advancedVSeed.measures);\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (dimensions && dimensions.length > 0) {\n        result.dimensions = dimensions;\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    result.dimensions = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'string' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key) && !measures.some((measure)=>measure.id === key)).map((dim)=>({\n            id: dim,\n            alias: dim,\n            location: 'dimension'\n        }));\n    return result;\n};\nconst records_records = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { dataset } = vseed;\n    return {\n        ...advancedVSeed,\n        dataset\n    };\n};\nconst theme_theme = (advancedVSeed, context)=>{\n    const { customTheme, vseed } = context;\n    const { theme = 'light', chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    if (!customTheme || !customTheme[theme]) return result;\n    const chartConfigTheme = customTheme?.[theme].config?.[chartType];\n    if (chartConfigTheme) {\n        const chartConfig = result.config?.[chartType] || {};\n        const mergedConfig = mergeDeep(chartConfigTheme, clone(chartConfig));\n        result.config = {\n            [chartType]: mergedConfig\n        };\n    }\n    const chartCustomTheme = customTheme?.[theme]?.config?.[chartType];\n    result.customTheme = {\n        config: {\n            [chartType]: chartCustomTheme\n        }\n    };\n    return result;\n};\nconst tableAdvancedPipeline = [\n    initAdvancedVSeed,\n    autoMeasures,\n    autoDimensions,\n    records_records,\n    theme_theme\n];\nconst initTable = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { dataset } = advancedVSeed;\n    return {\n        ...spec,\n        records: dataset,\n        widthMode: 'standard',\n        heightMode: 'autoHeight',\n        autoWrapText: true,\n        columnResizeMode: 'all',\n        showHeader: true,\n        tooltip: {\n            isShowOverflowTextTooltip: true\n        },\n        animationAppear: {\n            duration: 300,\n            delay: 250,\n            type: 'one-by-one',\n            direction: 'row'\n        },\n        hover: {\n            highlightMode: 'row'\n        },\n        theme: {\n            underlayBackgroundColor: 'transparent'\n        }\n    };\n};\nconst measureTreeToColumns = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const measures = advancedVSeed.measures;\n    const result = {\n        ...spec\n    };\n    const eachNode = (node)=>{\n        if ('children' in node) return {};\n        return {\n            width: 'auto'\n        };\n    };\n    const columns = treeTreeToColumns(measures, eachNode);\n    return {\n        ...result,\n        columns: [\n            ...result.columns || [],\n            ...columns\n        ]\n    };\n};\nconst dimensionTreeToColumns = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    const result = {\n        ...spec\n    };\n    const eachNode = (node)=>{\n        if ('children' in node) return {};\n        return {\n            width: 'auto'\n        };\n    };\n    const columns = treeTreeToColumns(dimensions, eachNode);\n    return {\n        ...result,\n        columns: [\n            ...result.columns || [],\n            ...columns\n        ]\n    };\n};\nconst treeTreeToColumns = (tree, callback)=>{\n    const result = tree.map((item)=>{\n        if ('children' in item && Array.isArray(item.children)) {\n            const groupNode = item;\n            const field = groupNode.id;\n            const title = groupNode.alias ?? groupNode.id;\n            const props = callback?.(groupNode) || {};\n            return {\n                field,\n                title,\n                columns: treeTreeToColumns(item.children, callback),\n                ...props\n            };\n        }\n        {\n            const field = item.id;\n            const title = item.alias ?? item.id;\n            const props = callback?.(item) || {};\n            return {\n                field,\n                title,\n                ...props\n            };\n        }\n    });\n    return result || [];\n};\nconst bodyStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { customTheme, chartType } = advancedVSeed;\n    const themeConfig = customTheme?.config?.[chartType];\n    if (!result.theme || !themeConfig) return result;\n    const borderColor = themeConfig.borderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themeConfig.bodyBackgroundColor || '#fff';\n    const fontColor = themeConfig.bodyFontColor || '#1B1F23';\n    const fontSize = themeConfig.bodyFontSize || 12;\n    const hoverCellBgColor = themeConfig.hoverBodyBackgroundColor || '#bedaff';\n    const hoverInlineColor = themeConfig.hoverBodyInlineBackgroundColor || '#bedaff';\n    result.theme.bodyStyle = {\n        borderColor: borderColor,\n        borderLineWidth: 1,\n        padding: [\n            8.6,\n            12,\n            8.6,\n            12\n        ],\n        textAlign: 'right',\n        hover: {\n            cellBgColor: hoverCellBgColor,\n            inlineRowBgColor: hoverInlineColor,\n            inlineColumnBgColor: hoverInlineColor\n        },\n        color: fontColor,\n        fontSize: fontSize,\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        fontVariant: 'normal',\n        bgColor: backgroundColor,\n        lineHeight: 1.5 * fontSize\n    };\n    return result;\n};\nconst headerStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { customTheme, chartType } = advancedVSeed;\n    const themConfig = customTheme?.config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.borderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themConfig.headerBackgroundColor || '#EEF1F5';\n    const fontColor = themConfig.headerFontColor || '#1B1F23';\n    const fontSize = themConfig.headerFontSize || 12;\n    const hoverCellBgColor = themConfig.hoverHeaderBackgroundColor || '#bedaff';\n    const hoverInlineColor = themConfig.hoverHeaderInlineBackgroundColor || '#bedaff';\n    result.theme.headerStyle = {\n        borderColor: borderColor,\n        borderLineWidth: 1,\n        padding: [\n            8,\n            12,\n            8,\n            12\n        ],\n        textAlign: 'center',\n        hover: {\n            cellBgColor: hoverCellBgColor,\n            inlineRowBgColor: hoverInlineColor,\n            inlineColumnBgColor: hoverInlineColor\n        },\n        frameStyle: {\n            borderColor: [\n                null,\n                null,\n                borderColor,\n                null\n            ],\n            borderLineWidth: 1\n        },\n        fontSize: fontSize,\n        fontVariant: 'normal',\n        fontStyle: 'normal',\n        fontWeight: 'bold',\n        color: fontColor,\n        bgColor: backgroundColor,\n        lineHeight: 1.5 * fontSize\n    };\n    return result;\n};\nconst frameStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { customTheme, chartType } = advancedVSeed;\n    const themConfig = customTheme?.config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.borderColor || 'rgb(224, 224, 224)';\n    result.theme.frameStyle = {\n        borderColor,\n        borderLineWidth: 0,\n        cornerRadius: 4\n    };\n    return result;\n};\nconst selectionStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { customTheme, chartType } = advancedVSeed;\n    const themConfig = customTheme?.config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.selectedBorderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themConfig.selectedBackgroundColor || 'rgb(224, 224, 224, 0.5)';\n    result.theme.selectionStyle = {\n        cellBorderColor: borderColor,\n        cellBorderLineWidth: 2,\n        cellBgColor: backgroundColor\n    };\n    return result;\n};\nconst tableSpecPipeline = [\n    initTable,\n    dimensionTreeToColumns,\n    measureTreeToColumns,\n    bodyStyle,\n    headerStyle,\n    frameStyle,\n    selectionStyle\n];\nconst registerTable = ()=>{\n    Builder._advancedPipelineMap.table = tableAdvancedPipeline;\n    Builder._specPipelineMap.table = tableSpecPipeline;\n};\nconst autoPivotMeasures = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const measures = findAllMeasures(vseed.measures);\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (measures && measures.length > 0) {\n        result.measures = findAllMeasures(measures);\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    result.measures = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'number' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key)).map((measure)=>({\n            id: measure,\n            alias: measure\n        }));\n    return result;\n};\nconst findDimensionById = (dimensions = [], id)=>{\n    if (!dimensions) return;\n    let result;\n    preorderTraverse(dimensions, (node)=>{\n        if (!('children' in node)) {\n            if (node.id === id) {\n                result = node;\n                return true;\n            }\n        }\n        return false;\n    });\n    return result;\n};\nconst findFirstDimension = (dimensions = [])=>{\n    if (!dimensions) return;\n    let result;\n    preorderTraverse(dimensions, (node)=>{\n        if (!('children' in node)) {\n            result = node;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\nconst findAllDimensions = (dimensions = [])=>{\n    if (!dimensions) return [];\n    const result = [];\n    preorderTraverse(dimensions, (node)=>{\n        if (!('children' in node)) result.push(node);\n        return false;\n    });\n    return result;\n};\nconst autoPivotDimensions = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dimensions, dataset } = vseed;\n    const measures = findAllMeasures(advancedVSeed.measures);\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (dimensions && dimensions.length > 0) {\n        const newDimensions = findAllDimensions(dimensions);\n        result.dimensions = newDimensions.map((item, index)=>{\n            if ('rowDimension' === item.location || 'columnDimension' === item.location) return item;\n            return {\n                ...item,\n                location: index % 2 === 0 ? 'columnDimension' : 'rowDimension'\n            };\n        });\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    let i = 0;\n    result.dimensions = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'string' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key) && !measures.some((measure)=>measure.id === key)).map((dim)=>({\n            id: dim,\n            alias: dim,\n            location: i++ % 2 === 0 ? 'columnDimension' : 'rowDimension'\n        }));\n    return result;\n};\nconst pivotTableAdvancedPipeline = [\n    initAdvancedVSeed,\n    autoPivotMeasures,\n    autoPivotDimensions,\n    records_records,\n    theme_theme\n];\nconst initPivotTable = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { dataset } = advancedVSeed;\n    return {\n        ...spec,\n        records: dataset,\n        widthMode: 'standard',\n        heightMode: 'autoHeight',\n        autoWrapText: true,\n        columnResizeMode: 'all',\n        columnResizeType: 'column',\n        showColumnHeader: true,\n        showRowHeader: true,\n        select: {\n            highlightMode: 'cell',\n            headerSelectMode: 'inline'\n        },\n        hover: {\n            highlightMode: 'cross'\n        },\n        tooltip: {\n            isShowOverflowTextTooltip: true\n        },\n        widthAdaptiveMode: 'all',\n        animationAppear: {\n            duration: 300,\n            delay: 250,\n            type: 'one-by-one',\n            direction: 'row'\n        },\n        theme: {\n            underlayBackgroundColor: 'transparent'\n        }\n    };\n};\nconst pivotColumns = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    const columns = dimensions.filter((item)=>'columnDimension' === item['location']);\n    return {\n        ...spec,\n        columns: columns.map((item)=>({\n                dimensionKey: item.id,\n                title: item.alias || item.id,\n                width: 'auto'\n            }))\n    };\n};\nconst pivotRows = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    const rows = dimensions.filter((item)=>'rowDimension' === item['location']);\n    return {\n        ...spec,\n        rows: rows.map((item)=>({\n                dimensionKey: item.id,\n                title: item.alias || item.id,\n                width: 'auto'\n            }))\n    };\n};\nconst pivotIndicators = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const measures = advancedVSeed.measures;\n    return {\n        ...spec,\n        indicatorsAsCol: true,\n        indicatorTitle: intl.i18n`指标名称`,\n        indicators: measures.map((item)=>({\n                cellType: 'text',\n                indicatorKey: item.id,\n                title: item.alias || item.id,\n                width: 'auto'\n            }))\n    };\n};\nconst rowHeaderStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { customTheme, chartType } = advancedVSeed;\n    const themConfig = customTheme?.config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.borderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themConfig.headerBackgroundColor || '#EEF1F5';\n    const fontColor = themConfig.headerFontColor || '#1B1F23';\n    const fontSize = themConfig.headerFontSize || 12;\n    const hoverCellBgColor = themConfig.hoverHeaderBackgroundColor || '#bedaff';\n    const hoverInlineColor = themConfig.hoverHeaderInlineBackgroundColor || '#bedaff';\n    result.theme.rowHeaderStyle = {\n        borderColor: borderColor,\n        borderLineWidth: 1,\n        padding: [\n            8.6,\n            12,\n            8.6,\n            12\n        ],\n        textAlign: 'left',\n        hover: {\n            cellBgColor: hoverCellBgColor,\n            inlineRowBgColor: hoverInlineColor,\n            inlineColumnBgColor: hoverInlineColor\n        },\n        frameStyle: {\n            borderColor: [\n                null,\n                borderColor,\n                null,\n                null\n            ],\n            borderLineWidth: 1\n        },\n        fontSize: fontSize,\n        fontVariant: 'normal',\n        fontStyle: 'normal',\n        fontWeight: 'bold',\n        color: fontColor,\n        bgColor: backgroundColor,\n        lineHeight: 1.5 * fontSize\n    };\n    return result;\n};\nconst cornerHeaderStyle = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { customTheme, chartType } = advancedVSeed;\n    const themConfig = customTheme?.config?.[chartType];\n    if (!result.theme || !themConfig) return result;\n    const borderColor = themConfig.borderColor || 'rgb(224, 224, 224)';\n    const backgroundColor = themConfig.headerBackgroundColor || '#EEF1F5';\n    const fontColor = themConfig.headerFontColor || '#1B1F23';\n    const fontSize = themConfig.headerFontSize || 12;\n    const hoverInlineColor = themConfig.hoverHeaderInlineBackgroundColor;\n    const hoverCellColor = themConfig.hoverHeaderBackgroundColor;\n    result.theme.cornerHeaderStyle = {\n        borderColor: [\n            borderColor,\n            borderColor\n        ],\n        borderLineWidth: 1,\n        padding: [\n            8,\n            12,\n            8,\n            12\n        ],\n        textAlign: 'left',\n        hover: {\n            cellBgColor: hoverCellColor,\n            inlineRowBgColor: hoverInlineColor,\n            inlineColumnBgColor: hoverInlineColor\n        },\n        frameStyle: {\n            borderColor: [\n                null,\n                borderColor,\n                borderColor,\n                null\n            ],\n            borderLineWidth: 1\n        },\n        fontSize: fontSize,\n        fontVariant: 'normal',\n        fontStyle: 'normal',\n        fontWeight: 'bold',\n        color: fontColor,\n        bgColor: backgroundColor,\n        lineHeight: 1.5 * fontSize\n    };\n    return result;\n};\nconst pivotTableSpecPipeline = [\n    initPivotTable,\n    pivotColumns,\n    pivotRows,\n    pivotIndicators,\n    bodyStyle,\n    headerStyle,\n    rowHeaderStyle,\n    cornerHeaderStyle,\n    frameStyle,\n    selectionStyle\n];\nconst registerPivotTable = ()=>{\n    Builder._advancedPipelineMap.pivotTable = pivotTableAdvancedPipeline;\n    Builder._specPipelineMap.pivotTable = pivotTableSpecPipeline;\n};\nconst initAdvancedVSeed_initAdvancedVSeed = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType, locale } = vseed;\n    return {\n        ...advancedVSeed,\n        chartType,\n        locale: locale || 'zh-CN'\n    };\n};\nconst isTable = (vseed)=>'table' === vseed.chartType;\nconst isPivotTable = (vseed)=>'pivotTable' === vseed.chartType;\nconst isVTable = (vseed)=>[\n        'table',\n        'pivotTable'\n    ].includes(vseed.chartType);\nconst isVChart = (vseed)=>!isVTable(vseed);\nconst isPivotChart = (vseed)=>{\n    if (isVTable(vseed)) return false;\n    const { measures = [], dimensions = [] } = vseed;\n    const hasRowOrColumnDimension = dimensions && dimensions.some((dimension)=>'rowDimension' === dimension.location || 'columnDimension' === dimension.location);\n    const hasMeasureGroup = measures && measures.find((measure)=>measure && measure.children);\n    return hasRowOrColumnDimension || hasMeasureGroup;\n};\nconst autoMeasures_autoMeasures = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { measures, dataset } = vseed;\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (isPivotChart(vseed)) return autoMeasureGroup(advancedVSeed, context);\n    if (measures) {\n        result.measures = measures;\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    result.measures = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'number' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key)).map((measure)=>({\n            id: measure,\n            alias: measure\n        }));\n    return result;\n};\nconst autoMeasureGroup = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { measures } = vseed;\n    const hasMeasureGroup = measures?.some((measure)=>measure.children);\n    if (!measures) return advancedVSeed;\n    if (!hasMeasureGroup) {\n        const newMeasures = [\n            {\n                id: 'measureGroup',\n                alias: 'measureGroup',\n                children: measures\n            }\n        ];\n        return {\n            ...advancedVSeed,\n            measures: newMeasures\n        };\n    }\n    let currentGroup = createEmptyMeasureGroup();\n    const measureGroups = [];\n    for (const measure of measures)if ('children' in measure) {\n        if (currentGroup.children?.length) {\n            currentGroup.alias = currentGroup.children.map((item)=>item.alias).join('-');\n            currentGroup.id = currentGroup.alias + currentGroup.children.map((item)=>item.id).join('-');\n            measureGroups.push(currentGroup);\n            currentGroup = createEmptyMeasureGroup();\n        }\n        measureGroups.push(measure);\n    } else currentGroup.children?.push(measure);\n    if (currentGroup.children?.length) {\n        currentGroup.alias = currentGroup.children.map((item)=>item.alias).join('-');\n        currentGroup.id = currentGroup.alias + currentGroup.children.map((item)=>item.id).join('-');\n        measureGroups.push(currentGroup);\n        currentGroup = createEmptyMeasureGroup();\n    }\n    advancedVSeed.measures = measureGroups;\n    return advancedVSeed;\n};\nconst createEmptyMeasureGroup = ()=>({\n        id: '',\n        alias: '',\n        children: []\n    });\nconst autoDimensions_autoDimensions = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dimensions, dataset } = vseed;\n    const measures = findAllMeasures(advancedVSeed.measures);\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (dimensions) {\n        result.dimensions = dimensions;\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    result.dimensions = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'string' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key) && !measures.some((measure)=>measure.id === key)).map((dim)=>({\n            id: dim,\n            alias: dim,\n            location: 'dimension'\n        }));\n    return result;\n};\nconst pivotAdapter = (pipeline, pivotPipeline)=>(advancedVSeed, context)=>{\n        const { vseed } = context;\n        const usePivotChart = isPivotChart(vseed);\n        if (usePivotChart) return execPipeline(pivotPipeline, context, advancedVSeed);\n        return execPipeline(pipeline, context, advancedVSeed);\n    };\nconst FoldMeasureName = '__MeaName__';\nconst FoldMeasureValue = '__MeaValue__';\nconst FoldMeasureId = '__MeaId__';\nconst UnfoldDimensionGroup = '__DimGroup__';\nconst UnfoldDimensionGroupId = '__DimGroupID__';\nconst Separator = '-';\nconst ORIGINAL_DATA = '__OriginalData__';\nconst foldMeasures = (dataset, measures, measureId = FoldMeasureId, measureName = FoldMeasureName, measureValue = FoldMeasureValue)=>{\n    const foldInfo = {\n        measureId,\n        measureName,\n        measureValue,\n        foldMap: {}\n    };\n    const result = new Array(dataset.length * measures.length);\n    let index = 0;\n    const ids = measures.map((d)=>d.id);\n    for(let i = 0; i < dataset.length; i++)for(let j = 0; j < measures.length; j++){\n        const datum = omit({\n            ...dataset[i]\n        }, ids);\n        datum[ORIGINAL_DATA] = dataset[i];\n        const measure = measures[j];\n        const { id, alias } = measure;\n        datum[id] = dataset[i][id];\n        datum[measureId] = id;\n        datum[measureName] = alias || id;\n        datum[measureValue] = dataset[i][id];\n        foldInfo.foldMap[id] = alias;\n        result[index++] = datum;\n    }\n    return {\n        dataset: result,\n        foldInfo\n    };\n};\nconst unfoldDimensions = (dataset, dimensions, measures, unfoldStartIndex = 0, unfoldGroupName = UnfoldDimensionGroup, unfoldGroupId = UnfoldDimensionGroupId, foldMeasureId = FoldMeasureId, dimensionsSeparator = Separator)=>{\n    if (unfoldStartIndex < 0 || unfoldStartIndex >= dimensions.length) throw new Error('unfoldStartIndex is out of range');\n    const dimensionsToBeUnfolded = dimensions.slice(unfoldStartIndex);\n    const unfoldInfo = {\n        groupName: unfoldGroupName,\n        groupId: unfoldGroupId,\n        colorItems: [],\n        colorIdMap: {}\n    };\n    if (0 === dimensions.length || 0 === measures.length) return {\n        dataset,\n        unfoldInfo: {\n            groupName: unfoldGroupName,\n            groupId: unfoldGroupId,\n            colorItems: [],\n            colorIdMap: {}\n        }\n    };\n    const colorItems = [];\n    const colorMap = {};\n    for(let i = 0; i < dataset.length; i++){\n        const datum = dataset[i];\n        const colorName = generateDimGroupName(dimensionsToBeUnfolded, datum, dimensionsSeparator);\n        const colorId = datum[foldMeasureId] ? [\n            colorName,\n            datum[foldMeasureId]\n        ].join(dimensionsSeparator) : colorName;\n        datum[unfoldGroupName] = colorName;\n        datum[unfoldGroupId] = colorId;\n        colorItems.push(colorId);\n        colorMap[colorId] = colorName;\n    }\n    unfoldInfo.colorItems = unique(colorItems);\n    unfoldInfo.colorIdMap = colorMap;\n    return {\n        dataset,\n        unfoldInfo\n    };\n};\nconst generateDimGroupName = (dimensionsToBeGrouped, datum, dimensionsSeparator)=>dimensionsToBeGrouped.map((dim)=>String(datum[dim.id])).join(dimensionsSeparator);\nconst unfoldZeroDimensions = (dataset, measures, measureName, unfoldGroupName = UnfoldDimensionGroup, unfoldGroupId = UnfoldDimensionGroupId)=>{\n    const unfoldInfo = {\n        groupName: unfoldGroupName,\n        groupId: unfoldGroupId,\n        colorItems: [],\n        colorIdMap: {}\n    };\n    if (0 === measures.length) return {\n        dataset,\n        unfoldInfo: {\n            groupName: unfoldGroupName,\n            groupId: unfoldGroupId,\n            colorItems: [],\n            colorIdMap: {}\n        }\n    };\n    const colorItems = [];\n    const colorMap = {};\n    for(let i = 0; i < dataset.length; i++){\n        const datum = dataset[i];\n        const colorName = measureName;\n        const colorId = measureName;\n        datum[unfoldGroupName] = colorName;\n        datum[unfoldGroupId] = colorId;\n        colorItems.push(colorId);\n        colorMap[colorId] = colorName;\n    }\n    unfoldInfo.colorItems = unique(colorItems);\n    unfoldInfo.colorIdMap = colorMap;\n    return {\n        dataset,\n        unfoldInfo\n    };\n};\nconst emptyReshapeResult = {\n    dataset: [],\n    foldInfo: {\n        foldMap: {},\n        measureId: '',\n        measureName: '',\n        measureValue: ''\n    },\n    unfoldInfo: {\n        groupName: '',\n        groupId: '',\n        colorItems: [],\n        colorIdMap: {}\n    }\n};\nconst dataReshapeFor2D1M0Name = (dataset, dimensions, measures, options)=>{\n    const { foldMeasureId = FoldMeasureId, foldMeasureName = FoldMeasureName, foldMeasureValue = FoldMeasureValue, unfoldDimensionGroup = UnfoldDimensionGroup, unfoldDimensionGroupId = UnfoldDimensionGroupId } = options || {};\n    if (0 === dimensions.length && 0 === measures.length) return emptyReshapeResult;\n    const { dataset: foldedDataset, foldInfo } = foldMeasures(dataset, measures, foldMeasureId, foldMeasureName, foldMeasureValue);\n    if (0 === dimensions.length) {\n        const { dataset: finalDataset, unfoldInfo } = unfoldZeroDimensions(foldedDataset, [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], i18n`指标名称`, unfoldDimensionGroup, unfoldDimensionGroupId);\n        return {\n            dataset: finalDataset,\n            foldInfo,\n            unfoldInfo\n        };\n    }\n    {\n        const onlyOneMeasure = 1 === measures.length;\n        const onlyOneDimension = 1 === dimensions.length;\n        const dims = [\n            ...dimensions\n        ];\n        if (!onlyOneMeasure || onlyOneDimension) dims.push({\n            id: foldMeasureName,\n            alias: i18n`指标名称`,\n            location: 'dimension'\n        });\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(foldedDataset, dims, [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], 1, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo,\n            unfoldInfo\n        };\n    }\n};\nconst reshapeTo2D1M0Name = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures } = advancedVSeed;\n    if (!measures || !dimensions || !dataset) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    const { dataset: newDatasets, foldInfo, unfoldInfo } = dataReshapeFor2D1M0Name(dataset, dimensions, measures);\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: [\n            {\n                id: '2D1M',\n                foldInfo,\n                unfoldInfo\n            }\n        ],\n        dimensions,\n        measures\n    };\n};\nconst pivotReshapeTo2D1M0Name = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { measures } = advancedVSeed;\n    const dimensions = advancedVSeed.dimensions;\n    if (!measures || !dimensions) return result;\n    const measureGroups = [];\n    if (measures) measures.forEach((measure)=>{\n        if (measure.children && measure.children.length > 0) measureGroups.push(measure);\n    });\n    const commonDimensions = dimensions.filter((dim)=>'dimension' === dim.location);\n    const newDatasets = [];\n    const datasetReshapeInfo = [];\n    measureGroups.forEach((measureGroup)=>{\n        const measures = measureGroup.children;\n        if (!measures) return;\n        const groupId = measureGroup.id;\n        const { dataset: newSubDataset, foldInfo, unfoldInfo } = dataReshapeFor2D1M0Name(dataset, commonDimensions, measures, {\n            foldMeasureId: FoldMeasureId,\n            foldMeasureName: FoldMeasureName,\n            foldMeasureValue: FoldMeasureValue + groupId,\n            unfoldDimensionGroup: UnfoldDimensionGroup\n        });\n        const reshapeInfo = {\n            id: groupId,\n            foldInfo,\n            unfoldInfo\n        };\n        newDatasets.push(newSubDataset);\n        datasetReshapeInfo.push(reshapeInfo);\n    });\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: datasetReshapeInfo\n    };\n};\nconst encodingXY = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, dimensions } = advancedVSeed;\n    if (!datasetReshapeInfo || !dimensions) return result;\n    const xDimension = dimensions.find((item)=>'rowDimension' !== item.location && 'columnDimension' !== item.location);\n    const isZeroDimension = 0 === dimensions.length;\n    const encoding = datasetReshapeInfo.reduce((prev, cur)=>{\n        const { foldInfo, unfoldInfo } = cur;\n        const x = [\n            isZeroDimension ? foldInfo.measureName : xDimension?.id\n        ];\n        const y = [\n            foldInfo.measureValue\n        ];\n        const group = [\n            unfoldInfo.groupId\n        ];\n        const color = [\n            foldInfo.measureName\n        ];\n        return [\n            ...prev,\n            {\n                x,\n                y,\n                group,\n                color\n            }\n        ];\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst sortXBandAxis = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { sort: sortAxis, dataset } = vseed;\n    const { encoding } = advancedVSeed;\n    const xField = encoding?.[0]?.x?.[0];\n    if (!sortAxis || !xField) return advancedVSeed;\n    if (!result.analysis) result.analysis = {};\n    if (!result.analysis.orderMapping) result.analysis.orderMapping = {};\n    const axisOrderResult = calcOrder(sortAxis, xField, dataset);\n    result.analysis.orderMapping[xField] = axisOrderResult;\n    return result;\n};\nconst sortYBandAxis = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { sort: sortAxis, dataset } = vseed;\n    const { encoding } = advancedVSeed;\n    const yField = encoding?.[0]?.y?.[0];\n    if (!sortAxis || !yField) return advancedVSeed;\n    if (!result.analysis) result.analysis = {};\n    if (!result.analysis.orderMapping) result.analysis.orderMapping = {};\n    const axisOrderResult = calcOrder(sortAxis, yField, dataset);\n    result.analysis.orderMapping[yField] = axisOrderResult;\n    return result;\n};\nconst sort_sortLegend = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { sortLegend } = vseed;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const groupField = datasetReshapeInfo?.[0]?.unfoldInfo?.groupId;\n    const colorIdMap = datasetReshapeInfo?.[0]?.unfoldInfo?.colorIdMap;\n    const colorItems = datasetReshapeInfo?.[0]?.unfoldInfo?.colorItems;\n    if (!sortLegend || !groupField || !colorIdMap || !colorItems) return advancedVSeed;\n    if (!result.analysis) result.analysis = {};\n    if (!result.analysis.orderMapping) result.analysis.orderMapping = {};\n    if (sortLegend.customOrder) {\n        const nameMap = Object.keys(colorIdMap).reduce((pre, cur)=>{\n            pre[colorIdMap[cur]] = cur;\n            return pre;\n        }, {});\n        const orderRes = sortLegend.customOrder.map((itemNameOrId)=>nameMap[itemNameOrId] ? nameMap[itemNameOrId] : itemNameOrId);\n        result.analysis.orderMapping[groupField] = orderRes;\n        return result;\n    }\n    const dataset = advancedVSeed.dataset?.flat(2);\n    const orderRes = calcOrder(sortLegend, groupField, dataset || []);\n    result.analysis.orderMapping[groupField] = orderRes;\n    return result;\n};\nconst calcOrder = (sortConfig, id, dataset)=>{\n    if (sortConfig.customOrder) return sortConfig.customOrder;\n    const order = sortConfig.order || 'asc';\n    const orderBy = sortConfig.orderBy;\n    const res = sort(dataset, (a, b)=>{\n        const aValue = a[orderBy || id];\n        const bValue = b[orderBy || id];\n        if ('asc' === order) {\n            if (aValue < bValue) return -1;\n            if (aValue > bValue) return 1;\n            return 0;\n        }\n        if (aValue > bValue) return -1;\n        if (aValue < bValue) return 1;\n        return 0;\n    });\n    return unique(res.map((item)=>item[id]));\n};\nconst lineConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'color',\n        'label',\n        'legend',\n        'tooltip',\n        'xAxis',\n        'yAxis',\n        'crosshairLine'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst columnConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'color',\n        'label',\n        'legend',\n        'tooltip',\n        'xAxis',\n        'yAxis',\n        'crosshairRect',\n        'stackCornerRadius'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst pieConfig = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const { chartType } = vseed;\n    const result = {\n        ...advancedVSeed\n    };\n    const config = pick(vseed, [\n        'backgroundColor',\n        'color',\n        'label',\n        'legend',\n        'tooltip'\n    ]);\n    result.config = {\n        ...result.config || {},\n        [chartType]: {\n            ...config\n        }\n    };\n    return result;\n};\nconst areaConfig = lineConfig;\nconst areaPercentConfig = lineConfig;\nconst scatterConfig = lineConfig;\nconst barConfig = columnConfig;\nconst barParallelConfig = columnConfig;\nconst barPercentConfig = columnConfig;\nconst columnParallelConfig = columnConfig;\nconst columnPercentConfig = columnConfig;\nconst donutConfig = pieConfig;\nconst roseConfig = pieConfig;\nconst roseParallelConfig = pieConfig;\nconst funnelConfig = pieConfig;\nconst heatmapConfig = pieConfig;\nconst radarConfig = pieConfig;\nconst markStyle_markStyle = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const markStyle = pick(vseed, [\n        'barStyle',\n        'pointStyle',\n        'lineStyle',\n        'areaStyle'\n    ]);\n    return {\n        ...advancedVSeed,\n        markStyle\n    };\n};\nconst annotation_annotation = (advancedVSeed, context)=>{\n    const { vseed } = context;\n    const annotation = pick(vseed, [\n        'annotationPoint',\n        'annotationHorizontalLine',\n        'annotationVerticalLine',\n        'annotationArea'\n    ]);\n    return {\n        ...advancedVSeed,\n        annotation\n    };\n};\nconst lineAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M0Name\n    ], [\n        pivotReshapeTo2D1M0Name\n    ]),\n    encodingXY,\n    sortXBandAxis,\n    sort_sortLegend,\n    lineConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initLine = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    result.type = 'line';\n    result.direction = 'vertical';\n    result.xField = encoding[0].x[0];\n    result.yField = encoding[0].y[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst color_color = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, chartType } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.color) return result;\n    const { color } = baseConfig;\n    const { colorScheme, colorMapping } = color;\n    const mappingList = [];\n    if (colorMapping) Object.entries(colorMapping).sort((a, b)=>a[0].split(Separator).length - b[0].split(Separator).length).forEach(([key, value])=>{\n        const idMap = Object.entries(unfoldInfo.colorIdMap).filter(([_, v])=>v.includes(key));\n        for (const [colorId] of idMap)mappingList.push([\n            colorId,\n            value\n        ]);\n    });\n    result.color = {\n        type: 'ordinal',\n        domain: unfoldInfo.colorItems,\n        range: colorScheme,\n        specified: Object.fromEntries(mappingList)\n    };\n    return result;\n};\nconst background_backgroundColor = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    const { backgroundColor } = baseConfig;\n    return {\n        ...result,\n        background: backgroundColor\n    };\n};\nconst datasetXY = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { encoding, analysis, datasetReshapeInfo } = advancedVSeed;\n    const { orderMapping = {} } = analysis ?? {};\n    const angle = encoding[0]?.angle?.[0];\n    const x = encoding[0]?.x?.[0];\n    const group = encoding[0]?.group?.[0];\n    const id = datasetReshapeInfo[0].id;\n    const fields = {};\n    if (angle) fields[angle] = {\n        sortIndex: 0\n    };\n    if (x) {\n        const order = orderMapping[x];\n        if (order) fields[x] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[x] = {\n            sortIndex: 0\n        };\n    }\n    if (group) {\n        const order = orderMapping[group];\n        if (order) fields[group] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[group] = {\n            sortIndex: 0\n        };\n    }\n    return {\n        ...spec,\n        data: {\n            id,\n            values: isPivotChart(vseed) ? void 0 : advancedVSeed.dataset,\n            fields: fields\n        }\n    };\n};\nconst progressive = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dataset } = advancedVSeed;\n    const size = dataset.length;\n    if (size < 5000) return result;\n    result.large = true;\n    result.largeThreshold = 5000;\n    result.progressiveStep = 400;\n    result.progressiveThreshold = 8000;\n    return result;\n};\nconst xBand = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.xAxis;\n    if (!result.axes) result.axes = [];\n    if (!config) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                type: 'band',\n                orient: 'bottom'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, labelAutoHide, labelAutoHideGap, labelAutoLimit, labelAutoLimitLength = 80, labelAutoRotate, labelAutoRotateAngleRange } = config;\n    const sampling = !(labelAutoHide || labelAutoRotate || labelAutoLimit);\n    const bandAxis = {\n        visible,\n        type: 'band',\n        orient: 'bottom',\n        maxHeight: labelAutoLimitLength + 60,\n        sampling,\n        hover: true,\n        label: {\n            visible: label?.visible,\n            flush: true,\n            space: 8,\n            style: {\n                maxLineWidth: labelAutoLimitLength,\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            },\n            minGap: labelAutoHideGap,\n            autoHide: labelAutoHide,\n            autoHideMethod: 'greedy',\n            autoHideSeparation: labelAutoHideGap,\n            autoLimit: labelAutoLimit,\n            autoRotate: labelAutoRotate,\n            autoRotateAngle: labelAutoRotateAngleRange,\n            lastVisible: true\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        paddingInner: [\n            0.15,\n            0.1\n        ],\n        paddingOuter: [\n            0.075,\n            0.1\n        ]\n    };\n    result.axes = [\n        ...result.axes,\n        bandAxis\n    ];\n    return result;\n};\nconst ANNOTATION_Z_INDEX = 1000;\nconst LINEAR_AXIS_INNER_OFFSET_TOP = 7;\nconst createNumFormatter = (format, locale = intl.getLocale())=>{\n    const { type = 'number', ratio = 1, symbol = '', thousandSeparator = true, prefix = '', suffix = '', fractionDigits = 2, significantDigits, roundingMode = 'halfExpand', roundingPriority = 'auto' } = format || {};\n    const numFormatterOptions = {\n        style: 'decimal',\n        notation: 'scientific' === type ? 'scientific' : 'standard',\n        roundingMode,\n        roundingPriority\n    };\n    if (isNumber(fractionDigits)) {\n        if (fractionDigits >= 0) {\n            numFormatterOptions.minimumFractionDigits = fractionDigits;\n            numFormatterOptions.maximumFractionDigits = fractionDigits;\n        }\n    }\n    if (isNumber(significantDigits) && significantDigits > 0) {\n        if (significantDigits > 0) {\n            numFormatterOptions.minimumSignificantDigits = significantDigits;\n            numFormatterOptions.maximumSignificantDigits = significantDigits;\n        }\n    }\n    const numFormatter = new Intl.NumberFormat(locale, numFormatterOptions);\n    return (value)=>{\n        let num = Number(value);\n        let typeSymbol = '';\n        if (Number.isNaN(num)) return num.toString();\n        if ('percent' === type) {\n            num *= 100;\n            typeSymbol = '%';\n        } else if ('permille' === type) {\n            num *= 1000;\n            typeSymbol = \"\\u2030\";\n        } else if ('number' === type) num /= ratio || 1;\n        let numStr = numFormatter.format(num);\n        if (thousandSeparator) {\n            const parts = numStr.split('.');\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n            numStr = parts.join('.');\n        }\n        return `${prefix}${numStr}${typeSymbol}${symbol}${suffix}`;\n    };\n};\nconst autoNumFormatter = (value, locale = intl.getLocale())=>{\n    if (null == value) return String(value);\n    const num = Number(value);\n    if (Number.isNaN(num)) return String(value);\n    const numFormatterOptions = {\n        style: 'decimal',\n        notation: 'compact'\n    };\n    numFormatterOptions.minimumFractionDigits = 0;\n    numFormatterOptions.maximumFractionDigits = 2;\n    const numFormatter = new Intl.NumberFormat(locale, {\n        ...numFormatterOptions\n    });\n    return numFormatter.format(Number(value));\n};\nconst createFormatter = (format)=>createNumFormatter(format);\nconst autoFormatter = (value, locale)=>autoNumFormatter(value, locale);\nconst yLinear = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const { locale } = advancedVSeed;\n    const config = advancedVSeed.config?.[chartType]?.yAxis;\n    if (!result.axes) result.axes = [];\n    if (!config) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                type: 'linear',\n                orient: 'left'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, zero, nice, inverse, max, min, log, logBase = 10 } = config;\n    const linearAxis = {\n        visible,\n        type: log ? 'log' : 'linear',\n        base: logBase,\n        orient: 'left',\n        nice,\n        zero: log ? false : zero,\n        inverse,\n        max,\n        min,\n        label: {\n            visible: label?.visible,\n            formatMethod: (value)=>autoFormatter(value, locale),\n            style: {\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            }\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        innerOffset: {\n            top: LINEAR_AXIS_INNER_OFFSET_TOP\n        }\n    };\n    result.axes = [\n        ...result.axes,\n        linearAxis\n    ];\n    return result;\n};\nconst label_label = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, locale } = advancedVSeed;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.label) return result;\n    const { measureId, measureValue } = datasetReshapeInfo[0].foldInfo;\n    const { label } = baseConfig;\n    const { enable } = label;\n    result.label = {\n        visible: enable,\n        formatMethod: (value, datum)=>{\n            const result = [];\n            const formatValue = (value)=>{\n                const id = datum[measureId];\n                const measure = findMeasureById(measures, id);\n                if (!measure) return value;\n                const { format = {}, autoFormat = true } = measure;\n                if (!isEmpty(format)) {\n                    const formatter = createFormatter(format);\n                    return formatter(value);\n                }\n                if (autoFormat) return autoFormatter(value, locale);\n                return String(value);\n            };\n            result.push(formatValue(datum[measureValue]));\n            return result.join(' ');\n        }\n    };\n    return result;\n};\nconst tooltip_tooltip = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, chartType, locale, dimensions } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    const { tooltip = {\n        enable: true\n    } } = baseConfig;\n    const { enable } = tooltip;\n    const { measureId, measureValue, measureName } = datasetReshapeInfo[0].foldInfo;\n    const { groupName } = datasetReshapeInfo[0].unfoldInfo;\n    result.tooltip = {\n        visible: enable,\n        mark: {\n            title: {\n                visible: true\n            },\n            content: [\n                ...dimensions.map((item)=>({\n                        visible: true,\n                        hasShape: true,\n                        shapeType: 'rectRound',\n                        key: (datum)=>{\n                            if (item.alias || item.id) return item.alias || item.id;\n                            return datum && datum[item.id];\n                        },\n                        value: (datum)=>datum && datum[item.id]\n                    })),\n                {\n                    visible: true,\n                    hasShape: true,\n                    key: (datum)=>datum && datum[measureName || groupName] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const value = datum[measureValue];\n                        const id = datum[measureId];\n                        const measure = findMeasureById(measures, id);\n                        if (!measure) return String(value);\n                        const { format = {}, autoFormat = true } = measure;\n                        if (!isEmpty(format)) {\n                            const formatter = createFormatter(format);\n                            return formatter(value);\n                        }\n                        if (autoFormat) return autoFormatter(value, locale);\n                        return String(value);\n                    }\n                }\n            ]\n        },\n        dimension: {\n            content: [\n                {\n                    visible: true,\n                    key: (datum)=>datum && datum[groupName] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const value = datum[measureValue];\n                        const id = datum[measureId];\n                        const measure = findMeasureById(measures, id);\n                        if (!measure) return String(value);\n                        const { format = {}, autoFormat = true } = measure;\n                        if (!isEmpty(format)) {\n                            const formatter = createFormatter(format);\n                            return formatter(value);\n                        }\n                        if (autoFormat) return autoFormatter(value, locale);\n                        return String(value);\n                    },\n                    shapeType: 'rectRound'\n                }\n            ]\n        }\n    };\n    return result;\n};\nconst verticalCrosshairLine = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.crosshairLine;\n    if (!config) return result;\n    if (!result.crosshair) result.crosshair = {};\n    const { visible = true, lineColor, labelColor, labelVisible, labelBackgroundColor } = config;\n    const crosshair = result.crosshair;\n    crosshair.xField = {\n        visible,\n        line: {\n            type: 'line',\n            style: {\n                lineWidth: 1,\n                opacity: 1,\n                stroke: lineColor,\n                lineDash: [\n                    4,\n                    2\n                ]\n            }\n        },\n        label: {\n            visible: labelVisible,\n            labelBackground: {\n                visible: labelVisible,\n                style: {\n                    fill: labelBackgroundColor\n                }\n            },\n            style: {\n                fill: labelColor\n            }\n        }\n    };\n    return result;\n};\nconst discreteLegend = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, chartType } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.legend) return result;\n    const { legend } = baseConfig;\n    const { enable, position = 'bottom', labelFontColor, labelFontSize = 12, labelFontWeight, maxSize, border, shapeType = 'rectRound' } = legend || {};\n    const orient = [\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ].includes(position) ? 'bottom' : [\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr'\n    ].includes(position) ? 'top' : [\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb'\n    ].includes(position) ? 'left' : 'right';\n    const legendPosition = [\n        'topLeft',\n        'bottomLeft',\n        'leftTop',\n        'rightTop',\n        'lt',\n        'rt',\n        'tl',\n        'bl'\n    ].includes(position) ? 'start' : [\n        'topRight',\n        'bottomRight',\n        'leftBottom',\n        'rightBottom',\n        'lb',\n        'rb',\n        'rt',\n        'br'\n    ].includes(position) ? 'end' : 'middle';\n    result.legends = {\n        type: 'discrete',\n        visible: enable,\n        maxCol: maxSize,\n        maxRow: maxSize,\n        autoPage: true,\n        orient,\n        position: legendPosition,\n        data: border ? (items)=>items.map((item)=>{\n                item.shape.outerBorder = {\n                    stroke: item.shape.fill,\n                    distance: 3,\n                    lineWidth: 1\n                };\n                return item;\n            }) : void 0,\n        item: {\n            focus: true,\n            maxWidth: 260,\n            focusIconStyle: {\n                size: labelFontSize + 2,\n                fill: labelFontColor,\n                fontWeight: labelFontWeight\n            },\n            shape: {\n                space: border ? 6 : 4,\n                style: {\n                    symbolType: shapeType,\n                    size: border ? 8 : 10\n                }\n            },\n            label: {\n                formatMethod: (value)=>unfoldInfo.colorIdMap[String(value)] ?? value,\n                style: {\n                    fontSize: labelFontSize,\n                    fill: labelFontColor,\n                    fontWeight: labelFontWeight\n                }\n            },\n            background: {\n                state: {\n                    selectedHover: {\n                        fill: labelFontColor,\n                        fillOpacity: 0.05\n                    }\n                }\n            }\n        },\n        padding: 0\n    };\n    return result;\n};\nconst selector_selector = (vchartDatum, selector)=>{\n    if (!selector) return true;\n    const selectorMode = 'And';\n    const vchartKeys = Object.keys(vchartDatum).filter((k)=>k.toLocaleLowerCase().startsWith('__vchart'));\n    const datum = omit(vchartDatum, vchartKeys);\n    const selectors = Array.isArray(selector) ? selector : [\n        selector\n    ];\n    return selectors['And' === selectorMode ? 'every' : 'some']((selector)=>{\n        if (isValueSelector(selector)) {\n            if (Object.values(datum).find((v)=>v === selector)) return true;\n        } else if (isMeasureSelector(selector)) {\n            const op = selector.operator || selector.op;\n            const selectorValueArr = Array.isArray(selector.value) ? selector.value : [\n                selector.value\n            ];\n            switch(op){\n                case '=':\n                case '==':\n                    if (datum[selector.field] === selectorValueArr[0]) return true;\n                    break;\n                case '!=':\n                    if (datum[selector.field] !== selectorValueArr[0]) return true;\n                    break;\n                case '>':\n                    if (datum[selector.field] > selectorValueArr[0]) return true;\n                    break;\n                case '<':\n                    if (datum[selector.field] < selectorValueArr[0]) return true;\n                    break;\n                case '>=':\n                    if (datum[selector.field] >= selectorValueArr[0]) return true;\n                    break;\n                case '<=':\n                    if (datum[selector.field] <= selectorValueArr[0]) return true;\n                    break;\n                case 'between':\n                    if (Array.isArray(selector.value) && datum[selector.field] >= selectorValueArr[0] && datum[selector.field] <= selectorValueArr[1]) return true;\n                    break;\n                default:\n                    break;\n            }\n        } else if (isDimensionSelector(selector)) {\n            const op = selector.operator || selector.op;\n            const selectorValueArr = Array.isArray(selector.value) ? selector.value : [\n                selector.value\n            ];\n            switch(op){\n                case 'in':\n                    if (selectorValueArr.includes(datum[selector.field])) return true;\n                    break;\n                case 'not in':\n                    if (!selectorValueArr.includes(datum[selector.field])) return true;\n                    break;\n                default:\n                    break;\n            }\n        } else if (isPartialDatumSelector(selector)) {\n            if (Object.keys(selector).every((key)=>datum[key] === selector[key])) return true;\n        }\n        return false;\n    });\n};\nconst isValueSelector = (selector)=>'string' == typeof selector || 'number' == typeof selector;\nconst isPartialDatumSelector = (selector)=>'object' == typeof selector && null !== selector;\nconst isMeasureSelector = (selector)=>'object' == typeof selector && null !== selector && 'field' in selector && ('operator' in selector || 'op' in selector) && 'value' in selector && ([\n        '=',\n        '==',\n        '!=',\n        '>',\n        '<',\n        '>=',\n        '<=',\n        'between'\n    ].includes(selector.operator) || [\n        '=',\n        '==',\n        '!=',\n        '>',\n        '<',\n        '>=',\n        '<=',\n        'between'\n    ].includes(selector.op));\nconst isDimensionSelector = (selector)=>'object' == typeof selector && null !== selector && 'field' in selector && ('operator' in selector || 'op' in selector) && 'value' in selector && ([\n        'in',\n        'not in'\n    ].includes(selector.operator) || [\n        'in',\n        'not in'\n    ].includes(selector.op));\nconst pointStyle_pointStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { markStyle } = advancedVSeed;\n    const { pointStyle } = markStyle;\n    const result = {\n        ...spec\n    };\n    if (!pointStyle) return result;\n    const pointStyles = Array.isArray(pointStyle) ? pointStyle : [\n        pointStyle\n    ];\n    const customMap = pointStyles.reduce((result, style, index)=>{\n        const { pointBorderColor, pointBorderStyle, pointBorderWidth = 1, pointColor, pointColorOpacity, pointSize } = style;\n        const lineDash = 'dashed' === pointBorderStyle ? [\n            5,\n            2\n        ] : 'dotted' === pointBorderStyle ? [\n            2,\n            5\n        ] : [\n            0,\n            0\n        ];\n        return {\n            ...result,\n            [`custom${index + 1}`]: {\n                level: index + 1,\n                filter: (datum)=>{\n                    if (selector_selector(datum, style.selector)) return true;\n                    return false;\n                },\n                style: {\n                    size: pointSize,\n                    fill: pointColor,\n                    fillOpacity: pointColorOpacity,\n                    innerBorder: {\n                        stroke: pointBorderColor,\n                        lineWidth: pointBorderWidth,\n                        distance: (pointBorderWidth || 0) / 2,\n                        lineDash: lineDash\n                    }\n                }\n            }\n        };\n    }, {});\n    return {\n        ...result,\n        point: {\n            state: {\n                ...customMap\n            }\n        }\n    };\n};\nconst pointStateDimensionHover = (spec)=>{\n    const point = spec.point || {};\n    const result = {\n        ...spec,\n        point: {\n            ...point,\n            state: {\n                ...point.state || {},\n                dimension_hover: {\n                    scaleX: 1.4,\n                    scaleY: 1.4\n                }\n            }\n        }\n    };\n    return result;\n};\nconst pointStateHover = (spec, context)=>{\n    const point = spec.point || {};\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    const result = {\n        ...spec,\n        point: {\n            ...point,\n            state: {\n                ...point.state || {},\n                hover: {\n                    scaleX: 1.4,\n                    scaleY: 1.4,\n                    stroke: (datum, context)=>{\n                        const field = encoding[0]?.group?.[0];\n                        const color = context.seriesColor(datum[field]);\n                        return color;\n                    },\n                    fillOpacity: 0.6,\n                    lineWidth: 1\n                }\n            }\n        }\n    };\n    return result;\n};\nconst lineStyle_lineStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { markStyle, encoding, dataset } = advancedVSeed;\n    const { lineStyle } = markStyle;\n    if (!lineStyle) return spec;\n    const result = {\n        ...spec\n    };\n    const lineStyles = Array.isArray(lineStyle) ? lineStyle : [\n        lineStyle\n    ];\n    const group = encoding[0]?.group?.[0];\n    const lineGroups = groupBy(dataset, (d)=>d[group ?? '']);\n    const customMap = lineStyles.reduce((result, style, index)=>{\n        const { lineColor, lineColorOpacity, lineSmooth, lineStyle, lineWidth } = style;\n        const dashSegment = (lineWidth ?? 2) * 2;\n        const dashGap = lineWidth ?? 2;\n        const lineDash = 'dashed' === lineStyle ? [\n            dashSegment,\n            dashSegment\n        ] : 'dotted' === lineStyle ? [\n            dashGap / 2,\n            2 * dashGap\n        ] : [\n            0,\n            0\n        ];\n        const curveType = lineSmooth ? 'monotone' : 'linear';\n        return {\n            ...result,\n            [`custom${index + 1}`]: {\n                level: index + 1,\n                filter: (datum)=>{\n                    const lineData = lineGroups[datum[group ?? '']];\n                    for (const d of lineData)if (selector_selector(d, style.selector)) return true;\n                    return false;\n                },\n                style: {\n                    curveType: curveType,\n                    strokeOpacity: lineColorOpacity,\n                    stroke: lineColor,\n                    lineWidth: lineWidth,\n                    lineDash: lineDash\n                }\n            }\n        };\n    }, {});\n    return {\n        ...result,\n        line: {\n            state: {\n                ...customMap\n            }\n        }\n    };\n};\nconst isSubset = (sub, obj)=>Object.entries(sub).every(([key, value])=>{\n        if ('string' == typeof value) return obj[key] === value;\n        if ('number' == typeof value) return obj[key] === value;\n        return true;\n    });\nconst annotationPoint_annotationPoint = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation } = advancedVSeed;\n    if (!annotation || !annotation.annotationPoint) return spec;\n    const { annotationPoint } = annotation;\n    const annotationPointList = Array.isArray(annotationPoint) ? annotationPoint : [\n        annotationPoint\n    ];\n    const markPoint = annotationPointList.flatMap((annotationPoint)=>{\n        const { selector: selectorPoint, text = '', textColor = '#cccccc', textFontSize = 12, textFontWeight = 400, textAlign = 'center', textBaseline = 'middle', backgroundBorderColor, backgroundBorderRadius = 4, backgroundBorderWidth = 1, backgroundColor = '#212121', backgroundPadding = 2, backgroundVisible = true, offsetX = 0, offsetY = 0 } = annotationPoint;\n        const dataset = advancedVSeed.dataset.flat();\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return selectedData.map((datum)=>({\n                zIndex: ANNOTATION_Z_INDEX,\n                regionRelative: true,\n                position: (data, context)=>{\n                    const targetDatum = data.find((item)=>isSubset(datum, item));\n                    if (targetDatum) {\n                        const { x, y } = context.dataToPosition(targetDatum);\n                        return {\n                            x,\n                            y\n                        };\n                    }\n                },\n                itemLine: {\n                    visible: false\n                },\n                itemContent: {\n                    offsetY,\n                    offsetX,\n                    text: {\n                        text: text,\n                        style: {\n                            visible: true,\n                            textAlign: textAlign,\n                            textBaseline: textBaseline,\n                            fill: textColor,\n                            stroke: backgroundColor,\n                            lineWidth: 1,\n                            fontSize: textFontSize,\n                            fontWeight: textFontWeight\n                        },\n                        labelBackground: {\n                            visible: backgroundVisible,\n                            padding: backgroundPadding,\n                            style: {\n                                cornerRadius: backgroundBorderRadius ?? 4,\n                                fill: backgroundColor,\n                                stroke: backgroundBorderColor,\n                                lineWidth: backgroundBorderWidth\n                            }\n                        }\n                    }\n                }\n            }));\n    });\n    return {\n        ...spec,\n        markPoint\n    };\n};\nconst annotationVerticalLine_annotationVerticalLine = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation, encoding } = advancedVSeed;\n    if (!annotation || !annotation.annotationVerticalLine) return spec;\n    const { annotationVerticalLine } = annotation;\n    const annotationVerticalLineList = Array.isArray(annotationVerticalLine) ? annotationVerticalLine : [\n        annotationVerticalLine\n    ];\n    const positionMap = {\n        outsideStart: 'start',\n        outsideEnd: 'end',\n        outsideMiddle: 'middle',\n        insideStart: 'insideStartTop',\n        insideMiddle: 'insideMiddleTop',\n        insideEnd: 'insideEndTop'\n    };\n    const markLine = annotationVerticalLineList.flatMap((annotationVerticalLine)=>{\n        const { selector: selectorPoint, xValue, text = '', textPosition = 'insideEnd', textColor = '#cccccc', textFontSize = 12, textFontWeight = 400, textAlign = 'right', textBaseline = 'top', backgroundBorderColor, backgroundBorderRadius = 4, backgroundBorderWidth = 1, backgroundColor = '#212121', backgroundPadding = 2, backgroundVisible = true, lineColor = '#212121', lineStyle = 'dashed', lineVisible = true, lineWidth = 1, offsetX = 0, offsetY = 0 } = annotationVerticalLine;\n        const dataset = advancedVSeed.dataset.flat();\n        const generateOneMarkLine = (x)=>({\n                x: x,\n                zIndex: ANNOTATION_Z_INDEX,\n                offsetX,\n                offsetY,\n                line: {\n                    style: {\n                        visible: lineVisible,\n                        stroke: lineColor,\n                        lineStyle: lineStyle,\n                        lineWidth: lineWidth,\n                        lineDash: 'dashed' === lineStyle ? [\n                            5,\n                            2\n                        ] : 'dotted' === lineStyle ? [\n                            2,\n                            5\n                        ] : [\n                            0\n                        ]\n                    }\n                },\n                label: {\n                    text: text,\n                    position: positionMap[textPosition],\n                    style: {\n                        visible: true,\n                        stroke: backgroundColor,\n                        lineWidth: 1,\n                        textAlign: textAlign,\n                        textBaseline: textBaseline,\n                        fill: textColor,\n                        fontSize: textFontSize,\n                        fontWeight: textFontWeight,\n                        dy: textFontSize\n                    },\n                    labelBackground: {\n                        visible: backgroundVisible,\n                        padding: backgroundPadding,\n                        style: {\n                            cornerRadius: backgroundBorderRadius ?? 4,\n                            fill: backgroundColor,\n                            stroke: backgroundBorderColor,\n                            lineWidth: backgroundBorderWidth\n                        }\n                    }\n                },\n                endSymbol: {\n                    visible: true,\n                    style: {\n                        dy: 4,\n                        fill: lineColor\n                    }\n                }\n            });\n        if (!selectorPoint && isArray(xValue) || isString(xValue) || isNumber(xValue)) {\n            const xValueArr = Array.isArray(xValue) ? xValue : [\n                xValue\n            ];\n            return xValueArr.map(generateOneMarkLine);\n        }\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return selectedData.map((datum)=>{\n            const x = encoding[0]?.x?.[0];\n            if (!x) return {};\n            return generateOneMarkLine(datum[x]);\n        });\n    });\n    const specMarkLine = spec.markLine || [];\n    const newMarkLine = [\n        ...specMarkLine,\n        ...markLine || []\n    ];\n    return {\n        ...spec,\n        markLine: newMarkLine\n    };\n};\nconst annotationHorizontalLine_annotationHorizontalLine = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation, encoding } = advancedVSeed;\n    if (!annotation || !annotation.annotationHorizontalLine) return spec;\n    const { annotationHorizontalLine } = annotation;\n    const annotationVerticalLineList = Array.isArray(annotationHorizontalLine) ? annotationHorizontalLine : [\n        annotationHorizontalLine\n    ];\n    const positionMap = {\n        outsideStart: 'start',\n        outsideEnd: 'end',\n        outsideMiddle: 'middle',\n        insideStart: 'insideStartTop',\n        insideMiddle: 'insideMiddleTop',\n        insideEnd: 'insideEndTop'\n    };\n    const markLine = annotationVerticalLineList.flatMap((annotationVerticalLine)=>{\n        const { selector: selectorPoint, yValue, text = '', textPosition = 'insideEnd', textColor = '#ffffff', textFontSize = 12, textFontWeight = 400, textAlign = 'center', textBaseline = 'bottom', backgroundBorderColor, backgroundBorderRadius = 4, backgroundBorderWidth = 1, backgroundColor = '#212121', backgroundPadding = 2, backgroundVisible = true, lineColor = '#212121', lineStyle = 'dashed', lineVisible = true, lineWidth = 1, offsetX = 0, offsetY = 0 } = annotationVerticalLine;\n        const dataset = advancedVSeed.dataset.flat();\n        const generateOneMarkLine = (y)=>({\n                y,\n                offsetX,\n                offsetY,\n                zIndex: ANNOTATION_Z_INDEX,\n                line: {\n                    style: {\n                        visible: lineVisible,\n                        stroke: lineColor,\n                        lineStyle: lineStyle,\n                        lineWidth: lineWidth,\n                        lineDash: 'dashed' === lineStyle ? [\n                            5,\n                            2\n                        ] : 'dotted' === lineStyle ? [\n                            2,\n                            5\n                        ] : [\n                            0\n                        ]\n                    }\n                },\n                label: {\n                    text: text,\n                    position: positionMap[textPosition],\n                    style: {\n                        visible: true,\n                        dy: textFontSize,\n                        stroke: backgroundColor,\n                        lineWidth: 1,\n                        textAlign: textAlign,\n                        textBaseline: textBaseline,\n                        fill: textColor,\n                        fontSize: textFontSize,\n                        fontWeight: textFontWeight\n                    },\n                    labelBackground: {\n                        visible: backgroundVisible,\n                        padding: backgroundPadding,\n                        style: {\n                            cornerRadius: backgroundBorderRadius ?? 4,\n                            fill: backgroundColor,\n                            stroke: backgroundBorderColor,\n                            lineWidth: backgroundBorderWidth\n                        }\n                    }\n                },\n                endSymbol: {\n                    visible: true,\n                    style: {\n                        dx: -4,\n                        fill: lineColor\n                    }\n                }\n            });\n        if (!selectorPoint && isArray(yValue) || isString(yValue) || isNumber(yValue)) {\n            const yValueArr = Array.isArray(yValue) ? yValue : [\n                yValue\n            ];\n            return yValueArr.map(generateOneMarkLine);\n        }\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return selectedData.map((datum)=>{\n            const y = encoding[0]?.y?.[0];\n            if (!y) return {};\n            return generateOneMarkLine(datum[y]);\n        });\n    });\n    const specMarkLine = spec.markLine || [];\n    const newMarkLine = [\n        ...specMarkLine,\n        ...markLine || []\n    ];\n    return {\n        ...spec,\n        markLine: newMarkLine\n    };\n};\nconst annotationArea_annotationArea = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation } = advancedVSeed;\n    if (!annotation || !annotation.annotationArea) return spec;\n    const { annotationArea } = annotation;\n    const annotationAreaList = Array.isArray(annotationArea) ? annotationArea : [\n        annotationArea\n    ];\n    const positionMap = {\n        top: 'insideTop',\n        topRight: 'insideTopRight',\n        topLeft: 'insideTopLeft',\n        bottom: 'insideBottom',\n        bottomLeft: 'insideBottomLeft',\n        bottomRight: 'insideBottomRight',\n        left: 'insideLeft',\n        right: 'insideRight'\n    };\n    const markArea = annotationAreaList.flatMap((annotationArea)=>{\n        const { selector: selectorPoint, text = '', textPosition = 'top', textColor = '#ffffff', textFontSize = 12, textFontWeight = 400, textAlign = 'center', textBaseline = 'top', backgroundBorderColor, backgroundBorderRadius = 4, backgroundBorderWidth = 1, backgroundColor = '#191d24', backgroundPadding = 10, backgroundVisible = true, outerPadding = 4, areaColor = '#888888', areaColorOpacity = 0.15, areaBorderColor, areaBorderRadius, areaBorderWidth, offsetX = 0, offsetY = 0 } = annotationArea;\n        const dataset = advancedVSeed.dataset.flat();\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return {\n            zIndex: ANNOTATION_Z_INDEX,\n            regionRelative: true,\n            offsetX,\n            offsetY,\n            positions: (data, context)=>{\n                const positionData = data.filter((item)=>selectedData.some((datum)=>isSubset(datum, item)));\n                const xyList = positionData.map((datum)=>context.dataToPosition(datum));\n                const yAxisHelper = context.getYAxisHelper();\n                const xAxisHelper = context.getXAxisHelper();\n                if ('function' == typeof xAxisHelper?.getBandwidth) {\n                    const yScale = yAxisHelper.getScale();\n                    const minX = Math.min(...xyList.map((item)=>item.x)) - outerPadding;\n                    const maxX = Math.max(...xyList.map((item)=>item.x)) + outerPadding;\n                    const minY = Math.min(...yScale.range());\n                    const maxY = Math.max(...yScale.range());\n                    return [\n                        {\n                            x: minX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: maxY\n                        },\n                        {\n                            x: minX,\n                            y: maxY\n                        }\n                    ];\n                }\n                if ('function' == typeof yAxisHelper?.getBandwidth) {\n                    const xScale = xAxisHelper.getScale();\n                    const minY = Math.min(...xyList.map((item)=>item.y)) - outerPadding;\n                    const maxY = Math.max(...xyList.map((item)=>item.y)) + outerPadding;\n                    const minX = Math.min(...xScale.range());\n                    const maxX = Math.max(...xScale.range());\n                    return [\n                        {\n                            x: minX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: maxY\n                        },\n                        {\n                            x: minX,\n                            y: maxY\n                        }\n                    ];\n                }\n                return [];\n            },\n            label: {\n                position: positionMap[textPosition],\n                visible: true,\n                text: text,\n                style: {\n                    textAlign: textAlign,\n                    textBaseline: textBaseline,\n                    fill: textColor,\n                    stroke: backgroundColor,\n                    lineWidth: 1,\n                    fontSize: textFontSize,\n                    fontWeight: textFontWeight\n                },\n                labelBackground: {\n                    visible: backgroundVisible,\n                    padding: backgroundPadding,\n                    style: {\n                        cornerRadius: backgroundBorderRadius ?? 4,\n                        fill: backgroundColor,\n                        stroke: backgroundBorderColor,\n                        lineWidth: backgroundBorderWidth\n                    }\n                }\n            },\n            area: {\n                style: {\n                    visible: true,\n                    fill: areaColor,\n                    fillOpacity: areaColorOpacity,\n                    stroke: areaBorderColor,\n                    lineWidth: areaBorderWidth,\n                    cornerRadius: areaBorderRadius\n                }\n            }\n        };\n    });\n    return {\n        ...spec,\n        markArea: markArea\n    };\n};\nconst initPivot = (spec)=>{\n    const result = {\n        ...spec\n    };\n    return {\n        ...result,\n        animation: true,\n        rows: [],\n        columns: [],\n        indicators: [],\n        records: [],\n        widthMode: 'adaptive',\n        heightMode: 'adaptive',\n        indicatorsAsCol: false\n    };\n};\nconst pivotGridStyle = (spec)=>{\n    const result = {\n        ...spec\n    };\n    const transparent = 'rgba(0,0,0,0)';\n    const hoverBackgroundColor = 'rgba(178,186,207, 0.2)';\n    return {\n        ...result,\n        theme: {\n            underlayBackgroundColor: transparent,\n            bodyStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: [\n                    0,\n                    0,\n                    2,\n                    0\n                ],\n                bgColor: transparent,\n                padding: [\n                    0,\n                    0,\n                    1,\n                    0\n                ],\n                hover: {\n                    cellBgColor: 'transparent'\n                }\n            },\n            headerStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                fontSize: 12,\n                color: '#333333',\n                textAlign: 'center',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            rowHeaderStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                fontSize: 12,\n                color: '#333333',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            cornerHeaderStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                textAlign: 'center',\n                fontSize: 12,\n                color: '#333333',\n                fontWeight: 'bold',\n                borderLineWidth: [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            cornerRightTopCellStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            cornerLeftBottomCellStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            cornerRightBottomCellStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            rightFrozenStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            bottomFrozenStyle: {\n                borderColor: 'rgba(0,4,20,0.2)',\n                borderLineWidth: 0,\n                bgColor: transparent,\n                hover: {\n                    cellBgColor: hoverBackgroundColor\n                }\n            },\n            selectionStyle: {\n                cellBgColor: '',\n                cellBorderColor: ''\n            },\n            frameStyle: {\n                borderLineWidth: 0,\n                bgColor: transparent\n            }\n        }\n    };\n};\nconst pivotIndicators_pivotIndicators = (chartPipeline)=>(spec, context)=>{\n        const result = {\n            ...spec\n        };\n        const { advancedVSeed } = context;\n        const { measures, datasetReshapeInfo, encoding } = advancedVSeed;\n        const colorItems = unique(datasetReshapeInfo.flatMap((d)=>d.unfoldInfo.colorItems));\n        const indicators = datasetReshapeInfo.map((reshapeInfo, index)=>{\n            const measure = measures?.find((d)=>d.id === reshapeInfo.id);\n            const newEncoding = [\n                encoding[index]\n            ];\n            const newDatasetReshapeInfo = [\n                {\n                    ...reshapeInfo,\n                    unfoldInfo: {\n                        ...reshapeInfo.unfoldInfo,\n                        colorItems\n                    }\n                }\n            ];\n            const newContext = {\n                ...context,\n                advancedVSeed: {\n                    ...advancedVSeed,\n                    datasetReshapeInfo: newDatasetReshapeInfo,\n                    encoding: newEncoding\n                }\n            };\n            const chartSpec = execPipeline(chartPipeline, newContext, {});\n            return {\n                indicatorKey: reshapeInfo.id,\n                title: measure?.alias,\n                cellType: 'chart',\n                chartModule: 'vchart',\n                chartSpec: chartSpec,\n                style: {\n                    padding: [\n                        1,\n                        1,\n                        0,\n                        1\n                    ]\n                }\n            };\n        });\n        return {\n            ...result,\n            indicators: indicators\n        };\n    };\nconst pivotIndicators_pivotIndicatorsAsRow = (spec)=>{\n    const result = {\n        ...spec\n    };\n    return {\n        ...result,\n        indicatorsAsCol: false\n    };\n};\nconst pivotIndicators_pivotIndicatorsAsCol = (spec)=>{\n    const result = {\n        ...spec\n    };\n    return {\n        ...result,\n        indicatorsAsCol: true\n    };\n};\nconst datasetPivot = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dataset, datasetReshapeInfo } = advancedVSeed;\n    const records = dataset.reduce((pre, cur, index)=>{\n        const id = datasetReshapeInfo[index].id;\n        pre[id] = cur;\n        return pre;\n    }, {});\n    return {\n        ...result,\n        records: records\n    };\n};\nconst pivotRowDimensions = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    if (!dimensions) return result;\n    const rowDimensions = dimensions.filter((dim)=>'rowDimension' === dim.location);\n    const rows = rowDimensions.map((dim)=>({\n            dimensionKey: dim.id,\n            title: dim.alias || dim.id\n        }));\n    return {\n        ...result,\n        rows: rows\n    };\n};\nconst pivotColumnDimensions = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const dimensions = advancedVSeed.dimensions;\n    if (!dimensions) return result;\n    const columnDimensions = dimensions.filter((dim)=>'columnDimension' === dim.location);\n    const columns = columnDimensions.map((dim)=>({\n            dimensionKey: dim.id,\n            title: dim.alias || dim.id\n        }));\n    return {\n        ...result,\n        columns: columns\n    };\n};\nconst pivotDiscreteLegend = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.legend) return result;\n    const { datasetReshapeInfo } = advancedVSeed;\n    const colorItems = unique(datasetReshapeInfo.flatMap((d)=>d.unfoldInfo.colorItems));\n    const colorIdMap = datasetReshapeInfo.reduce((prev, cur)=>({\n            ...prev,\n            ...cur.unfoldInfo.colorIdMap\n        }), {});\n    const { legend, color } = baseConfig;\n    const { colorScheme } = color;\n    const { enable, position = 'bottom', labelFontColor, labelFontSize = 12, labelFontWeight = 400, maxSize, border, shapeType = 'rectRound' } = legend || {};\n    const orient = [\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ].includes(position) ? 'bottom' : [\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr'\n    ].includes(position) ? 'top' : [\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb'\n    ].includes(position) ? 'left' : 'right';\n    const legendPosition = [\n        'topLeft',\n        'bottomLeft',\n        'leftTop',\n        'rightTop',\n        'lt',\n        'rt',\n        'tl',\n        'bl'\n    ].includes(position) ? 'start' : [\n        'topRight',\n        'bottomRight',\n        'leftBottom',\n        'rightBottom',\n        'lb',\n        'rb',\n        'rt',\n        'br'\n    ].includes(position) ? 'end' : 'middle';\n    const legends = {\n        visible: enable,\n        type: 'discrete',\n        orient,\n        position: legendPosition,\n        maxCol: maxSize,\n        maxRow: maxSize,\n        data: colorItems.map((d, index)=>({\n                label: d,\n                shape: {\n                    outerBorder: border ? {\n                        stroke: colorScheme?.[index],\n                        distance: 3,\n                        lineWidth: 1\n                    } : void 0,\n                    fill: colorScheme?.[index]\n                }\n            })),\n        item: {\n            focus: true,\n            maxWidth: 260,\n            focusIconStyle: {\n                size: labelFontSize + 2,\n                fill: labelFontColor,\n                fontWeight: labelFontWeight\n            },\n            shape: {\n                space: border ? 6 : 4,\n                style: {\n                    symbolType: shapeType,\n                    size: border ? 8 : 10\n                }\n            },\n            label: {\n                formatMethod: (value)=>colorIdMap[String(value)] ?? value,\n                style: {\n                    fontSize: labelFontSize,\n                    fill: labelFontColor,\n                    fontWeight: labelFontWeight\n                }\n            },\n            background: {\n                state: {\n                    selectedHover: {\n                        fill: labelFontColor,\n                        fillOpacity: 0.05\n                    }\n                }\n            }\n        }\n    };\n    return {\n        ...result,\n        legends\n    };\n};\nconst pivotAdapter_pivotAdapter = (pipeline, pivotPipeline)=>(spec, context)=>{\n        const { vseed } = context;\n        const usePivotChart = isPivotChart(vseed);\n        if (usePivotChart) return execPipeline(pivotPipeline, context, spec);\n        return execPipeline(pipeline, context, spec);\n    };\nconst line_line = [\n    initLine,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairLine,\n    discreteLegend,\n    pointStyle_pointStyle,\n    pointStateDimensionHover,\n    lineStyle_lineStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotLine = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initLine,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        pointStyle_pointStyle,\n        pointStateDimensionHover,\n        lineStyle_lineStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst lineSpecPipeline = [\n    pivotAdapter_pivotAdapter(line_line, pivotLine)\n];\nconst registerLine = ()=>{\n    Builder._advancedPipelineMap.line = lineAdvancedPipeline;\n    Builder._specPipelineMap.line = lineSpecPipeline;\n};\nconst dataReshapeFor2D1M_emptyReshapeResult = {\n    dataset: [],\n    foldInfo: {\n        foldMap: {},\n        measureId: '',\n        measureName: '',\n        measureValue: ''\n    },\n    unfoldInfo: {\n        groupName: '',\n        groupId: '',\n        colorItems: [],\n        colorIdMap: {}\n    }\n};\nconst dataReshapeFor2D1M = (dataset, dimensions, measures, options)=>{\n    const { foldMeasureId = FoldMeasureId, foldMeasureName = FoldMeasureName, foldMeasureValue = FoldMeasureValue, unfoldDimensionGroup = UnfoldDimensionGroup, unfoldDimensionGroupId = UnfoldDimensionGroupId } = options || {};\n    if (0 === dimensions.length && 0 === measures.length) return dataReshapeFor2D1M_emptyReshapeResult;\n    const { dataset: foldedDataset, foldInfo } = foldMeasures(dataset, measures, foldMeasureId, foldMeasureName, foldMeasureValue);\n    if (0 === dimensions.length) {\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(foldedDataset, [\n            {\n                id: foldMeasureId,\n                alias: i18n`指标Id`,\n                location: 'dimension'\n            },\n            {\n                id: foldMeasureName,\n                alias: i18n`指标名称`,\n                location: 'dimension'\n            }\n        ], [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], 1, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo,\n            unfoldInfo\n        };\n    }\n    {\n        const onlyOneMeasure = 1 === measures.length;\n        const onlyOneDimension = 1 === dimensions.length;\n        const dims = [\n            ...dimensions\n        ];\n        if (!onlyOneMeasure || onlyOneDimension) dims.push({\n            id: foldMeasureName,\n            alias: i18n`指标名称`,\n            location: 'dimension'\n        });\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(foldedDataset, dims, [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], 1, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo,\n            unfoldInfo\n        };\n    }\n};\nconst reshapeTo2D1M = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures } = advancedVSeed;\n    if (!measures || !dimensions || !dataset) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    const { dataset: newDatasets, foldInfo, unfoldInfo } = dataReshapeFor2D1M(dataset, dimensions, measures);\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: [\n            {\n                id: '2D1M',\n                foldInfo,\n                unfoldInfo\n            }\n        ],\n        dimensions,\n        measures\n    };\n};\nconst pivotReshapeTo2D1M = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { measures } = advancedVSeed;\n    const dimensions = advancedVSeed.dimensions;\n    if (!measures || !dimensions) return result;\n    const measureGroups = [];\n    if (measures) measures.forEach((measure)=>{\n        if (measure.children && measure.children.length > 0) measureGroups.push(measure);\n    });\n    const commonDimensions = dimensions.filter((dim)=>'dimension' === dim.location);\n    const newDatasets = [];\n    const datasetReshapeInfo = [];\n    measureGroups.forEach((measureGroup)=>{\n        const measures = measureGroup.children;\n        if (!measures) return;\n        const groupId = measureGroup.id;\n        const { dataset: newSubDataset, foldInfo, unfoldInfo } = dataReshapeFor2D1M(dataset, commonDimensions, measures, {\n            foldMeasureId: FoldMeasureId,\n            foldMeasureName: FoldMeasureName,\n            foldMeasureValue: FoldMeasureValue + groupId,\n            unfoldDimensionGroup: UnfoldDimensionGroup\n        });\n        const reshapeInfo = {\n            id: groupId,\n            foldInfo,\n            unfoldInfo\n        };\n        newDatasets.push(newSubDataset);\n        datasetReshapeInfo.push(reshapeInfo);\n    });\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: datasetReshapeInfo\n    };\n};\nconst columnAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingXY,\n    sortXBandAxis,\n    sort_sortLegend,\n    columnConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initColumn = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    result.type = 'bar';\n    result.direction = 'vertical';\n    result.xField = encoding[0].x[0];\n    result.yField = encoding[0].y[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst stackCornerRadius_stackCornerRadius = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const stackCornerRadius = advancedVSeed.config?.[chartType]?.stackCornerRadius;\n    return {\n        ...spec,\n        stackCornerRadius\n    };\n};\nconst stackInverse = (spec)=>{\n    const result = {\n        ...spec\n    };\n    result.stackInverse = true;\n    return result;\n};\nconst verticalCrosshairRect = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.crosshairRect;\n    if (!config) return result;\n    if (!result.crosshair) result.crosshair = {};\n    const { visible = true, rectColor, labelColor, labelVisible, labelBackgroundColor } = config;\n    const crosshair = result.crosshair;\n    crosshair.xField = {\n        visible,\n        line: {\n            type: 'rect',\n            style: {\n                lineWidth: 0,\n                opacity: 0.2,\n                fill: rectColor\n            }\n        },\n        label: {\n            visible: labelVisible,\n            labelBackground: {\n                visible: labelVisible,\n                style: {\n                    fill: labelBackgroundColor\n                }\n            },\n            style: {\n                fill: labelColor\n            }\n        }\n    };\n    return result;\n};\nconst barStyle_barStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { markStyle, dataset } = advancedVSeed;\n    const { barStyle } = markStyle;\n    const showStroke = dataset.length <= 100;\n    const result = {\n        ...spec,\n        bar: {\n            style: {\n                stroke: '#fff',\n                lineWidth: showStroke ? 1 : 0\n            },\n            state: {\n                hover: {\n                    fillOpacity: 0.6\n                }\n            }\n        }\n    };\n    if (!barStyle) return result;\n    const barStyles = Array.isArray(barStyle) ? barStyle : [\n        barStyle\n    ];\n    const customMap = barStyles.reduce((result, style, index)=>{\n        const { barBorderColor, barBorderStyle, barBorderWidth = 1, barColor, barColorOpacity, barRadius } = style;\n        const lineDash = 'dashed' === barBorderStyle ? [\n            5,\n            2\n        ] : 'dotted' === barBorderStyle ? [\n            2,\n            5\n        ] : [\n            0,\n            0\n        ];\n        return {\n            ...result,\n            [`custom${index + 1}`]: {\n                level: index + 1,\n                filter: (datum)=>{\n                    if (selector_selector(datum, style.selector)) return true;\n                    return false;\n                },\n                style: {\n                    fill: barColor,\n                    fillOpacity: barColorOpacity,\n                    cornerRadius: barRadius,\n                    innerBorder: {\n                        stroke: barBorderColor,\n                        lineWidth: barBorderWidth,\n                        distance: (barBorderWidth || 0) / 2,\n                        lineDash: lineDash\n                    }\n                }\n            }\n        };\n    }, {});\n    return {\n        ...result,\n        bar: {\n            state: {\n                ...customMap\n            }\n        }\n    };\n};\nconst annotationAreaBand = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { annotation } = advancedVSeed;\n    if (!annotation || !annotation.annotationArea) return spec;\n    const { annotationArea } = annotation;\n    const annotationAreaList = Array.isArray(annotationArea) ? annotationArea : [\n        annotationArea\n    ];\n    const positionMap = {\n        top: 'insideTop',\n        topRight: 'insideTopRight',\n        topLeft: 'insideTopLeft',\n        bottom: 'insideBottom',\n        bottomLeft: 'insideBottomLeft',\n        bottomRight: 'insideBottomRight',\n        left: 'insideLeft',\n        right: 'insideRight'\n    };\n    const markArea = annotationAreaList.flatMap((annotationArea)=>{\n        const { selector: selectorPoint, text = '', textPosition = 'top', textColor = '#ffffff', textFontSize = 12, textFontWeight = 400, textAlign = 'center', textBaseline = 'top', backgroundBorderColor, backgroundBorderRadius = 4, backgroundBorderWidth = 1, backgroundColor = '#191d24', backgroundPadding = 4, backgroundVisible = true, outerPadding = 8, areaColor = '#888888', areaColorOpacity = 0.15, areaBorderColor, areaBorderRadius, areaBorderWidth, offsetX, offsetY } = annotationArea;\n        const dataset = advancedVSeed.dataset.flat();\n        const selectedData = selectorPoint ? dataset.filter((datum)=>selector_selector(datum, selectorPoint)) : [];\n        return {\n            zIndex: ANNOTATION_Z_INDEX,\n            regionRelative: true,\n            offsetX,\n            offsetY,\n            positions: (data, context)=>{\n                const positionData = data.filter((item)=>selectedData.some((datum)=>isSubset(datum, item)));\n                const xyList = positionData.map((datum)=>context.dataToPosition(datum));\n                const yAxisHelper = context.getYAxisHelper();\n                const xAxisHelper = context.getXAxisHelper();\n                if ('function' == typeof xAxisHelper?.getBandwidth) {\n                    const depth = context.fieldX.length ?? 0;\n                    const xBandWidth = xAxisHelper?.getBandwidth?.(depth - 1);\n                    const yScale = yAxisHelper.getScale();\n                    const minX = Math.min(...xyList.map((item)=>item.x)) - outerPadding;\n                    const maxX = Math.max(...xyList.map((item)=>item.x)) + xBandWidth + outerPadding;\n                    const minY = Math.min(...yScale.range());\n                    const maxY = Math.max(...yScale.range());\n                    return [\n                        {\n                            x: minX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: maxY\n                        },\n                        {\n                            x: minX,\n                            y: maxY\n                        }\n                    ];\n                }\n                if ('function' == typeof yAxisHelper?.getBandwidth) {\n                    const depth = context.fieldY.length ?? 0;\n                    const yBandWidth = yAxisHelper?.getBandwidth?.(depth - 1);\n                    const xScale = xAxisHelper.getScale();\n                    const minY = Math.min(...xyList.map((item)=>item.y)) - outerPadding;\n                    const maxY = Math.max(...xyList.map((item)=>item.y)) + yBandWidth + outerPadding;\n                    const minX = Math.min(...xScale.range());\n                    const maxX = Math.max(...xScale.range());\n                    return [\n                        {\n                            x: minX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: minY\n                        },\n                        {\n                            x: maxX,\n                            y: maxY\n                        },\n                        {\n                            x: minX,\n                            y: maxY\n                        }\n                    ];\n                }\n                return [];\n            },\n            label: {\n                position: positionMap[textPosition],\n                visible: true,\n                text: text,\n                style: {\n                    textAlign: textAlign,\n                    textBaseline: textBaseline,\n                    stroke: backgroundColor,\n                    lineWidth: 1,\n                    fill: textColor,\n                    fontSize: textFontSize,\n                    fontWeight: textFontWeight\n                },\n                labelBackground: {\n                    visible: backgroundVisible,\n                    padding: backgroundPadding,\n                    style: {\n                        cornerRadius: backgroundBorderRadius ?? 4,\n                        fill: backgroundColor,\n                        stroke: backgroundBorderColor,\n                        lineWidth: backgroundBorderWidth\n                    }\n                }\n            },\n            area: {\n                style: {\n                    visible: true,\n                    fill: areaColor,\n                    fillOpacity: areaColorOpacity,\n                    stroke: areaBorderColor,\n                    lineWidth: areaBorderWidth,\n                    cornerRadius: areaBorderRadius\n                }\n            }\n        };\n    });\n    return {\n        ...spec,\n        markArea: markArea\n    };\n};\nconst column = [\n    initColumn,\n    stackCornerRadius_stackCornerRadius,\n    stackInverse,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairRect,\n    discreteLegend,\n    barStyle_barStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotColumn = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initColumn,\n        stackCornerRadius_stackCornerRadius,\n        stackInverse,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairRect,\n        barStyle_barStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst columnSpecPipeline = [\n    pivotAdapter_pivotAdapter(column, pivotColumn)\n];\nconst registerColumn = ()=>{\n    Builder._advancedPipelineMap.column = columnAdvancedPipeline;\n    Builder._specPipelineMap.column = columnSpecPipeline;\n};\nconst columnParallelAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingXY,\n    sortXBandAxis,\n    sort_sortLegend,\n    columnParallelConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initColumnParallel = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding, datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    result.type = 'bar';\n    result.direction = 'vertical';\n    result.xField = [\n        encoding[0].x[0],\n        unfoldInfo.groupId\n    ];\n    result.yField = encoding[0].y[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst columnParallel = [\n    initColumnParallel,\n    stackCornerRadius_stackCornerRadius,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    discreteLegend,\n    verticalCrosshairRect,\n    barStyle_barStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotColumnParallel = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initColumnParallel,\n        stackCornerRadius_stackCornerRadius,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairRect,\n        barStyle_barStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst columnParallelSpecPipeline = [\n    pivotAdapter_pivotAdapter(columnParallel, pivotColumnParallel)\n];\nconst registerColumnParallel = ()=>{\n    Builder._advancedPipelineMap.columnParallel = columnParallelAdvancedPipeline;\n    Builder._specPipelineMap.columnParallel = columnParallelSpecPipeline;\n};\nconst columnPercentAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingXY,\n    sortXBandAxis,\n    sort_sortLegend,\n    columnPercentConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst percent = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    result.percent = true;\n    return result;\n};\nconst columnPercent = [\n    initColumn,\n    stackCornerRadius_stackCornerRadius,\n    stackInverse,\n    color_color,\n    background_backgroundColor,\n    percent,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairRect,\n    discreteLegend,\n    barStyle_barStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotColumnPercent = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initColumn,\n        stackCornerRadius_stackCornerRadius,\n        stackInverse,\n        color_color,\n        percent,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairRect,\n        barStyle_barStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst columnPercentSpecPipeline = [\n    pivotAdapter_pivotAdapter(columnPercent, pivotColumnPercent)\n];\nconst registerColumnPercent = ()=>{\n    Builder._advancedPipelineMap.columnPercent = columnPercentAdvancedPipeline;\n    Builder._specPipelineMap.columnPercent = columnPercentSpecPipeline;\n};\nconst encodingYX = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, dimensions } = advancedVSeed;\n    if (!datasetReshapeInfo || !dimensions) return result;\n    const yDimension = dimensions.find((item)=>'rowDimension' !== item.location && 'columnDimension' !== item.location);\n    const isZeroDimension = 0 === dimensions.length;\n    const encoding = datasetReshapeInfo.reduce((prev, cur)=>{\n        const { foldInfo, unfoldInfo } = cur;\n        const y = [\n            isZeroDimension ? foldInfo.measureName : yDimension?.id\n        ];\n        const x = [\n            foldInfo.measureValue\n        ];\n        const group = [\n            unfoldInfo.groupId\n        ];\n        const color = [\n            foldInfo.measureName\n        ];\n        return [\n            ...prev,\n            {\n                x,\n                y,\n                group,\n                color\n            }\n        ];\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst barAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingYX,\n    sortYBandAxis,\n    sort_sortLegend,\n    barConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initBar = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    result.type = 'bar';\n    result.direction = 'horizontal';\n    result.yField = encoding[0].y?.[0];\n    result.xField = encoding[0].x?.[0];\n    result.seriesField = encoding[0].group?.[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst datasetYX = (spec, context)=>{\n    const { advancedVSeed, vseed } = context;\n    const { encoding, analysis, datasetReshapeInfo } = advancedVSeed;\n    const { orderMapping = {} } = analysis ?? {};\n    const angle = encoding[0]?.angle?.[0];\n    const y = encoding[0]?.y?.[0];\n    const group = encoding[0]?.group?.[0];\n    const id = datasetReshapeInfo[0].id;\n    const fields = {};\n    if (angle) fields[angle] = {\n        sortIndex: 0\n    };\n    if (y) {\n        const order = orderMapping[y];\n        if (order) fields[y] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[y] = {\n            sortIndex: 0\n        };\n    }\n    if (group) {\n        const order = orderMapping[group];\n        if (order) fields[group] = {\n            sortIndex: 0,\n            domain: order,\n            lockStatisticsByDomain: true\n        };\n        else fields[group] = {\n            sortIndex: 0\n        };\n    }\n    return {\n        ...spec,\n        data: {\n            id,\n            values: isPivotChart(vseed) ? void 0 : advancedVSeed.dataset,\n            fields: fields\n        }\n    };\n};\nconst xLinear = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const { locale } = advancedVSeed;\n    const config = advancedVSeed.config?.[chartType]?.xAxis;\n    if (!result.axes) result.axes = [];\n    if (!config) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                type: 'linear',\n                orient: 'bottom'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, zero, nice, inverse, max, min, log, logBase = 10 } = config;\n    const linearAxis = {\n        visible,\n        type: log ? 'log' : 'linear',\n        base: logBase,\n        orient: 'bottom',\n        nice,\n        zero: log ? false : zero,\n        inverse,\n        max,\n        min,\n        label: {\n            visible: label?.visible,\n            formatMethod: (value)=>autoFormatter(value, locale),\n            style: {\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            }\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        innerOffset: {\n            right: LINEAR_AXIS_INNER_OFFSET_TOP\n        }\n    };\n    result.axes = [\n        ...result.axes,\n        linearAxis\n    ];\n    return result;\n};\nconst yBand = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.yAxis;\n    if (!result.axes) result.axes = [];\n    if (!config) {\n        result.axes = [\n            ...result.axes,\n            {\n                visible: true,\n                type: 'band',\n                orient: 'left'\n            }\n        ];\n        return result;\n    }\n    const { visible = true, label, tick, title, grid, line, labelAutoHide, labelAutoHideGap, labelAutoLimit, labelAutoLimitLength = 80, labelAutoRotate, labelAutoRotateAngleRange } = config;\n    const sampling = !(labelAutoHide || labelAutoRotate || labelAutoLimit);\n    const bandAxis = {\n        visible,\n        type: 'band',\n        orient: 'left',\n        maxWidth: labelAutoLimitLength + 60,\n        sampling,\n        hover: true,\n        label: {\n            visible: label?.visible,\n            flush: true,\n            containerAlign: 'left',\n            space: 8,\n            style: {\n                maxLineWidth: labelAutoLimitLength,\n                fill: label?.labelColor,\n                angle: label?.labelAngle,\n                fontSize: label?.labelFontSize,\n                fontWeight: label?.labelFontWeight\n            },\n            minGap: labelAutoHideGap,\n            autoHide: labelAutoHide,\n            autoHideMethod: 'greedy',\n            autoHideSeparation: labelAutoHideGap,\n            autoLimit: labelAutoLimit,\n            autoRotate: labelAutoRotate,\n            autoRotateAngle: labelAutoRotateAngleRange,\n            lastVisible: true\n        },\n        title: {\n            visible: title?.visible,\n            text: title?.titleText,\n            style: {\n                fill: title?.titleColor,\n                fontSize: title?.titleFontSize,\n                fontWeight: title?.titleFontWeight\n            }\n        },\n        tick: {\n            visible: tick?.visible,\n            tickSize: tick?.tickSize,\n            inside: tick?.tickInside,\n            style: {\n                stroke: tick?.tickColor\n            }\n        },\n        grid: {\n            visible: grid?.visible,\n            style: {\n                lineWidth: grid?.gridWidth,\n                stroke: grid?.gridColor\n            }\n        },\n        domainLine: {\n            visible: line?.visible,\n            style: {\n                lineWidth: line?.lineWidth,\n                stroke: line?.lineColor\n            }\n        },\n        paddingInner: [\n            0.15,\n            0.1\n        ],\n        paddingOuter: [\n            0.075,\n            0.1\n        ]\n    };\n    result.axes = [\n        ...result.axes,\n        bandAxis\n    ];\n    return result;\n};\nconst horizontalCrosshairRect = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.crosshairRect;\n    if (!config) return result;\n    if (!result.crosshair) result.crosshair = {};\n    const { visible = true, rectColor, labelColor, labelVisible, labelBackgroundColor } = config;\n    const crosshair = result.crosshair;\n    crosshair.yField = {\n        visible,\n        line: {\n            type: 'rect',\n            style: {\n                lineWidth: 0,\n                opacity: 0.2,\n                fill: rectColor\n            }\n        },\n        label: {\n            visible: labelVisible,\n            labelBackground: {\n                visible: labelVisible,\n                style: {\n                    fill: labelBackgroundColor\n                }\n            },\n            style: {\n                fill: labelColor\n            }\n        }\n    };\n    return result;\n};\nconst bar = [\n    initBar,\n    stackCornerRadius_stackCornerRadius,\n    color_color,\n    background_backgroundColor,\n    datasetYX,\n    progressive,\n    xLinear,\n    yBand,\n    label_label,\n    tooltip_tooltip,\n    horizontalCrosshairRect,\n    discreteLegend,\n    barStyle_barStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotBar = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsCol,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initBar,\n        stackCornerRadius_stackCornerRadius,\n        color_color,\n        background_backgroundColor,\n        datasetYX,\n        progressive,\n        xLinear,\n        yBand,\n        label_label,\n        label_label,\n        tooltip_tooltip,\n        horizontalCrosshairRect,\n        barStyle_barStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst barSpecPipeline = [\n    pivotAdapter_pivotAdapter(bar, pivotBar)\n];\nconst registerBar = ()=>{\n    Builder._advancedPipelineMap.bar = barAdvancedPipeline;\n    Builder._specPipelineMap.bar = barSpecPipeline;\n};\nconst barParallelAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingYX,\n    sortYBandAxis,\n    sort_sortLegend,\n    barParallelConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initBarParallel = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding, datasetReshapeInfo } = advancedVSeed;\n    const { unfoldInfo } = datasetReshapeInfo[0];\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    result.type = 'bar';\n    result.direction = 'horizontal';\n    result.yField = [\n        encoding[0].y[0],\n        unfoldInfo.groupId\n    ];\n    result.xField = encoding[0].x[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst barParallel = [\n    initBarParallel,\n    stackCornerRadius_stackCornerRadius,\n    color_color,\n    background_backgroundColor,\n    datasetYX,\n    progressive,\n    xLinear,\n    yBand,\n    label_label,\n    tooltip_tooltip,\n    horizontalCrosshairRect,\n    discreteLegend,\n    barStyle_barStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotBarParallel = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsCol,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initBarParallel,\n        stackCornerRadius_stackCornerRadius,\n        color_color,\n        background_backgroundColor,\n        datasetYX,\n        xLinear,\n        yBand,\n        label_label,\n        tooltip_tooltip,\n        horizontalCrosshairRect,\n        barStyle_barStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst barParallelSpecPipeline = [\n    pivotAdapter_pivotAdapter(barParallel, pivotBarParallel)\n];\nconst registerBarParallel = ()=>{\n    Builder._advancedPipelineMap.barParallel = barParallelAdvancedPipeline;\n    Builder._specPipelineMap.barParallel = barParallelSpecPipeline;\n};\nconst barPercentAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingYX,\n    sortYBandAxis,\n    sort_sortLegend,\n    barPercentConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst barPercent = [\n    initBar,\n    stackCornerRadius_stackCornerRadius,\n    color_color,\n    background_backgroundColor,\n    percent,\n    datasetYX,\n    progressive,\n    xLinear,\n    yBand,\n    label_label,\n    tooltip_tooltip,\n    horizontalCrosshairRect,\n    discreteLegend,\n    barStyle_barStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotBarPercent = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsCol,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initBar,\n        stackCornerRadius_stackCornerRadius,\n        color_color,\n        background_backgroundColor,\n        percent,\n        datasetYX,\n        yBand,\n        xLinear,\n        label_label,\n        tooltip_tooltip,\n        horizontalCrosshairRect,\n        barStyle_barStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst barPercentSpecPipeline = [\n    pivotAdapter_pivotAdapter(barPercent, pivotBarPercent)\n];\nconst registerBarPercent = ()=>{\n    Builder._advancedPipelineMap.barPercent = barPercentAdvancedPipeline;\n    Builder._specPipelineMap.barPercent = barPercentSpecPipeline;\n};\nconst areaAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M0Name\n    ], [\n        pivotReshapeTo2D1M0Name\n    ]),\n    encodingXY,\n    sortXBandAxis,\n    sort_sortLegend,\n    areaConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initArea = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    result.type = 'area';\n    result.direction = 'vertical';\n    result.xField = encoding[0].x[0];\n    result.yField = encoding[0].y[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst areaStyle_areaStyle = (spec, context)=>{\n    const { advancedVSeed } = context;\n    const { markStyle, encoding, dataset } = advancedVSeed;\n    const { areaStyle } = markStyle;\n    if (!areaStyle) return spec;\n    const result = {\n        ...spec\n    };\n    const areaStyles = Array.isArray(areaStyle) ? areaStyle : [\n        areaStyle\n    ];\n    const group = encoding[0]?.group?.[0];\n    const lineGroups = groupBy(dataset, (d)=>d[group ?? '']);\n    const customMap = areaStyles.reduce((result, style, index)=>{\n        const { areaColor, areaColorOpacity } = style;\n        return {\n            ...result,\n            [`custom${index + 1}`]: {\n                level: index + 1,\n                filter: (datum)=>{\n                    const lineData = lineGroups[datum[group ?? '']];\n                    for (const d of lineData)if (selector_selector(d, style.selector)) return true;\n                    return false;\n                },\n                style: {\n                    fill: areaColor,\n                    fillOpacity: areaColorOpacity\n                }\n            }\n        };\n    }, {});\n    return {\n        ...result,\n        area: {\n            state: {\n                ...customMap\n            }\n        }\n    };\n};\nconst area_area = [\n    initArea,\n    stackInverse,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairLine,\n    discreteLegend,\n    pointStyle_pointStyle,\n    pointStateDimensionHover,\n    lineStyle_lineStyle,\n    areaStyle_areaStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotArea = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initArea,\n        color_color,\n        background_backgroundColor,\n        stackInverse,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        pointStyle_pointStyle,\n        pointStateDimensionHover,\n        lineStyle_lineStyle,\n        areaStyle_areaStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst areaSpecPipeline = [\n    pivotAdapter_pivotAdapter(area_area, pivotArea)\n];\nconst registerArea = ()=>{\n    Builder._advancedPipelineMap.area = areaAdvancedPipeline;\n    Builder._specPipelineMap.area = areaSpecPipeline;\n};\nconst areaPercentAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M0Name\n    ], [\n        pivotReshapeTo2D1M0Name\n    ]),\n    encodingXY,\n    sortXBandAxis,\n    sort_sortLegend,\n    areaPercentConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst areaPercent = [\n    initArea,\n    stackInverse,\n    color_color,\n    background_backgroundColor,\n    percent,\n    datasetXY,\n    progressive,\n    xBand,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairLine,\n    discreteLegend,\n    pointStyle_pointStyle,\n    lineStyle_lineStyle,\n    areaStyle_areaStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotAreaPercent = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initArea,\n        stackInverse,\n        color_color,\n        background_backgroundColor,\n        percent,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        pointStyle_pointStyle,\n        lineStyle_lineStyle,\n        areaStyle_areaStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst areaPercentSpecPipeline = [\n    pivotAdapter_pivotAdapter(areaPercent, pivotAreaPercent)\n];\nconst registerAreaPercent = ()=>{\n    Builder._advancedPipelineMap.areaPercent = areaPercentAdvancedPipeline;\n    Builder._specPipelineMap.areaPercent = areaPercentSpecPipeline;\n};\nconst autoMeasuresBy2M1Group = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { measures, dataset } = vseed;\n    if (!dataset) throw new Error('dataset is required');\n    if (0 === dataset.length) return result;\n    if (measures) {\n        result.measures = auto2M1Group(measures);\n        return result;\n    }\n    const top100dataset = dataset.slice(0, 100);\n    const sample = top100dataset.reduce((prev, cur)=>({\n            ...prev,\n            ...cur\n        }), {});\n    const newMeasures = Object.keys(sample).filter((key)=>top100dataset.some((item)=>'number' == typeof item[key]) && ![\n            '',\n            null,\n            void 0\n        ].includes(key)).map((measure)=>({\n            id: measure,\n            alias: measure\n        }));\n    result.measures = auto2M1Group(newMeasures);\n    return result;\n};\nconst auto2M1Group = (measures)=>{\n    const allMeasures = findAllMeasures(measures);\n    if (allMeasures.length <= 2) return allMeasures;\n    const groups = measures.filter((measure)=>'children' in measure);\n    const singleMeasures = measures.filter((measure)=>!('children' in measure));\n    for(let i = 0; i < singleMeasures.length; i += 2){\n        const group = autoMeasuresBy2M1Group_createEmptyMeasureGroup();\n        group.children = allMeasures.slice(i, i + 2);\n        groups.push(group);\n    }\n    return groups;\n};\nconst autoMeasuresBy2M1Group_createEmptyMeasureGroup = ()=>({\n        id: '',\n        alias: '',\n        children: []\n    });\nconst dataReshapeFor1D_emptyReshapeResult = {\n    dataset: [],\n    foldInfo: {\n        foldMap: {},\n        measureId: '',\n        measureName: '',\n        measureValue: ''\n    },\n    unfoldInfo: {\n        groupName: '',\n        groupId: '',\n        colorItems: [],\n        colorIdMap: {}\n    }\n};\nconst dataReshapeFor1D = (dataset, dimensions, measures, options)=>{\n    const { foldMeasureId = FoldMeasureId, foldMeasureName = FoldMeasureName, foldMeasureValue = FoldMeasureValue, unfoldDimensionGroup = UnfoldDimensionGroup, unfoldDimensionGroupId = UnfoldDimensionGroupId } = options || {};\n    if (0 === dimensions.length && 0 === measures.length) return dataReshapeFor1D_emptyReshapeResult;\n    if (0 === dimensions.length) {\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(dataset, [], [], 0, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo: {\n                foldMap: {},\n                measureId: foldMeasureId,\n                measureName: foldMeasureName,\n                measureValue: foldMeasureValue\n            },\n            unfoldInfo\n        };\n    }\n    {\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(dataset, [\n            ...dimensions\n        ], [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], 0, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo: {\n                foldMap: {},\n                measureId: foldMeasureId,\n                measureName: foldMeasureName,\n                measureValue: foldMeasureValue\n            },\n            unfoldInfo\n        };\n    }\n};\nconst reshapeTo1D = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures } = advancedVSeed;\n    if (!measures || !dimensions || !dataset) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    const { dataset: newDatasets, foldInfo, unfoldInfo } = dataReshapeFor1D(dataset, dimensions, measures);\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: [\n            {\n                id: '1D2M',\n                foldInfo,\n                unfoldInfo\n            }\n        ]\n    };\n};\nconst pivotReshapeTo1D = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { measures } = advancedVSeed;\n    const dimensions = advancedVSeed.dimensions;\n    if (!measures || !dimensions) return result;\n    const measureGroups = [];\n    if (measures) measures.forEach((measure)=>{\n        if (measure.children && measure.children.length > 0) measureGroups.push(measure);\n    });\n    const newDatasets = [];\n    const datasetReshapeInfo = [];\n    measureGroups.forEach((measureGroup)=>{\n        const measures = measureGroup.children;\n        if (!measures) return;\n        const commonDimensions = dimensions.filter((dim)=>'dimension' === dim.location);\n        const groupId = measureGroup.id;\n        const { dataset: newSubDataset, foldInfo, unfoldInfo } = dataReshapeFor1D(dataset, commonDimensions, measures, {\n            foldMeasureId: FoldMeasureId,\n            foldMeasureName: FoldMeasureName,\n            foldMeasureValue: FoldMeasureValue + groupId,\n            unfoldDimensionGroup: UnfoldDimensionGroup\n        });\n        const reshapeInfo = {\n            id: groupId,\n            foldInfo,\n            unfoldInfo\n        };\n        newDatasets.push(newSubDataset);\n        datasetReshapeInfo.push(reshapeInfo);\n    });\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: datasetReshapeInfo\n    };\n};\nconst encodingXYY = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, dimensions, measures } = advancedVSeed;\n    if (!datasetReshapeInfo || !dimensions || !measures) return result;\n    const encoding = datasetReshapeInfo.reduce((prev, cur, index)=>{\n        const measure = measures[index];\n        if ('children' in measure) {\n            const m1 = measure.children?.[0];\n            const m2 = measure.children?.[1] || m1;\n            const { foldInfo, unfoldInfo } = cur;\n            const x = [\n                unfoldInfo.groupId\n            ];\n            const y = [\n                m1?.id,\n                m2?.id\n            ];\n            const group = [\n                unfoldInfo.groupId\n            ];\n            const color = [\n                foldInfo.measureName\n            ];\n            return [\n                ...prev,\n                {\n                    x,\n                    y,\n                    group,\n                    color\n                }\n            ];\n        }\n        {\n            const m1 = measures[index];\n            const m2 = measures[index + 1] || m1;\n            const { foldInfo, unfoldInfo } = cur;\n            const x = [\n                unfoldInfo.groupId\n            ];\n            const y = [\n                m1.id,\n                m2.id\n            ];\n            const group = [\n                unfoldInfo.groupId\n            ];\n            const color = [\n                foldInfo.measureName\n            ];\n            return [\n                ...prev,\n                {\n                    x,\n                    y,\n                    group,\n                    color\n                }\n            ];\n        }\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst areaRangeAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasuresBy2M1Group,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo1D\n    ], [\n        pivotReshapeTo1D\n    ]),\n    encodingXYY,\n    sortXBandAxis,\n    areaConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst series = (...args)=>{\n    const result = {\n        type: 'common',\n        padding: 0,\n        region: [\n            {\n                clip: true\n            }\n        ]\n    };\n    return (_, context)=>{\n        result.series = args.map((pipeline)=>execPipeline(pipeline, context, {}));\n        return result;\n    };\n};\nconst initAreaRange = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    const { color } = advancedVSeed.config.areaRange;\n    result.type = 'rangeArea';\n    result.direction = 'vertical';\n    result.stack = false;\n    result.xField = encoding[0].x[0];\n    result.yField = [\n        encoding[0].y[0],\n        encoding[0].y[1]\n    ];\n    result.animation = true;\n    result.area = {\n        style: {\n            fill: color.colorScheme?.[0]\n        }\n    };\n    return result;\n};\nconst initAreaRangeLine1 = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    const { color } = advancedVSeed.config.areaRange;\n    result.type = 'line';\n    result.direction = 'vertical';\n    result.stack = false;\n    result.xField = encoding[0].x[0];\n    result.yField = [\n        encoding[0].y[0]\n    ];\n    result.animation = true;\n    result.line = {\n        style: {\n            stroke: color.colorScheme?.[0]\n        }\n    };\n    result.point = {\n        style: {\n            visible: false,\n            fill: color.colorScheme?.[0]\n        }\n    };\n    return result;\n};\nconst initAreaRangeLine2 = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    const { color } = advancedVSeed.config.areaRange;\n    result.type = 'line';\n    result.direction = 'vertical';\n    result.stack = false;\n    result.xField = encoding[0].x[0];\n    result.yField = [\n        encoding[0].y[1]\n    ];\n    result.animation = true;\n    result.line = {\n        style: {\n            stroke: color.colorScheme?.[0]\n        }\n    };\n    result.point = {\n        style: {\n            visible: false,\n            fill: color.colorScheme?.[0]\n        }\n    };\n    return result;\n};\nconst tooltipDisable = (spec)=>{\n    const result = {\n        ...spec\n    };\n    result.tooltip = {\n        visible: false\n    };\n    return result;\n};\nconst tooltipAreaRange = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { measures, datasetReshapeInfo, chartType, locale, encoding } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    const { tooltip = {\n        enable: true\n    } } = baseConfig;\n    const { enable } = tooltip;\n    const { groupName } = datasetReshapeInfo[0].unfoldInfo;\n    const y = encoding[0]?.y || [];\n    result.tooltip = {\n        visible: enable,\n        dimension: {\n            content: [\n                {\n                    visible: true,\n                    key: (datum)=>datum && datum[groupName] || '',\n                    value: (datum)=>{\n                        if (!datum) return '';\n                        const text = y.map((id)=>{\n                            const value = datum[id];\n                            const measure = findMeasureById(measures, id);\n                            if (!measure) return String(value);\n                            const { format = {}, autoFormat = true } = measure;\n                            if (!isEmpty(format)) {\n                                const formatter = createFormatter(format);\n                                return formatter(value);\n                            }\n                            if (autoFormat) return autoFormatter(value, locale);\n                            return String(value);\n                        });\n                        return text.join(' ~ ');\n                    },\n                    shapeType: 'rectRound'\n                },\n                ...y.map((id)=>{\n                    const measure = findMeasureById(measures, id);\n                    return {\n                        visible: true,\n                        key: measure?.alias || id,\n                        value: (datum)=>{\n                            if (!datum) return '';\n                            const value = datum[id];\n                            const measure = findMeasureById(measures, id);\n                            if (!measure) return String(value);\n                            const { format = {}, autoFormat = true } = measure;\n                            if (!isEmpty(format)) {\n                                const formatter = createFormatter(format);\n                                return formatter(value);\n                            }\n                            if (autoFormat) return autoFormatter(value, locale);\n                            return String(value);\n                        },\n                        shapeType: 'rectRound'\n                    };\n                })\n            ]\n        }\n    };\n    return result;\n};\nconst areaRange = [\n    series([\n        initAreaRange,\n        areaStyle_areaStyle\n    ], [\n        initAreaRangeLine1,\n        lineStyle_lineStyle,\n        pointStyle_pointStyle,\n        pointStateDimensionHover,\n        tooltipDisable\n    ], [\n        initAreaRangeLine2,\n        lineStyle_lineStyle,\n        pointStyle_pointStyle,\n        pointStateDimensionHover,\n        tooltipDisable\n    ]),\n    datasetXY,\n    progressive,\n    background_backgroundColor,\n    xBand,\n    yLinear,\n    label_label,\n    tooltipAreaRange,\n    verticalCrosshairLine,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotAreaRange = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        series([\n            initAreaRange,\n            areaStyle_areaStyle\n        ], [\n            initAreaRangeLine1,\n            lineStyle_lineStyle,\n            pointStyle_pointStyle,\n            pointStateDimensionHover,\n            tooltipDisable\n        ], [\n            initAreaRangeLine2,\n            lineStyle_lineStyle,\n            pointStyle_pointStyle,\n            pointStateDimensionHover,\n            tooltipDisable\n        ]),\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xBand,\n        yLinear,\n        label_label,\n        tooltipAreaRange,\n        verticalCrosshairLine,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions\n];\nconst areaRangeSpecPipeline = [\n    pivotAdapter_pivotAdapter(areaRange, pivotAreaRange)\n];\nconst registerAreaRange = ()=>{\n    Builder._advancedPipelineMap.areaRange = areaRangeAdvancedPipeline;\n    Builder._specPipelineMap.areaRange = areaRangeSpecPipeline;\n};\nconst dataReshapeFor1D2M_emptyReshapeResult = {\n    dataset: [],\n    foldInfo: {\n        foldMap: {},\n        measureId: '',\n        measureName: '',\n        measureValue: ''\n    },\n    unfoldInfo: {\n        groupName: '',\n        groupId: '',\n        colorItems: [],\n        colorIdMap: {}\n    }\n};\nconst dataReshapeFor1D2M = (dataset, dimensions, measures, options)=>{\n    const { foldMeasureId = FoldMeasureId, foldMeasureName = FoldMeasureName, foldMeasureValue = FoldMeasureValue, unfoldDimensionGroup = UnfoldDimensionGroup, unfoldDimensionGroupId = UnfoldDimensionGroupId } = options || {};\n    if (0 === dimensions.length && 0 === measures.length) return dataReshapeFor1D2M_emptyReshapeResult;\n    const { dataset: foldedDataset, foldInfo } = foldMeasures(dataset, measures.length > 1 ? measures.slice(1) : measures, foldMeasureId, foldMeasureName, foldMeasureValue);\n    if (0 === dimensions.length) {\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(foldedDataset, [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`,\n                location: 'dimension'\n            }\n        ], [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], 0, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo,\n            unfoldInfo\n        };\n    }\n    {\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(foldedDataset, [\n            ...dimensions\n        ], [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], 0, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo,\n            unfoldInfo\n        };\n    }\n};\nconst reshapeTo1D2M = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures } = advancedVSeed;\n    if (!measures || !dimensions || !dataset) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    const { dataset: newDatasets, foldInfo, unfoldInfo } = dataReshapeFor1D2M(dataset, dimensions, measures);\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: [\n            {\n                id: '1D2M',\n                foldInfo,\n                unfoldInfo\n            }\n        ]\n    };\n};\nconst pivotReshapeTo1D2M = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { measures } = advancedVSeed;\n    const dimensions = advancedVSeed.dimensions;\n    if (!measures || !dimensions) return result;\n    const measureGroups = [];\n    if (measures) measures.forEach((measure)=>{\n        if (measure.children && measure.children.length > 0) measureGroups.push(measure);\n    });\n    const newDatasets = [];\n    const datasetReshapeInfo = [];\n    measureGroups.forEach((measureGroup)=>{\n        const measures = measureGroup.children;\n        if (!measures) return;\n        const commonDimensions = dimensions.filter((dim)=>'dimension' === dim.location);\n        const groupId = measureGroup.id;\n        const { dataset: newSubDataset, foldInfo, unfoldInfo } = dataReshapeFor1D2M(dataset, commonDimensions, measures, {\n            foldMeasureId: FoldMeasureId,\n            foldMeasureName: FoldMeasureName,\n            foldMeasureValue: FoldMeasureValue + groupId,\n            unfoldDimensionGroup: UnfoldDimensionGroup\n        });\n        const reshapeInfo = {\n            id: groupId,\n            foldInfo,\n            unfoldInfo\n        };\n        newDatasets.push(newSubDataset);\n        datasetReshapeInfo.push(reshapeInfo);\n    });\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: datasetReshapeInfo\n    };\n};\nconst encodingYY = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, measures } = advancedVSeed;\n    if (!datasetReshapeInfo || !measures) return result;\n    const firstMeasure = findFirstMeasure(measures);\n    const encoding = datasetReshapeInfo.reduce((prev, cur)=>{\n        const { foldInfo, unfoldInfo } = cur;\n        const x = [\n            firstMeasure?.id\n        ];\n        const y = [\n            foldInfo.measureValue\n        ];\n        const group = [\n            unfoldInfo.groupId\n        ];\n        const color = [\n            unfoldInfo.groupId\n        ];\n        return [\n            ...prev,\n            {\n                x,\n                y,\n                group,\n                color\n            }\n        ];\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst scatterAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo1D2M\n    ], [\n        pivotReshapeTo1D2M\n    ]),\n    encodingYY,\n    scatterConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initScatter = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].group) return result;\n    result.type = 'scatter';\n    result.direction = 'vertical';\n    result.xField = encoding[0].x[0];\n    result.yField = encoding[0].y[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst horizontalCrosshairLine = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed, vseed } = context;\n    const { chartType } = vseed;\n    const config = advancedVSeed.config?.[chartType]?.crosshairLine;\n    if (!config) return result;\n    if (!result.crosshair) result.crosshair = {};\n    const { visible = true, lineColor, labelColor, labelVisible, labelBackgroundColor } = config;\n    const crosshair = result.crosshair;\n    crosshair.yField = {\n        visible,\n        line: {\n            type: 'line',\n            style: {\n                lineWidth: 1,\n                opacity: 1,\n                stroke: lineColor,\n                lineDash: [\n                    4,\n                    2\n                ]\n            }\n        },\n        label: {\n            visible: labelVisible,\n            labelBackground: {\n                visible: labelVisible,\n                style: {\n                    fill: labelBackgroundColor\n                }\n            },\n            style: {\n                fill: labelColor\n            }\n        }\n    };\n    return result;\n};\nconst scatter = [\n    initScatter,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    xLinear,\n    yLinear,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairLine,\n    horizontalCrosshairLine,\n    discreteLegend,\n    pointStyle_pointStyle,\n    pointStateHover,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotScatter = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initScatter,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        xLinear,\n        yLinear,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        horizontalCrosshairLine,\n        pointStyle_pointStyle,\n        pointStateHover,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst scatterSpecPipeline = [\n    pivotAdapter_pivotAdapter(scatter, pivotScatter)\n];\nconst registerScatter = ()=>{\n    Builder._advancedPipelineMap.scatter = scatterAdvancedPipeline;\n    Builder._specPipelineMap.scatter = scatterSpecPipeline;\n};\nconst dataReshapeFor1D1M_emptyReshapeResult = {\n    dataset: [],\n    foldInfo: {\n        foldMap: {},\n        measureId: '',\n        measureName: '',\n        measureValue: ''\n    },\n    unfoldInfo: {\n        groupName: '',\n        groupId: '',\n        colorItems: [],\n        colorIdMap: {}\n    }\n};\nconst dataReshapeFor1D1M = (dataset, dimensions, measures, options)=>{\n    const { foldMeasureId = FoldMeasureId, foldMeasureName = FoldMeasureName, foldMeasureValue = FoldMeasureValue, unfoldDimensionGroup = UnfoldDimensionGroup, unfoldDimensionGroupId = UnfoldDimensionGroupId } = options || {};\n    if (0 === dimensions.length && 0 === measures.length) return dataReshapeFor1D1M_emptyReshapeResult;\n    const { dataset: foldedDataset, foldInfo } = foldMeasures(dataset, measures, foldMeasureId, foldMeasureName, foldMeasureValue);\n    if (0 === dimensions.length) {\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(foldedDataset, [\n            {\n                id: foldMeasureName,\n                alias: i18n`指标名称`,\n                location: 'dimension'\n            }\n        ], [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], 0, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo,\n            unfoldInfo\n        };\n    }\n    {\n        const dims = 1 === measures.length ? [\n            ...dimensions\n        ] : [\n            ...dimensions,\n            {\n                id: foldMeasureName,\n                alias: i18n`指标名称`,\n                location: 'dimension'\n            }\n        ];\n        const { dataset: finalDataset, unfoldInfo } = unfoldDimensions(foldedDataset, dims, [\n            {\n                id: foldMeasureValue,\n                alias: i18n`指标值`\n            }\n        ], 0, unfoldDimensionGroup, unfoldDimensionGroupId, foldMeasureId);\n        return {\n            dataset: finalDataset,\n            foldInfo,\n            unfoldInfo\n        };\n    }\n};\nconst reshapeTo1D1M = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { dimensions, measures } = advancedVSeed;\n    if (!measures || !dimensions || !dataset) return result;\n    if (0 === measures.length) throw new Error('measures can not be empty');\n    const { dataset: newDatasets, foldInfo, unfoldInfo } = dataReshapeFor1D1M(dataset, dimensions, measures);\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: [\n            {\n                id: '1D1M',\n                foldInfo,\n                unfoldInfo\n            }\n        ]\n    };\n};\nconst pivotReshapeTo1D1M = (advancedVSeed, context)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { vseed } = context;\n    const { dataset } = vseed;\n    const { measures } = advancedVSeed;\n    const dimensions = advancedVSeed.dimensions;\n    if (!measures || !dimensions) return result;\n    const measureGroups = [];\n    if (measures) measures.forEach((measure)=>{\n        if (measure.children && measure.children.length > 0) measureGroups.push(measure);\n    });\n    const newDatasets = [];\n    const datasetReshapeInfo = [];\n    measureGroups.forEach((measureGroup)=>{\n        const measures = measureGroup.children;\n        if (!measures) return;\n        const commonDimensions = dimensions.filter((dim)=>'dimension' === dim.location);\n        const groupId = measureGroup.id;\n        const { dataset: newSubDataset, foldInfo, unfoldInfo } = dataReshapeFor1D1M(dataset, commonDimensions, measures, {\n            foldMeasureId: FoldMeasureId,\n            foldMeasureName: FoldMeasureName,\n            foldMeasureValue: FoldMeasureValue + groupId,\n            unfoldDimensionGroup: UnfoldDimensionGroup\n        });\n        const reshapeInfo = {\n            id: groupId,\n            foldInfo,\n            unfoldInfo\n        };\n        newDatasets.push(newSubDataset);\n        datasetReshapeInfo.push(reshapeInfo);\n    });\n    return {\n        ...result,\n        dataset: newDatasets,\n        datasetReshapeInfo: datasetReshapeInfo\n    };\n};\nconst encodingPie = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, dimensions } = advancedVSeed;\n    if (!datasetReshapeInfo || !dimensions) return result;\n    const encoding = datasetReshapeInfo.reduce((prev, cur)=>{\n        const { foldInfo, unfoldInfo } = cur;\n        const radius = [\n            foldInfo.measureValue\n        ];\n        const angle = [\n            unfoldInfo.groupId\n        ];\n        const group = [\n            unfoldInfo.groupId\n        ];\n        const color = [\n            unfoldInfo.groupId\n        ];\n        return [\n            ...prev,\n            {\n                angle,\n                radius,\n                group,\n                color\n            }\n        ];\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst pieAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo1D1M\n    ], [\n        pivotReshapeTo1D1M\n    ]),\n    encodingPie,\n    pieConfig,\n    theme_theme,\n    annotation_annotation\n];\nconst initPie = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding, dataset } = advancedVSeed;\n    if (!encoding[0].angle || !encoding[0].radius || !encoding[0].group) return result;\n    const showStroke = dataset.length <= 30;\n    result.type = 'pie';\n    result.outerRadius = 0.8;\n    result.innerRadius = 0;\n    result.valueField = encoding[0].radius[0];\n    result.categoryField = encoding[0].angle[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.pie = {\n        style: {\n            stroke: '#ffffff',\n            lineWidth: showStroke ? 1 : 0,\n            centerOffset: 0\n        },\n        state: {\n            hover: {\n                outerRadius: 1.1 * result.outerRadius\n            }\n        }\n    };\n    result.animation = true;\n    return result;\n};\nconst pie = [\n    initPie,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    label_label,\n    tooltip_tooltip,\n    discreteLegend,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotPie = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initPie,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        label_label,\n        tooltip_tooltip,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst pieSpecPipeline = [\n    pivotAdapter_pivotAdapter(pie, pivotPie)\n];\nconst registerPie = ()=>{\n    Builder._advancedPipelineMap.pie = pieAdvancedPipeline;\n    Builder._specPipelineMap.pie = pieSpecPipeline;\n};\nconst donutAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo1D1M\n    ], [\n        pivotReshapeTo1D1M\n    ]),\n    encodingPie,\n    donutConfig,\n    theme_theme,\n    annotation_annotation\n];\nconst initDonut = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding, dataset } = advancedVSeed;\n    if (!encoding[0].angle || !encoding[0].radius || !encoding[0].group) return result;\n    const showStroke = dataset.length <= 30;\n    result.type = 'pie';\n    result.outerRadius = 0.8;\n    result.innerRadius = 0.8 * result.outerRadius;\n    result.valueField = encoding[0].radius[0];\n    result.categoryField = encoding[0].angle[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.pie = {\n        style: {\n            stroke: '#ffffff',\n            lineWidth: showStroke ? 1 : 0\n        },\n        state: {\n            hover: {\n                outerRadius: 1.1 * result.outerRadius\n            }\n        }\n    };\n    result.animation = true;\n    return result;\n};\nconst donut = [\n    initDonut,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    label_label,\n    tooltip_tooltip,\n    discreteLegend,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotDonut = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initDonut,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        label_label,\n        tooltip_tooltip,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst donutSpecPipeline = [\n    pivotAdapter_pivotAdapter(donut, pivotDonut)\n];\nconst registerDonut = ()=>{\n    Builder._advancedPipelineMap.donut = donutAdvancedPipeline;\n    Builder._specPipelineMap.donut = donutSpecPipeline;\n};\nconst encodingRose = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, dimensions, measures } = advancedVSeed;\n    if (!datasetReshapeInfo || !dimensions || !measures) return result;\n    const angleDimension = dimensions.find((item)=>'rowDimension' !== item.location && 'columnDimension' !== item.location);\n    const is1D1M = 1 === dimensions.length && 1 === measures.length;\n    const isZeroDimension = 0 === dimensions.length;\n    const encoding = datasetReshapeInfo.reduce((prev, cur)=>{\n        const { foldInfo, unfoldInfo } = cur;\n        const radius = [\n            foldInfo.measureValue\n        ];\n        const angle = [\n            isZeroDimension ? foldInfo.measureName : angleDimension?.id\n        ];\n        const group = [\n            is1D1M ? angleDimension?.id : unfoldInfo.groupId\n        ];\n        const color = [\n            is1D1M ? angleDimension?.id : unfoldInfo.groupId\n        ];\n        return [\n            ...prev,\n            {\n                angle,\n                radius,\n                group,\n                color\n            }\n        ];\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst roseAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingRose,\n    roseConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initRose = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding, dataset, datasetReshapeInfo } = advancedVSeed;\n    const { foldInfo } = datasetReshapeInfo[0];\n    if (!encoding[0].radius || !encoding[0].angle || !encoding[0].group) return result;\n    result.type = 'rose';\n    result.categoryField = encoding[0].angle[0];\n    result.valueField = encoding[0].radius[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.outerRadius = 0.9;\n    result.innerRadius = 0;\n    const hasNegativeValue = dataset.flat().find((d)=>d[foldInfo.measureValue] < 0);\n    if (hasNegativeValue) result.innerRadius = 0.05;\n    result.rose = {\n        style: {\n            stroke: '#ffffff',\n            lineWidth: 1\n        },\n        state: {\n            hover: {\n                lineWidth: 1,\n                fillOpacity: 0.6\n            }\n        }\n    };\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst radiusAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dimensions, measures } = advancedVSeed;\n    if (!dimensions || !measures) return result;\n    const is0D = 0 === dimensions.length;\n    const is1M1D = 1 === dimensions.length && 1 === measures.length;\n    const showAxis = !(is0D || is1M1D);\n    if (!result.axes) result.axes = [];\n    result.axes.push({\n        orient: 'radius',\n        visible: showAxis,\n        zero: true,\n        nice: !!showAxis,\n        grid: {\n            visible: showAxis\n        },\n        tick: {\n            visible: showAxis\n        },\n        label: {\n            visible: showAxis\n        },\n        domainLine: {\n            visible: showAxis\n        }\n    });\n    return result;\n};\nconst angleAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dimensions, measures } = advancedVSeed;\n    if (!dimensions || !measures) return result;\n    const is0D = 0 === dimensions.length;\n    const is1M1D = 1 === dimensions.length && 1 === measures.length;\n    const showAxis = !(is0D || is1M1D);\n    if (!result.axes) result.axes = [];\n    result.axes.push({\n        orient: 'angle',\n        visible: showAxis,\n        zero: true,\n        nice: !!showAxis,\n        paddingInner: showAxis ? [\n            0.15,\n            0.1\n        ] : [\n            0,\n            0\n        ],\n        paddingOuter: showAxis ? [\n            0.075,\n            0.1\n        ] : [\n            0,\n            0\n        ],\n        grid: {\n            visible: showAxis\n        },\n        domainLine: {\n            visible: showAxis\n        },\n        tick: {\n            visible: showAxis\n        }\n    });\n    return result;\n};\nconst rose = [\n    initRose,\n    stackCornerRadius_stackCornerRadius,\n    stackInverse,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    radiusAxis,\n    angleAxis,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairRect,\n    discreteLegend\n];\nconst pivotRose = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initRose,\n        stackCornerRadius_stackCornerRadius,\n        stackInverse,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        radiusAxis,\n        angleAxis,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairRect\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst roseSpecPipeline = [\n    pivotAdapter_pivotAdapter(rose, pivotRose)\n];\nconst registerRose = ()=>{\n    Builder._advancedPipelineMap.rose = roseAdvancedPipeline;\n    Builder._specPipelineMap.rose = roseSpecPipeline;\n};\nconst roseParallelAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingRose,\n    roseParallelConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initRoseParallel = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding, datasetReshapeInfo, dataset } = advancedVSeed;\n    const { unfoldInfo, foldInfo } = datasetReshapeInfo[0];\n    if (!encoding[0].radius || !encoding[0].angle || !encoding[0].group) return result;\n    result.type = 'rose';\n    result.categoryField = [\n        encoding[0].angle[0],\n        unfoldInfo.groupId\n    ];\n    result.valueField = encoding[0].radius[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.outerRadius = 0.9;\n    result.innerRadius = 0;\n    const hasNegativeValue = dataset.flat().find((d)=>d[foldInfo.measureValue] < 0);\n    if (hasNegativeValue) result.innerRadius = 0.05;\n    result.rose = {\n        style: {\n            stroke: '#ffffff',\n            lineWidth: 1\n        },\n        state: {\n            hover: {\n                lineWidth: 1,\n                fillOpacity: 0.6\n            }\n        }\n    };\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst roseParallel = [\n    initRoseParallel,\n    stackCornerRadius_stackCornerRadius,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    radiusAxis,\n    angleAxis,\n    label_label,\n    tooltip_tooltip,\n    discreteLegend,\n    verticalCrosshairRect,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationAreaBand\n];\nconst pivotRoseParallel = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initRoseParallel,\n        stackCornerRadius_stackCornerRadius,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        radiusAxis,\n        angleAxis,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairRect,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationAreaBand\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst roseParallelSpecPipeline = [\n    pivotAdapter_pivotAdapter(roseParallel, pivotRoseParallel)\n];\nconst registerRoseParallel = ()=>{\n    Builder._advancedPipelineMap.roseParallel = roseParallelAdvancedPipeline;\n    Builder._specPipelineMap.roseParallel = roseParallelSpecPipeline;\n};\nconst encodingAR = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, dimensions, measures } = advancedVSeed;\n    if (!datasetReshapeInfo || !dimensions || !measures) return result;\n    const angleDimension = dimensions.find((item)=>'rowDimension' !== item.location && 'columnDimension' !== item.location);\n    const isZeroDimension = 0 === dimensions.length;\n    const encoding = datasetReshapeInfo.reduce((prev, cur)=>{\n        const { foldInfo, unfoldInfo } = cur;\n        const angle = [\n            isZeroDimension ? foldInfo.measureName : angleDimension?.id\n        ];\n        const radius = [\n            foldInfo.measureValue\n        ];\n        const group = [\n            unfoldInfo.groupId\n        ];\n        const color = [\n            unfoldInfo.groupId\n        ];\n        return [\n            ...prev,\n            {\n                angle,\n                radius,\n                group,\n                color\n            }\n        ];\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst radarAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M0Name\n    ], [\n        pivotReshapeTo2D1M0Name\n    ]),\n    encodingAR,\n    sort_sortLegend,\n    radarConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst initRadar = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].angle || !encoding[0].radius || !encoding[0].group) return result;\n    result.type = 'radar';\n    result.angleField = encoding[0].angle[0];\n    result.radiusField = encoding[0].radius[0];\n    result.seriesField = encoding[0].group[0];\n    result.padding = 0;\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst radarAngleAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dimensions, measures } = advancedVSeed;\n    if (!dimensions || !measures) return result;\n    if (!result.axes) result.axes = [];\n    result.axes.push({\n        orient: 'angle',\n        visible: true,\n        zero: true,\n        nice: true,\n        grid: {\n            visible: true\n        },\n        domainLine: {\n            visible: true\n        },\n        tick: {\n            visible: true\n        }\n    });\n    return result;\n};\nconst radarRadiusAxis = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { dimensions, measures } = advancedVSeed;\n    if (!dimensions || !measures) return result;\n    if (!result.axes) result.axes = [];\n    result.axes.push({\n        orient: 'radius',\n        visible: true,\n        zero: true,\n        nice: true,\n        grid: {\n            visible: true\n        },\n        tick: {\n            visible: true\n        },\n        label: {\n            visible: true\n        },\n        domainLine: {\n            visible: true\n        }\n    });\n    return result;\n};\nconst radar = [\n    initRadar,\n    color_color,\n    background_backgroundColor,\n    datasetXY,\n    progressive,\n    radarAngleAxis,\n    radarRadiusAxis,\n    label_label,\n    tooltip_tooltip,\n    verticalCrosshairLine,\n    discreteLegend,\n    pointStyle_pointStyle,\n    pointStateDimensionHover,\n    lineStyle_lineStyle,\n    areaStyle_areaStyle\n];\nconst pivotRadar = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initRadar,\n        color_color,\n        background_backgroundColor,\n        datasetXY,\n        progressive,\n        radarAngleAxis,\n        radarRadiusAxis,\n        label_label,\n        tooltip_tooltip,\n        verticalCrosshairLine,\n        pointStyle_pointStyle,\n        pointStateDimensionHover,\n        lineStyle_lineStyle,\n        areaStyle_areaStyle\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions,\n    pivotDiscreteLegend\n];\nconst radarSpecPipeline = [\n    pivotAdapter_pivotAdapter(radar, pivotRadar)\n];\nconst registerRadar = ()=>{\n    Builder._advancedPipelineMap.radar = radarAdvancedPipeline;\n    Builder._specPipelineMap.radar = radarSpecPipeline;\n};\nconst encodingFunnel = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, dimensions } = advancedVSeed;\n    if (!datasetReshapeInfo || !dimensions) return result;\n    const encoding = datasetReshapeInfo.reduce((prev, cur)=>{\n        const { foldInfo, unfoldInfo } = cur;\n        const size = [\n            foldInfo.measureValue\n        ];\n        const group = [\n            unfoldInfo.groupId\n        ];\n        const color = [\n            foldInfo.measureValue\n        ];\n        return [\n            ...prev,\n            {\n                size,\n                group,\n                color\n            }\n        ];\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst funnelAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo1D1M\n    ], [\n        pivotReshapeTo1D1M\n    ]),\n    encodingFunnel,\n    funnelConfig,\n    theme_theme,\n    annotation_annotation\n];\nconst initFunnel = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].size || !encoding[0].group || !encoding[0].color) return result;\n    result.type = 'funnel';\n    result.valueField = encoding[0].size[0];\n    result.categoryField = encoding[0].group[0];\n    result.padding = 0;\n    result.isTransform = true;\n    result.shape = 'rect';\n    result.maxSize = '75%';\n    result.minSize = '10%';\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.funnel = {\n        style: {\n            cornerRadius: 4,\n            fill: {\n                field: encoding[0].color[0],\n                scale: 'color'\n            }\n        },\n        state: {\n            hover: {\n                fillOpacity: 0.6\n            }\n        }\n    };\n    result.transformLabel = {\n        visible: true\n    };\n    result.animation = true;\n    return result;\n};\nconst linearColor = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { datasetReshapeInfo, chartType, encoding } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    if (!baseConfig || !baseConfig.color) return result;\n    const { color } = baseConfig;\n    const { colorScheme } = color;\n    result.color = {\n        type: 'linear',\n        domain: [\n            {\n                dataId: datasetReshapeInfo[0].id,\n                fields: encoding?.[0]?.color\n            }\n        ],\n        range: colorScheme\n    };\n    return result;\n};\nconst colorLegend = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { chartType } = advancedVSeed;\n    const baseConfig = advancedVSeed.config[chartType];\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].color) return result;\n    if (!baseConfig || !baseConfig.legend) return result;\n    const { legend } = baseConfig;\n    const { enable, position = 'bottom' } = legend || {};\n    const orient = [\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ].includes(position) ? 'bottom' : [\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr'\n    ].includes(position) ? 'top' : [\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb'\n    ].includes(position) ? 'left' : 'right';\n    const legendPosition = [\n        'topLeft',\n        'bottomLeft',\n        'leftTop',\n        'rightTop',\n        'lt',\n        'rt',\n        'tl',\n        'bl'\n    ].includes(position) ? 'start' : [\n        'topRight',\n        'bottomRight',\n        'leftBottom',\n        'rightBottom',\n        'lb',\n        'rb',\n        'rt',\n        'br'\n    ].includes(position) ? 'end' : 'middle';\n    result.legends = {\n        type: 'color',\n        visible: enable,\n        orient,\n        position: legendPosition,\n        field: encoding[0].color[0],\n        inverse: !![\n            'left',\n            'right'\n        ].includes(orient)\n    };\n    return result;\n};\nconst funnel = [\n    initFunnel,\n    linearColor,\n    background_backgroundColor,\n    datasetXY,\n    label_label,\n    tooltip_tooltip,\n    colorLegend,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotFunnel = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initFunnel,\n        linearColor,\n        background_backgroundColor,\n        datasetXY,\n        label_label,\n        tooltip_tooltip,\n        colorLegend,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions\n];\nconst funnelSpecPipeline = [\n    pivotAdapter_pivotAdapter(funnel, pivotFunnel)\n];\nconst registerFunnel = ()=>{\n    Builder._advancedPipelineMap.funnel = funnelAdvancedPipeline;\n    Builder._specPipelineMap.funnel = funnelSpecPipeline;\n};\nconst encodingMatrix = (advancedVSeed)=>{\n    const result = {\n        ...advancedVSeed\n    };\n    const { datasetReshapeInfo, dimensions } = advancedVSeed;\n    if (!datasetReshapeInfo || !dimensions) return result;\n    const xDimension = dimensions.find((item)=>'rowDimension' !== item.location && 'columnDimension' !== item.location);\n    const isZeroDimension = 0 === dimensions.length;\n    const encoding = datasetReshapeInfo.reduce((prev, cur)=>{\n        const { foldInfo, unfoldInfo } = cur;\n        const x = [\n            isZeroDimension ? foldInfo.measureName : xDimension?.id\n        ];\n        const y = [\n            unfoldInfo.groupName\n        ];\n        const color = [\n            foldInfo.measureValue\n        ];\n        return [\n            ...prev,\n            {\n                x,\n                y,\n                color\n            }\n        ];\n    }, []);\n    return {\n        ...result,\n        encoding\n    };\n};\nconst heatmapAdvancedPipeline = [\n    initAdvancedVSeed_initAdvancedVSeed,\n    autoMeasures_autoMeasures,\n    autoDimensions_autoDimensions,\n    pivotAdapter([\n        reshapeTo2D1M\n    ], [\n        pivotReshapeTo2D1M\n    ]),\n    encodingMatrix,\n    sortXBandAxis,\n    heatmapConfig,\n    theme_theme,\n    markStyle_markStyle,\n    annotation_annotation\n];\nconst labelColorInversion = (spec)=>{\n    const result = {\n        ...spec\n    };\n    if (result.label) result.label.smartInvert = true;\n    else result.label = {\n        smartInvert: true\n    };\n    return result;\n};\nconst initHeatmap = (spec, context)=>{\n    const result = {\n        ...spec\n    };\n    const { advancedVSeed } = context;\n    const { encoding } = advancedVSeed;\n    if (!encoding[0].y || !encoding[0].x || !encoding[0].color) return result;\n    result.type = 'heatmap';\n    result.direction = 'vertical';\n    result.xField = encoding[0].x[0];\n    result.yField = encoding[0].y[0];\n    result.valueField = encoding[0].color[0];\n    result.padding = 0;\n    result.cell = {\n        style: {\n            shape: 'rect',\n            stroke: '#ffffff',\n            lineWidth: 1,\n            fill: {\n                field: encoding[0].color[0],\n                scale: 'color'\n            }\n        }\n    };\n    result.axes = [\n        {\n            type: 'band',\n            orient: 'left',\n            bandPadding: 0\n        },\n        {\n            type: 'band',\n            orient: 'bottom',\n            bandPadding: 0\n        }\n    ];\n    result.region = [\n        {\n            clip: true\n        }\n    ];\n    result.animation = true;\n    return result;\n};\nconst heatmap = [\n    initHeatmap,\n    linearColor,\n    background_backgroundColor,\n    datasetXY,\n    label_label,\n    labelColorInversion,\n    colorLegend,\n    tooltip_tooltip,\n    pointStyle_pointStyle,\n    pointStateDimensionHover,\n    lineStyle_lineStyle,\n    annotationPoint_annotationPoint,\n    annotationVerticalLine_annotationVerticalLine,\n    annotationHorizontalLine_annotationHorizontalLine,\n    annotationArea_annotationArea\n];\nconst pivotHeatmap = [\n    initPivot,\n    pivotGridStyle,\n    pivotIndicators_pivotIndicatorsAsRow,\n    datasetPivot,\n    pivotIndicators_pivotIndicators([\n        initHeatmap,\n        linearColor,\n        background_backgroundColor,\n        datasetXY,\n        label_label,\n        labelColorInversion,\n        colorLegend,\n        tooltip_tooltip,\n        pointStyle_pointStyle,\n        pointStateDimensionHover,\n        lineStyle_lineStyle,\n        annotationPoint_annotationPoint,\n        annotationVerticalLine_annotationVerticalLine,\n        annotationHorizontalLine_annotationHorizontalLine,\n        annotationArea_annotationArea\n    ]),\n    pivotRowDimensions,\n    pivotColumnDimensions\n];\nconst heatmapSpecPipeline = [\n    pivotAdapter_pivotAdapter(heatmap, pivotHeatmap)\n];\nconst registerHeatmap = ()=>{\n    Builder._advancedPipelineMap.heatmap = heatmapAdvancedPipeline;\n    Builder._specPipelineMap.heatmap = heatmapSpecPipeline;\n};\nconst lightTheme = ()=>{\n    const linearAxis = {\n        nice: true,\n        zero: true,\n        inverse: false,\n        label: {\n            visible: true,\n            labelAngle: 0,\n            labelColor: '#797B85',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        },\n        title: {\n            visible: false,\n            titleText: '',\n            titleColor: '#646A73',\n            titleFontSize: 12,\n            titleFontWeight: 400\n        },\n        grid: {\n            visible: true,\n            gridColor: '#36415926',\n            gridWidth: 0.5\n        },\n        tick: {\n            visible: false,\n            tickInside: false,\n            tickSize: 4,\n            tickColor: '#3641594d'\n        },\n        line: {\n            visible: false,\n            lineColor: '#3641594d',\n            lineWidth: 1\n        }\n    };\n    const bandAxis = {\n        labelAutoHide: true,\n        labelAutoHideGap: 4,\n        labelAutoLimit: true,\n        labelAutoLimitLength: 80,\n        labelAutoRotate: false,\n        labelAutoRotateAngleRange: [\n            0,\n            -45,\n            -90\n        ],\n        label: {\n            visible: true,\n            labelAngle: 0,\n            labelColor: '#797B85',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        },\n        title: {\n            visible: false,\n            titleText: '',\n            titleColor: '#646A73',\n            titleFontSize: 12,\n            titleFontWeight: 400\n        },\n        grid: {\n            visible: false,\n            gridColor: '#36415926',\n            gridWidth: 0.5\n        },\n        tick: {\n            visible: false,\n            tickInside: false,\n            tickSize: 4,\n            tickColor: '#3641594d'\n        },\n        line: {\n            visible: true,\n            lineColor: '#3641594d',\n            lineWidth: 1\n        }\n    };\n    const barBandAxis = {\n        ...bandAxis,\n        labelAutoHide: false,\n        labelAutoHideGap: 1,\n        labelAutoLimit: false,\n        labelAutoLimitLength: void 0,\n        labelAutoRotate: false,\n        labelAutoRotateAngleRange: [\n            0,\n            -45,\n            -90\n        ]\n    };\n    const crosshairLine = {\n        visible: true,\n        labelVisible: true,\n        lineColor: '#3641594d',\n        labelColor: '#ffffff',\n        labelBackgroundColor: '#364159'\n    };\n    const crosshairRect = {\n        visible: true,\n        labelVisible: true,\n        rectColor: '#3641594d',\n        labelColor: '#ffffff',\n        labelBackgroundColor: '#364159'\n    };\n    const baseConfig = {\n        backgroundColor: 'transparent',\n        color: {\n            colorScheme: [\n                '#8D72F6',\n                '#5766EC',\n                '#66A3FE',\n                '#51D5E6',\n                '#4EC0B3',\n                '#F9DF90',\n                '#F9AD71',\n                '#ED8888',\n                '#E9A0C3',\n                '#D77DD3'\n            ]\n        },\n        label: {\n            enable: true\n        },\n        tooltip: {\n            enable: true\n        },\n        legend: {\n            enable: true,\n            border: true,\n            maxSize: 1,\n            shapeType: 'rectRound',\n            position: 'rt',\n            labelFontColor: '#646A73',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        }\n    };\n    const tableConfig = {\n        borderColor: '#e3e5eb',\n        bodyFontSize: 12,\n        bodyFontColor: '#141414',\n        bodyBackgroundColor: 'transparent',\n        headerFontSize: 12,\n        headerFontColor: '#21252c',\n        headerBackgroundColor: '#f6f7f9',\n        hoverBodyBackgroundColor: '#bedaff',\n        hoverBodyInlineBackgroundColor: '#bedaff33',\n        hoverHeaderBackgroundColor: '#D9DDE4',\n        hoverHeaderInlineBackgroundColor: '#D9DDE455',\n        selectedBorderColor: '#4080ff',\n        selectedBackgroundColor: '#bedaff33'\n    };\n    return {\n        config: {\n            table: tableConfig,\n            pivotTable: tableConfig,\n            line: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine\n            },\n            column: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            columnParallel: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            columnPercent: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            bar: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            barParallel: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            barPercent: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            area: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine\n            },\n            areaPercent: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine\n            },\n            areaRange: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine\n            },\n            scatter: {\n                ...baseConfig,\n                xAxis: {\n                    ...linearAxis,\n                    line: {\n                        ...linearAxis.line,\n                        visible: true\n                    }\n                },\n                yAxis: {\n                    ...linearAxis,\n                    line: {\n                        ...linearAxis.line,\n                        visible: true\n                    }\n                },\n                crosshairLine\n            },\n            pie: {\n                ...baseConfig\n            },\n            donut: {\n                ...baseConfig\n            },\n            radar: {\n                ...baseConfig\n            },\n            rose: {\n                ...baseConfig\n            },\n            roseParallel: {\n                ...baseConfig\n            },\n            funnel: {\n                ...baseConfig,\n                color: {\n                    colorScheme: [\n                        '#5766EC',\n                        '#6372F0',\n                        '#7080F4',\n                        '#7C8CFA',\n                        '#8998FF',\n                        '#95A3FF',\n                        '#A0AEFF',\n                        '#ACB9FF',\n                        '#B7C4FF',\n                        '#C2CEFF'\n                    ].reverse()\n                }\n            },\n            heatmap: {\n                ...baseConfig,\n                color: {\n                    colorScheme: [\n                        '#5766EC',\n                        '#6372F0',\n                        '#7080F4',\n                        '#7C8CFA',\n                        '#8998FF',\n                        '#95A3FF',\n                        '#A0AEFF',\n                        '#ACB9FF',\n                        '#B7C4FF',\n                        '#C2CEFF'\n                    ].reverse()\n                }\n            }\n        }\n    };\n};\nconst darkTheme = ()=>{\n    const linearAxis = {\n        nice: true,\n        zero: true,\n        label: {\n            visible: true,\n            labelAngle: 0,\n            labelColor: '#E2E3E6',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        },\n        title: {\n            visible: false,\n            titleText: '',\n            titleColor: '#FDFDFD',\n            titleFontSize: 12,\n            titleFontWeight: 400\n        },\n        grid: {\n            visible: true,\n            gridColor: '#404349',\n            gridWidth: 0.5\n        },\n        tick: {\n            visible: false,\n            tickInside: false,\n            tickSize: 4,\n            tickColor: '#4B4F54'\n        },\n        line: {\n            visible: false,\n            lineColor: '#4B4F54',\n            lineWidth: 1\n        }\n    };\n    const bandAxis = {\n        labelAutoHide: true,\n        labelAutoHideGap: 4,\n        labelAutoLimit: true,\n        labelAutoLimitLength: 80,\n        labelAutoRotate: false,\n        labelAutoRotateAngleRange: [\n            0,\n            -45,\n            -90\n        ],\n        label: {\n            visible: true,\n            labelAngle: 0,\n            labelColor: '#E2E3E6',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        },\n        title: {\n            visible: false,\n            titleText: '',\n            titleColor: '#FDFDFD',\n            titleFontSize: 12,\n            titleFontWeight: 400\n        },\n        grid: {\n            visible: false,\n            gridColor: '#404349',\n            gridWidth: 0.5\n        },\n        tick: {\n            visible: false,\n            tickInside: false,\n            tickSize: 4,\n            tickColor: '#4B4F54'\n        },\n        line: {\n            visible: true,\n            lineColor: '#4B4F54',\n            lineWidth: 1\n        }\n    };\n    const barBandAxis = {\n        ...bandAxis,\n        labelAutoHide: false,\n        labelAutoHideGap: 1,\n        labelAutoLimit: false,\n        labelAutoLimitLength: void 0,\n        labelAutoRotate: false,\n        labelAutoRotateAngleRange: [\n            0,\n            -45,\n            -90\n        ]\n    };\n    const crosshairLine = {\n        visible: true,\n        labelVisible: true,\n        lineColor: '#E2E3E6',\n        labelColor: '#4B4F54',\n        labelBackgroundColor: '#ffffff'\n    };\n    const crosshairRect = {\n        visible: true,\n        labelVisible: true,\n        lineColor: '#E2E3E6',\n        labelColor: '#4B4F54',\n        labelBackgroundColor: '#ffffff'\n    };\n    const baseConfig = {\n        backgroundColor: 'transparent',\n        color: {\n            colorScheme: [\n                '#2E62F1',\n                '#4DC36A',\n                '#FF8406',\n                '#FFCC00',\n                '#4F44CF',\n                '#5AC8FA',\n                '#003A8C',\n                '#B08AE2',\n                '#FF6341',\n                '#98DD62'\n            ]\n        },\n        label: {\n            enable: true\n        },\n        tooltip: {\n            enable: true\n        },\n        legend: {\n            enable: true,\n            border: true,\n            maxSize: 1,\n            position: 'rt',\n            shapeType: 'rectRound',\n            labelFontColor: '#FDFDFD',\n            labelFontSize: 12,\n            labelFontWeight: 400\n        }\n    };\n    const tableConfig = {\n        borderColor: '#4b4e53',\n        bodyFontSize: 12,\n        bodyFontColor: '#fdfdfd',\n        bodyBackgroundColor: 'transparent',\n        headerFontSize: 12,\n        headerFontColor: '#fdfdfd',\n        headerBackgroundColor: '#36393e',\n        hoverBodyBackgroundColor: '#4284ff66',\n        hoverBodyInlineBackgroundColor: '#4284ff10',\n        hoverHeaderBackgroundColor: '#6f7984cc',\n        hoverHeaderInlineBackgroundColor: '#4b4f54',\n        selectedBorderColor: '#3073f2',\n        selectedBackgroundColor: '#4284ff33'\n    };\n    return {\n        config: {\n            table: tableConfig,\n            pivotTable: tableConfig,\n            line: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine: crosshairLine\n            },\n            column: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            columnParallel: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            columnPercent: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    4,\n                    4,\n                    0,\n                    0\n                ]\n            },\n            bar: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            barParallel: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            barPercent: {\n                ...baseConfig,\n                xAxis: linearAxis,\n                yAxis: barBandAxis,\n                crosshairRect: crosshairRect,\n                stackCornerRadius: [\n                    0,\n                    4,\n                    4,\n                    0\n                ]\n            },\n            area: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine: crosshairLine\n            },\n            areaPercent: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine: crosshairLine\n            },\n            areaRange: {\n                ...baseConfig,\n                xAxis: bandAxis,\n                yAxis: linearAxis,\n                crosshairLine: crosshairLine\n            },\n            scatter: {\n                ...baseConfig,\n                xAxis: {\n                    ...linearAxis,\n                    line: {\n                        ...linearAxis.line,\n                        visible: true\n                    }\n                },\n                yAxis: {\n                    ...linearAxis,\n                    line: {\n                        ...linearAxis.line,\n                        visible: true\n                    }\n                },\n                crosshairLine\n            },\n            pie: {\n                ...baseConfig\n            },\n            donut: {\n                ...baseConfig\n            },\n            radar: {\n                ...baseConfig\n            },\n            rose: {\n                ...baseConfig\n            },\n            roseParallel: {\n                ...baseConfig\n            },\n            funnel: {\n                ...baseConfig,\n                color: {\n                    colorScheme: [\n                        '#2E62F1',\n                        '#3A6EF6',\n                        '#4780FA',\n                        '#548CFE',\n                        '#6198FF',\n                        '#6FA3FF',\n                        '#7CACFF',\n                        '#88B7FF',\n                        '#94C2FF',\n                        '#A0CEFF'\n                    ]\n                }\n            },\n            heatmap: {\n                ...baseConfig\n            }\n        }\n    };\n};\nconst registerCustomTheme = (key, themeConfig)=>{\n    const customTheme = 'function' == typeof themeConfig ? themeConfig({\n        lightTheme: lightTheme(),\n        darkTheme: darkTheme()\n    }) : themeConfig;\n    Builder._themeMap[key] = customTheme;\n};\nconst registerLightTheme = ()=>{\n    registerCustomTheme('light', lightTheme());\n};\nconst registerDarkTheme = ()=>{\n    registerCustomTheme('dark', darkTheme());\n};\nconst registerAll = ()=>{\n    registerTable();\n    registerPivotTable();\n    registerLine();\n    registerColumn();\n    registerColumnParallel();\n    registerColumnPercent();\n    registerBar();\n    registerBarParallel();\n    registerBarPercent();\n    registerArea();\n    registerAreaPercent();\n    registerAreaRange();\n    registerScatter();\n    registerPie();\n    registerDonut();\n    registerRose();\n    registerRoseParallel();\n    registerRadar();\n    registerFunnel();\n    registerHeatmap();\n    registerLightTheme();\n    registerDarkTheme();\n};\nconst updateAdvanced = (chartType, advancedPipe)=>{\n    Builder._customAdvancedPipe[chartType] = advancedPipe;\n};\nconst updateSpec = (chartType, specPipe)=>{\n    Builder._customSpecPipe[chartType] = specPipe;\n};\nconst zChartType = z[\"enum\"]([\n    'table',\n    'pivotTable',\n    'line',\n    'column',\n    'columnPercent',\n    'columnParallel',\n    'bar',\n    'barPercent',\n    'barParallel',\n    'area',\n    'areaPercent',\n    'areaRange',\n    'scatter',\n    'dualAxis',\n    'rose',\n    'roseParallel',\n    'pie',\n    'donut',\n    'radar',\n    'funnel',\n    'heatmap'\n]);\nconst zDatum = z.record(z.string().or(z.number()), z.any());\nconst zDataset = z.array(zDatum);\nconst zDimension = z.object({\n    id: z.string(),\n    alias: z.string().optional(),\n    location: z[\"enum\"]([\n        'dimension',\n        'rowDimension',\n        'columnDimension'\n    ]).default('dimension')\n});\nconst zDimensionGroup = z.object({\n    id: z.string(),\n    alias: z.string().optional(),\n    get children () {\n        return z.array(zDimensionGroup.or(zDimension)).optional();\n    }\n});\nconst zDimensions = z.array(zDimension);\nconst zDimensionTree = z.array(zDimensionGroup.or(zDimension));\nconst zNumFormat = z.object({\n    type: z[\"enum\"]([\n        'number',\n        'percent',\n        'permille',\n        'scientific'\n    ]).default('number').optional(),\n    ratio: z.number().default(1).optional(),\n    symbol: z.string().default('').optional(),\n    thousandSeparator: z.boolean().default(false).optional(),\n    prefix: z.string().default('').optional(),\n    suffix: z.string().default('').optional(),\n    fractionDigits: z.number().default(2).optional(),\n    significantDigits: z.number().default(0).optional(),\n    roundingPriority: z[\"enum\"]([\n        'morePrecision',\n        'lessPrecision'\n    ]).default('morePrecision').optional(),\n    roundingMode: z[\"enum\"]([\n        'floor',\n        'ceil',\n        'halfEven',\n        'expand',\n        'trunc',\n        'halfFloor',\n        'halfCeil',\n        'halfExpand',\n        'halfTrunc'\n    ]).default('halfCeil').optional()\n}).optional();\nconst zMeasure = z.object({\n    id: z.string(),\n    alias: z.string().optional(),\n    autoFormat: z.boolean().default(true),\n    format: zNumFormat[\"default\"]({})\n});\nconst zMeasureGroup = z.object({\n    id: z.string(),\n    alias: z.string().optional(),\n    get children () {\n        return z.array(zMeasureGroup.or(zMeasure)).optional();\n    }\n});\nconst zMeasures = z.array(zMeasure);\nconst zMeasureTree = z.array(zMeasureGroup.or(zMeasure));\nconst zFoldInfo = z.object({\n    foldMap: z.record(z.string(), z.string().or(z.undefined())),\n    measureId: z.string(),\n    measureName: z.string(),\n    measureValue: z.string()\n});\nconst zUnfoldInfo = z.object({\n    colorItems: z.array(z.string()),\n    groupId: z.string(),\n    colorIdMap: z.record(z.string(), z.string()),\n    groupName: z.string()\n});\nconst zDatasetReshapeInfo = z.array(z.object({\n    id: z.string(),\n    foldInfo: zFoldInfo,\n    unfoldInfo: zUnfoldInfo\n}));\nconst zEncoding = z.array(z.object({\n    x: z.array(z.string()).optional(),\n    y: z.array(z.string()).optional(),\n    color: z.array(z.string()).optional(),\n    group: z.array(z.string()).optional(),\n    angle: z.array(z.string()).optional(),\n    radius: z.array(z.string()).optional(),\n    tooltip: z.array(z.string()).optional(),\n    size: z.array(z.string()).optional()\n}));\nconst zXBandAxis = z.object({\n    visible: z.boolean().default(true).optional(),\n    labelAutoHide: z.boolean().default(true).optional(),\n    labelAutoHideGap: z.number().default(0).optional(),\n    labelAutoRotate: z.boolean().default(true).optional(),\n    labelAutoRotateAngleRange: z.array(z.number()).default([\n        0,\n        -45,\n        -90\n    ]).optional(),\n    labelAutoLimit: z.boolean().default(true).optional(),\n    labelAutoLimitLength: z.number().default(100).optional(),\n    label: z.object({\n        visible: z.boolean().default(true).optional(),\n        labelColor: z.string().default('#797B85').optional(),\n        labelFontSize: z.number().default(12).optional(),\n        labelFontWeight: z.number().default(400).optional(),\n        labelAngle: z.number().default(0).optional()\n    }).optional(),\n    line: z.object({\n        visible: z.boolean().default(true).optional(),\n        lineColor: z.string().default('rgba(54, 65, 89, 0.30)').optional(),\n        lineWidth: z.number().default(1).optional()\n    }).optional(),\n    tick: z.object({\n        visible: z.boolean().default(true).optional(),\n        tickInside: z.boolean().default(false).optional(),\n        tickColor: z.string().default('rgba(54, 65, 89, 0.30)').optional(),\n        tickSize: z.number().default(4).optional()\n    }).optional(),\n    title: z.object({\n        visible: z.boolean().default(false).optional(),\n        titleText: z.string().default('').optional(),\n        titleColor: z.string().default('#646A73').optional(),\n        titleFontSize: z.number().default(12).optional(),\n        titleFontWeight: z.number().default(400).optional()\n    }).optional(),\n    grid: z.object({\n        visible: z.boolean().default(false).optional(),\n        gridColor: z.string().default('rgba(54, 65, 89, 0.15)').optional(),\n        gridWidth: z.number().default(0.5).optional()\n    }).optional()\n});\nconst zYBandAxis = zXBandAxis;\nconst zXLinearAxis = z.object({\n    visible: z.boolean().default(true).optional(),\n    min: z.number().optional(),\n    max: z.number().optional(),\n    nice: z.boolean().default(true).optional(),\n    zero: z.boolean().default(true).optional(),\n    log: z.boolean().default(false).optional(),\n    logBase: z.number().default(10).optional(),\n    inverse: z.boolean().default(false).optional(),\n    label: z.object({\n        visible: z.boolean().default(true).optional(),\n        labelColor: z.string().default('#797B85').optional(),\n        labelFontSize: z.number().default(12).optional(),\n        labelFontWeight: z.number().default(400).optional(),\n        labelAngle: z.number().default(0).optional()\n    }).optional(),\n    line: z.object({\n        visible: z.boolean().default(true).optional(),\n        lineColor: z.string().default('rgba(54, 65, 89, 0.30)').optional(),\n        lineWidth: z.number().default(1).optional()\n    }).optional(),\n    tick: z.object({\n        visible: z.boolean().default(true).optional(),\n        tickInside: z.boolean().default(false).optional(),\n        tickColor: z.string().default('rgba(54, 65, 89, 0.30)').optional(),\n        tickSize: z.number().default(4).optional()\n    }).optional(),\n    title: z.object({\n        visible: z.boolean().default(false).optional(),\n        titleText: z.string().default('').optional(),\n        titleColor: z.string().default('#646A73').optional(),\n        titleFontSize: z.number().default(12).optional(),\n        titleFontWeight: z.number().default(400).optional()\n    }).optional(),\n    grid: z.object({\n        visible: z.boolean().default(false).optional(),\n        gridColor: z.string().default('rgba(54, 65, 89, 0.15)').optional(),\n        gridWidth: z.number().default(0.5).optional()\n    }).optional()\n});\nconst zYLinearAxis = zXLinearAxis;\nconst zCrosshairLine = z.object({\n    visible: z.boolean().optional(),\n    lineColor: z.string().optional(),\n    labelColor: z.string().optional(),\n    labelVisible: z.boolean().optional(),\n    labelBackgroundColor: z.string().optional()\n});\nconst zCrosshairRect = z.object({\n    visible: z.boolean().optional(),\n    rectColor: z.string().optional(),\n    labelColor: z.string().optional(),\n    labelVisible: z.boolean().optional(),\n    labelBackgroundColor: z.string().optional()\n});\nconst zStackCornerRadius = z.number().or(z.array(z.number())).default([\n    3,\n    3,\n    0,\n    0\n]);\nconst zBackgroundColor = z.string().default('transparent').optional();\nconst zColor = z.object({\n    colorScheme: z.array(z.string()).optional(),\n    colorMapping: z.record(z.string(), z.string()).optional()\n});\nconst zLinearColor = z.object({\n    colorScheme: z.array(z.string()).optional()\n});\nconst zLabel = z.object({\n    enable: z.boolean().default(true).optional()\n});\nconst zLegend = z.object({\n    enable: z.boolean().default(true).optional(),\n    border: z.boolean().default(true).optional(),\n    maxSize: z.number().default(1).optional(),\n    shapeType: z[\"enum\"]([\n        'circle',\n        'cross',\n        'diamond',\n        'square',\n        'arrow',\n        'arrow2Left',\n        'arrow2Right',\n        'wedge',\n        'thinTriangle',\n        'triangle',\n        'triangleUp',\n        'triangleDown',\n        'triangleRight',\n        'triangleLeft',\n        'stroke',\n        'star',\n        'wye',\n        'rect',\n        'arrowLeft',\n        'arrowRight',\n        'rectRound',\n        'roundLine'\n    ]).default('rectRound').optional(),\n    position: z[\"enum\"]([\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb',\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr',\n        'right',\n        'rightTop',\n        'rightBottom',\n        'rt',\n        'rb',\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ]).default('bottom').optional(),\n    labelFontSize: z.number().default(12).optional(),\n    labelFontColor: z.string().default('#fff').optional(),\n    labelFontWeight: z.number().or(z.string()).default(400).optional()\n});\nconst zColorLegend = z.object({\n    position: z[\"enum\"]([\n        'left',\n        'leftTop',\n        'leftBottom',\n        'lt',\n        'lb',\n        'top',\n        'topLeft',\n        'topRight',\n        'tl',\n        'tr',\n        'right',\n        'rightTop',\n        'rightBottom',\n        'rt',\n        'rb',\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'bl',\n        'br'\n    ]).default('bottom').optional(),\n    enable: z.boolean().default(true).optional()\n});\nconst zTooltip = z.object({\n    enable: z.boolean().default(true).optional()\n});\nconst zTableConfig = z.object({\n    borderColor: z.string().optional(),\n    bodyFontSize: z.number().optional(),\n    bodyFontColor: z.string().optional(),\n    bodyBackgroundColor: z.string().optional(),\n    hoverBodyBackgroundColor: z.string().optional(),\n    hoverBodyInlineBackgroundColor: z.string().optional(),\n    headerFontSize: z.number().optional(),\n    headerFontColor: z.string().optional(),\n    headerBackgroundColor: z.string().optional(),\n    hoverHeaderBackgroundColor: z.string().optional(),\n    hoverHeaderInlineBackgroundColor: z.string().optional(),\n    selectedBorderColor: z.string().optional(),\n    selectedBackgroundColor: z.string().optional()\n});\nconst zPivotTableConfig = zTableConfig;\nconst zLineConfig = z.object({\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    color: zColor.optional(),\n    tooltip: zTooltip.optional(),\n    legend: zLegend.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairLine: zCrosshairLine.optional()\n});\nconst zColumnConfig = z.object({\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    color: zColor.optional(),\n    tooltip: zTooltip.optional(),\n    legend: zLegend.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairRect: zCrosshairRect.optional(),\n    stackCornerRadius: zStackCornerRadius.optional()\n});\nconst zColumnParallelConfig = zColumnConfig;\nconst zColumnPercentConfig = zColumnConfig;\nconst zBarConfig = z.object({\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    color: zColor.optional(),\n    tooltip: zTooltip.optional(),\n    legend: zLegend.optional(),\n    xAxis: zXLinearAxis.optional(),\n    yAxis: zYBandAxis.optional(),\n    crosshairRect: zCrosshairRect.optional(),\n    stackCornerRadius: zStackCornerRadius.optional()\n});\nconst zBarParallelConfig = zBarConfig;\nconst zBarPercentConfig = zBarConfig;\nconst zAreaConfig = z.object({\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    color: zColor.optional(),\n    tooltip: zTooltip.optional(),\n    legend: zLegend.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairLine: zCrosshairLine.optional()\n});\nconst zAreaPercentConfig = zAreaConfig;\nconst zAreaRangeConfig = zAreaConfig;\nconst zDualAxisConfig = z.object({\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    color: zColor.optional(),\n    tooltip: zTooltip.optional(),\n    legend: zLegend.optional()\n});\nconst zScatterConfig = z.object({\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    color: zColor.optional(),\n    tooltip: zTooltip.optional(),\n    legend: zLegend.optional(),\n    xAxis: zXLinearAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairLine: zCrosshairLine.optional()\n});\nconst zRoseConfig = z.object({\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    color: zColor.optional(),\n    tooltip: zTooltip.optional(),\n    legend: zLegend.optional()\n});\nconst zRoseParallelConfig = zRoseConfig;\nconst zPieConfig = z.object({\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    color: zColor.optional(),\n    tooltip: zTooltip.optional(),\n    legend: zLegend.optional()\n});\nconst zDonutConfig = zPieConfig;\nconst zRadarConfig = zPieConfig;\nconst zFunnelConfig = zPieConfig;\nconst zHeatmapConfig = zPieConfig;\nconst zConfig = z.object({\n    table: zTableConfig.optional(),\n    pivotTable: zPivotTableConfig.optional(),\n    line: zLineConfig.optional(),\n    column: zColumnConfig.optional(),\n    columnParallel: zColumnParallelConfig.optional(),\n    columnPercent: zColumnPercentConfig.optional(),\n    bar: zBarConfig.optional(),\n    barParallel: zBarParallelConfig.optional(),\n    barPercent: zBarPercentConfig.optional(),\n    area: zAreaConfig.optional(),\n    areaPercent: zAreaPercentConfig.optional(),\n    areaRange: zAreaRangeConfig.optional(),\n    dualAxis: zDualAxisConfig.optional(),\n    scatter: zScatterConfig.optional(),\n    rose: zRoseConfig.optional(),\n    roseParallel: zRoseParallelConfig.optional(),\n    pie: zPieConfig.optional(),\n    donut: zDonutConfig.optional(),\n    radar: zRadarConfig.optional(),\n    funnel: zFunnelConfig.optional(),\n    heatmap: zHeatmapConfig.optional()\n});\nconst zAxis = z.object({\n    visible: z.boolean().default(true).optional(),\n    min: z.number().optional(),\n    max: z.number().optional(),\n    nice: z.boolean().default(true).optional(),\n    zero: z.boolean().default(true).optional(),\n    inverse: z.boolean().default(false).optional(),\n    log: z.boolean().default(false).optional(),\n    logBase: z.number().default(10).optional(),\n    labelAutoHide: z.boolean().default(true).optional(),\n    labelAutoHideGap: z.number().default(4).optional(),\n    labelAutoRotate: z.boolean().default(true).optional(),\n    labelAutoRotateAngleRange: z.array(z.number()).default([\n        0,\n        -45,\n        -90\n    ]).optional(),\n    labelAutoLimit: z.boolean().default(true).optional(),\n    labelAutoLimitLength: z.number().default(100).optional(),\n    label: z.object({\n        visible: z.boolean().default(true).optional(),\n        labelColor: z.string().default('#797B85').optional(),\n        labelFontSize: z.number().default(12).optional(),\n        labelFontWeight: z.number().default(400).optional(),\n        labelAngle: z.number().default(0).optional()\n    }).optional(),\n    line: z.object({\n        visible: z.boolean().default(true).optional(),\n        lineColor: z.string().default('rgba(54, 65, 89, 0.30)').optional(),\n        lineWidth: z.number().default(1).optional()\n    }).optional(),\n    tick: z.object({\n        visible: z.boolean().default(true).optional(),\n        tickInside: z.boolean().default(false).optional(),\n        tickColor: z.string().default('rgba(54, 65, 89, 0.30)').optional(),\n        tickSize: z.number().default(4).optional()\n    }).optional(),\n    title: z.object({\n        visible: z.boolean().default(false).optional(),\n        titleText: z.string().default('').optional(),\n        titleColor: z.string().default('#646A73').optional(),\n        titleFontSize: z.number().default(12).optional(),\n        titleFontWeight: z.number().default(400).optional()\n    }).optional(),\n    grid: z.object({\n        visible: z.boolean().default(false).optional(),\n        gridColor: z.string().default('rgba(54, 65, 89, 0.15)').optional(),\n        gridWidth: z.number().default(0.5).optional()\n    }).optional()\n});\nconst zCustomThemeConfig = z.object({\n    config: zConfig.optional()\n});\nconst zCustomTheme = z.record(z.string(), zCustomThemeConfig).optional();\nconst zTheme = z.string();\nconst zSelector = z.union([\n    z.string(),\n    z.number(),\n    z.object({\n        field: z.string(),\n        operator: z[\"enum\"]([\n            '=',\n            '==',\n            '!=',\n            '>',\n            '<',\n            '>=',\n            '<=',\n            'between'\n        ]).optional(),\n        op: z[\"enum\"]([\n            '=',\n            '==',\n            '!=',\n            '>',\n            '<',\n            '>=',\n            '<=',\n            'between'\n        ]).optional(),\n        value: z.union([\n            z.string(),\n            z.number(),\n            z.array(z.union([\n                z.string(),\n                z.number()\n            ]))\n        ])\n    }),\n    z.object({\n        field: z.string(),\n        operator: z[\"enum\"]([\n            'in',\n            'not in'\n        ]).optional(),\n        op: z[\"enum\"]([\n            'in',\n            'not in'\n        ]).optional(),\n        value: z.union([\n            z.string(),\n            z.number(),\n            z.array(z.union([\n                z.string(),\n                z.number()\n            ]))\n        ])\n    })\n]);\nconst zSelectors = z.array(zSelector);\nconst zBarStyle = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).optional(),\n    barColor: z.string().optional(),\n    barColorOpacity: z.number().optional(),\n    barBorderColor: z.string().optional(),\n    barBorderWidth: z.number().optional(),\n    barBorderStyle: z.union([\n        z.literal('solid'),\n        z.literal('dashed'),\n        z.literal('dotted')\n    ]).optional(),\n    barRadius: z.union([\n        z.number(),\n        z.array(z.number())\n    ]).optional()\n});\nconst zPointStyle = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).optional(),\n    pointSize: z.number().optional(),\n    pointColor: z.string().optional(),\n    pointColorOpacity: z.number().optional(),\n    pointBorderColor: z.string().optional(),\n    pointBorderWidth: z.number().optional(),\n    pointBorderStyle: z.union([\n        z[\"enum\"]([\n            'solid',\n            'dashed',\n            'dotted'\n        ])\n    ]).optional()\n});\nconst zLineStyle = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).optional(),\n    lineSmooth: z.boolean().optional(),\n    lineColor: z.string().optional(),\n    lineColorOpacity: z.number().optional(),\n    lineWidth: z.number().optional(),\n    lineStyle: z.union([\n        z[\"enum\"]([\n            'solid',\n            'dashed',\n            'dotted'\n        ])\n    ]).optional()\n});\nconst zAreaStyle = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).optional(),\n    areaColor: z.string().optional(),\n    areaColorOpacity: z.number().optional()\n});\nconst zMarkStyle = z.object({\n    barStyle: zBarStyle.or(z.array(zBarStyle)).optional(),\n    pointStyle: zPointStyle.or(z.array(zPointStyle)).optional(),\n    lineStyle: zLineStyle.or(z.array(zLineStyle)).optional(),\n    areaStyle: zAreaStyle.or(z.array(zAreaStyle)).optional()\n});\nconst zAnnotationPoint = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]),\n    text: z.string().or(z.array(z.string())).optional(),\n    textColor: z.string().default('#ffffff').optional(),\n    textFontSize: z.number().default(12).optional(),\n    textFontWeight: z.number().default(400).optional(),\n    textAlign: z[\"enum\"]([\n        'left',\n        'right',\n        'center'\n    ]).default('center').optional(),\n    textBaseline: z[\"enum\"]([\n        'top',\n        'middle',\n        'bottom'\n    ]).default('middle').optional(),\n    backgroundVisible: z.boolean().default(true).optional(),\n    backgroundColor: z.string().default('#212121').optional(),\n    backgroundBorderColor: z.string().optional(),\n    backgroundBorderWidth: z.number().default(1).optional(),\n    backgroundBorderRadius: z.number().default(4).optional(),\n    backgroundPadding: z.number().optional(),\n    offsetY: z.number().default(0).optional(),\n    offsetX: z.number().default(0).optional()\n});\nconst zAnnotationVerticalLine = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).optional(),\n    xValue: z.union([\n        z.number(),\n        z.string(),\n        z.array(z.union([\n            z.number(),\n            z.string()\n        ]))\n    ]).optional(),\n    text: z.string().or(z.array(z.string())).optional(),\n    textPosition: z[\"enum\"]([\n        'outsideStart',\n        'outsideEnd',\n        'outsideMiddle',\n        'insideStart',\n        'insideMiddle',\n        'insideEnd'\n    ]).default('insideEnd').optional(),\n    textColor: z.string().default('#ffffff').optional(),\n    textFontSize: z.number().default(12).optional(),\n    textFontWeight: z.number().default(400).optional(),\n    textAlign: z[\"enum\"]([\n        'left',\n        'right',\n        'center'\n    ]).default('right').optional(),\n    textBaseline: z[\"enum\"]([\n        'top',\n        'middle',\n        'bottom'\n    ]).default('top').optional(),\n    lineVisible: z.boolean().optional(),\n    lineColor: z.string().optional(),\n    lineWidth: z.number().optional(),\n    lineStyle: z.union([\n        z.literal('solid'),\n        z.literal('dashed'),\n        z.literal('dotted')\n    ]).optional(),\n    backgroundVisible: z.boolean().default(true).optional(),\n    backgroundColor: z.string().default('#212121').optional(),\n    backgroundBorderColor: z.string().optional(),\n    backgroundBorderWidth: z.number().default(1).optional(),\n    backgroundBorderRadius: z.number().default(4).optional(),\n    backgroundPadding: z.number().optional(),\n    offsetX: z.number().default(0),\n    offsetY: z.number().default(0)\n});\nconst zAnnotationHorizontalLine = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]).optional(),\n    yValue: z.union([\n        z.number(),\n        z.string(),\n        z.array(z.union([\n            z.number(),\n            z.string()\n        ]))\n    ]).optional(),\n    text: z.string().or(z.array(z.string())).optional(),\n    textPosition: z[\"enum\"]([\n        'outsideStart',\n        'outsideEnd',\n        'outsideMiddle',\n        'insideStart',\n        'insideMiddle',\n        'insideEnd'\n    ]).default('insideMiddle').optional(),\n    textColor: z.string().default('#ffffff').optional(),\n    textFontSize: z.number().default(12).optional(),\n    textFontWeight: z.number().default(400).optional(),\n    textAlign: z[\"enum\"]([\n        'left',\n        'right',\n        'center'\n    ]).default('center').optional(),\n    textBaseline: z[\"enum\"]([\n        'top',\n        'middle',\n        'bottom'\n    ]).default('bottom').optional(),\n    lineVisible: z.boolean().optional(),\n    lineColor: z.string().optional(),\n    lineWidth: z.number().optional(),\n    lineStyle: z.union([\n        z.literal('solid'),\n        z.literal('dashed'),\n        z.literal('dotted')\n    ]).optional(),\n    backgroundVisible: z.boolean().default(true).optional(),\n    backgroundColor: z.string().default('#212121').optional(),\n    backgroundBorderColor: z.string().optional(),\n    backgroundBorderWidth: z.number().default(1).optional(),\n    backgroundBorderRadius: z.number().default(4).optional(),\n    backgroundPadding: z.number().optional(),\n    offsetX: z.number().default(0),\n    offsetY: z.number().default(0)\n});\nconst zAnnotationArea = z.object({\n    selector: z.union([\n        zSelector,\n        zSelectors\n    ]),\n    textPosition: z[\"enum\"]([\n        'top',\n        'topRight',\n        'topLeft',\n        'bottom',\n        'bottomLeft',\n        'bottomRight',\n        'left',\n        'right'\n    ]).default('top').optional(),\n    text: z.string().or(z.array(z.string())).optional(),\n    textColor: z.string().default('#ffffff').optional(),\n    textFontSize: z.number().default(12).optional(),\n    textFontWeight: z.number().default(400).optional(),\n    textAlign: z[\"enum\"]([\n        'left',\n        'right',\n        'center'\n    ]).default('center').optional(),\n    textBaseline: z[\"enum\"]([\n        'top',\n        'middle',\n        'bottom'\n    ]).default('middle').optional(),\n    backgroundVisible: z.boolean().default(true).optional(),\n    backgroundColor: z.string().default('#212121').optional(),\n    backgroundBorderColor: z.string().optional(),\n    backgroundBorderWidth: z.number().default(1).optional(),\n    backgroundBorderRadius: z.number().default(4).optional(),\n    backgroundPadding: z.number().optional(),\n    areaColor: z.string().default('red').optional(),\n    areaColorOpacity: z.number().default(0.5).optional(),\n    areaBorderColor: z.number().optional(),\n    areaBorderWidth: z.number().default(2).optional(),\n    areaBorderRadius: z.number().default(4).optional(),\n    outerPadding: z.number().optional(),\n    offsetX: z.number().optional(),\n    offsetY: z.number().optional()\n});\nconst zAnnotation = z.object({\n    annotationPoint: zAnnotationPoint.or(z.array(zAnnotationPoint)).optional(),\n    annotationVerticalLine: zAnnotationVerticalLine.or(z.array(zAnnotationVerticalLine)).optional(),\n    annotationHorizontalLine: zAnnotationHorizontalLine.or(z.array(zAnnotationHorizontalLine)).optional(),\n    annotationArea: zAnnotationArea.or(z.array(zAnnotationArea)).optional()\n});\nconst zSort = z.object({\n    order: z[\"enum\"]([\n        'asc',\n        'desc'\n    ]).default('asc'),\n    orderBy: z.string().optional(),\n    customOrder: z.array(z.any()).optional()\n});\nconst zSortLegend = z.object({\n    order: z[\"enum\"]([\n        'asc',\n        'desc'\n    ]).default('asc'),\n    orderBy: z.string().optional(),\n    customOrder: z.array(z.any()).optional()\n});\nconst zAnalysis = z.object({\n    orderMapping: z.record(z.string(), z.array(z.string())).optional()\n});\nconst zLocale = z[\"enum\"]([\n    'zh-CN',\n    'en-US'\n]).default('zh-CN');\nconst zTable = z.object({\n    chartType: z.literal('table'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zPivotTable = z.object({\n    chartType: z.literal('pivotTable'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasures.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zLine = z.object({\n    chartType: z.literal('line'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairLine: zCrosshairLine.optional(),\n    sort: zSort.optional(),\n    sortLegend: zSortLegend.optional(),\n    theme: zTheme.optional(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).optional(),\n    lineStyle: z.array(zLineStyle).or(zLineStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zColumn = z.object({\n    chartType: z.literal('column'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairRect: zCrosshairRect.optional(),\n    stackCornerRadius: zStackCornerRadius.optional(),\n    theme: zTheme.optional(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zColumnParallel = z.object({\n    chartType: z.literal('columnParallel'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairRect: zCrosshairRect.optional(),\n    stackCornerRadius: zStackCornerRadius.optional(),\n    theme: zTheme.optional(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zColumnPercent = z.object({\n    chartType: z.literal('columnPercent'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairRect: zCrosshairRect.optional(),\n    stackCornerRadius: zStackCornerRadius.optional(),\n    theme: zTheme.optional(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zBar = z.object({\n    chartType: z.literal('bar'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXLinearAxis.optional(),\n    yAxis: zYBandAxis.optional(),\n    crosshairRect: zCrosshairRect.optional(),\n    stackCornerRadius: zStackCornerRadius.optional(),\n    theme: zTheme.optional(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zBarParallel = z.object({\n    chartType: z.literal('barParallel'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXLinearAxis.optional(),\n    yAxis: zYBandAxis.optional(),\n    crosshairRect: zCrosshairRect.optional(),\n    stackCornerRadius: zStackCornerRadius.optional(),\n    theme: zTheme.optional(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zBarPercent = z.object({\n    chartType: z.literal('barPercent'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXLinearAxis.optional(),\n    yAxis: zYBandAxis.optional(),\n    crosshairRect: zCrosshairRect.optional(),\n    stackCornerRadius: zStackCornerRadius.optional(),\n    theme: zTheme.optional(),\n    barStyle: z.array(zBarStyle).or(zBarStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zArea = z.object({\n    chartType: z.literal('area'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairLine: zCrosshairLine.optional(),\n    theme: zTheme.optional(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).optional(),\n    lineStyle: z.array(zLineStyle).or(zLineStyle).optional(),\n    areaStyle: z.array(zAreaStyle).or(zAreaStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zAreaPercent = z.object({\n    chartType: z.literal('areaPercent'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairLine: zCrosshairLine.optional(),\n    theme: zTheme.optional(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).optional(),\n    lineStyle: z.array(zLineStyle).or(zLineStyle).optional(),\n    areaStyle: z.array(zAreaStyle).or(zAreaStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zAreaRange = z.object({\n    chartType: z.literal('areaRange'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    label: zLabel.optional(),\n    xAxis: zXBandAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairLine: zCrosshairLine.optional(),\n    theme: zTheme.optional(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).optional(),\n    lineStyle: z.array(zLineStyle).or(zLineStyle).optional(),\n    areaStyle: z.array(zAreaStyle).or(zAreaStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zScatter = z.object({\n    chartType: z.literal('scatter'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    xAxis: zXLinearAxis.optional(),\n    yAxis: zYLinearAxis.optional(),\n    crosshairLine: zCrosshairLine.optional(),\n    theme: zTheme.optional(),\n    pointStyle: z.array(zPointStyle).or(zPointStyle).optional(),\n    annotationPoint: z.array(zAnnotationPoint).or(zAnnotationPoint).optional(),\n    annotationVerticalLine: z.array(zAnnotationVerticalLine).or(zAnnotationVerticalLine).optional(),\n    annotationHorizontalLine: z.array(zAnnotationHorizontalLine).or(zAnnotationHorizontalLine).optional(),\n    annotationArea: z.array(zAnnotationArea).or(zAnnotationArea).optional(),\n    locale: zLocale.optional()\n});\nconst zRose = z.object({\n    chartType: z.literal('rose'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zRoseParallel = z.object({\n    chartType: z.literal('roseParallel'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zPie = z.object({\n    chartType: z.literal('pie'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zDonut = z.object({\n    chartType: z.literal('donut'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zRadar = z.object({\n    chartType: z.literal('radar'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zColor.optional(),\n    label: zLabel.optional(),\n    legend: zLegend.optional(),\n    tooltip: zTooltip.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zFunnel = z.object({\n    chartType: z.literal('funnel'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zLinearColor.optional(),\n    label: zLabel.optional(),\n    legend: zColorLegend.optional(),\n    tooltip: zTooltip.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zHeatmap = z.object({\n    chartType: z.literal('heatmap'),\n    dataset: zDataset.optional(),\n    dimensions: zDimensions.optional(),\n    measures: zMeasureTree.optional(),\n    backgroundColor: zBackgroundColor.optional(),\n    color: zLinearColor.optional(),\n    label: zLabel.optional(),\n    legend: zColorLegend.optional(),\n    tooltip: zTooltip.optional(),\n    theme: zTheme.optional(),\n    locale: zLocale.optional()\n});\nconst zVSeed = z.discriminatedUnion('chartType', [\n    zTable,\n    zPivotTable,\n    zLine,\n    zColumn,\n    zColumnParallel,\n    zColumnPercent,\n    zBar,\n    zBarParallel,\n    zBarPercent,\n    zArea,\n    zAreaPercent,\n    zAreaRange,\n    zScatter,\n    zPie,\n    zDonut,\n    zRose,\n    zRoseParallel,\n    zRadar,\n    zFunnel,\n    zHeatmap\n]);\nconst zAdvancedVSeed = z.object({\n    chartType: zChartType,\n    dataset: zDataset,\n    datasetReshapeInfo: zDatasetReshapeInfo,\n    dimensions: zDimensionTree,\n    measures: zMeasureTree,\n    encoding: zEncoding,\n    config: zConfig,\n    analysis: zAnalysis,\n    theme: zTheme,\n    markStyle: zMarkStyle,\n    customTheme: zCustomThemeConfig,\n    annotation: zAnnotation,\n    locale: zLocale\n});\nexport { Builder, FoldMeasureId, FoldMeasureName, FoldMeasureValue, ORIGINAL_DATA, Separator, UnfoldDimensionGroup, UnfoldDimensionGroupId, areaAdvancedPipeline, areaPercentAdvancedPipeline, areaPercentSpecPipeline, areaRangeAdvancedPipeline, areaRangeSpecPipeline, areaSpecPipeline, autoFormatter, autoNumFormatter, barAdvancedPipeline, barParallelAdvancedPipeline, barParallelSpecPipeline, barPercentAdvancedPipeline, barPercentSpecPipeline, barSpecPipeline, columnAdvancedPipeline, columnParallelAdvancedPipeline, columnParallelSpecPipeline, columnPercentAdvancedPipeline, columnPercentSpecPipeline, columnSpecPipeline, createFormatter, createNumFormatter, darkTheme, dataReshapeFor1D, dataReshapeFor1D1M, dataReshapeFor1D2M, dataReshapeFor2D1M, dataReshapeFor2D1M0Name, donutAdvancedPipeline, donutSpecPipeline, execPipeline, findAllDimensions, findAllMeasures, findDimensionById, findFirstDimension, findFirstMeasure, findMeasureById, foldMeasures, funnelAdvancedPipeline, funnelSpecPipeline, heatmapAdvancedPipeline, heatmapSpecPipeline, i18n, intl, isDimensionSelector, isMeasureSelector, isPartialDatumSelector, isPivotChart, isPivotTable, isTable, isVChart, isVTable, isValueSelector, lightTheme, lineAdvancedPipeline, lineSpecPipeline, pieAdvancedPipeline, pieSpecPipeline, pivotTableAdvancedPipeline, pivotTableSpecPipeline, preorderTraverse, radarAdvancedPipeline, radarSpecPipeline, registerAll, registerArea, registerAreaPercent, registerAreaRange, registerBar, registerBarParallel, registerBarPercent, registerColumn, registerColumnParallel, registerColumnPercent, registerCustomTheme, registerDarkTheme, registerDonut, registerFunnel, registerHeatmap, registerLightTheme, registerLine, registerPie, registerPivotTable, registerRadar, registerRose, registerRoseParallel, registerScatter, registerTable, roseAdvancedPipeline, roseParallelAdvancedPipeline, roseParallelSpecPipeline, roseSpecPipeline, scatterAdvancedPipeline, scatterSpecPipeline, selector_selector as selector, tableAdvancedPipeline, tableSpecPipeline, unfoldDimensions, updateAdvanced, updateSpec, zAdvancedVSeed, zAnalysis, zAnnotation, zAnnotationArea, zAnnotationHorizontalLine, zAnnotationPoint, zAnnotationVerticalLine, zArea, zAreaConfig, zAreaPercent, zAreaPercentConfig, zAreaRange, zAreaRangeConfig, zAreaStyle, zAxis, zBackgroundColor, zBar, zBarConfig, zBarParallel, zBarParallelConfig, zBarPercent, zBarPercentConfig, zBarStyle, zChartType, zColor, zColorLegend, zColumn, zColumnConfig, zColumnParallel, zColumnParallelConfig, zColumnPercent, zColumnPercentConfig, zConfig, zCrosshairLine, zCrosshairRect, zCustomTheme, zCustomThemeConfig, zDataset, zDatasetReshapeInfo, zDatum, zDimension, zDimensionGroup, zDimensionTree, zDimensions, zDonut, zDonutConfig, zDualAxisConfig, zEncoding, zFoldInfo, zFunnel, zFunnelConfig, zHeatmap, zHeatmapConfig, zLabel, zLegend, zLine, zLineConfig, zLineStyle, zLinearColor, zLocale, zMarkStyle, zMeasure, zMeasureGroup, zMeasureTree, zMeasures, zNumFormat, zPie, zPieConfig, zPivotTable, zPivotTableConfig, zPointStyle, zRadar, zRadarConfig, zRose, zRoseConfig, zRoseParallel, zRoseParallelConfig, zScatter, zScatterConfig, zSort, zSortLegend, zStackCornerRadius, zTable, zTableConfig, zTheme, zTooltip, zUnfoldInfo, zVSeed, zXBandAxis, zXLinearAxis, zYBandAxis, zYLinearAxis };\n\n//# sourceMappingURL=index.js.map"],"names":["b","performance","Date","Error","e","console","JSON","t","i","l","Object","Array","d","c","String","em","o","a","s","Intl","Number","p","r","Math"],"mappings":"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AAY,CACR,QAAS,GAAM,QACf,MAAO,CACH,UAAW,GAAM,UACjB,OAAQ,GAAM,SAClB,CACJ,EACA,aAAc,CACV,IACA,GACH,CACD,aAAc,CACV,KACA,GACH,AACL,EAKA,OAJA,EAAO,IAAI,CAAG,IACP,EAAO,IAAI,CACd,EACH,CACM,CACX,EACM,GAA0B,CAAC,EAAM,KACnC,IAAM,EAAS,CACX,GAAG,CAAI,AACX,EACM,CAAE,eAAa,CAAE,OAAK,CAAE,CAAG,EAC3B,CAAE,WAAS,CAAE,CAAG,EAChB,EAAS,EAAc,MAAM,EAAE,CAAC,EAAU,EAAE,cAClD,GAAI,CAAC,EAAQ,OAAO,CAChB,AAAC,GAAO,SAAS,EAAE,GAAO,SAAS,CAAG,CAAC,GAC3C,GAAM,CAAE,UAAU,EAAI,CAAE,WAAS,CAAE,YAAU,CAAE,cAAY,CAAE,sBAAoB,CAAE,CAAG,EAyBtF,OAvBA,AADkB,EAAO,SAAS,CACxB,MAAM,CAAG,CACf,UACA,KAAM,CACF,KAAM,OACN,MAAO,CACH,UAAW,EACX,QAAS,GACT,KAAM,CACV,CACJ,EACA,MAAO,CACH,QAAS,EACT,gBAAiB,CACb,QAAS,EACT,MAAO,CACH,KAAM,CACV,CACJ,EACA,MAAO,CACH,KAAM,CACV,CACJ,CACJ,EACO,CACX,EAgDM,GAAkB,CACpB,GAhDQ,CACR,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACH,CACgB,CACb,GACA,GACA,GACA,GACA,GAAgC,CAC5B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACH,EACD,GACA,GACA,GACH,EAGA,CACK,GAAc,KAChB,EAAQ,oBAAoB,CAAC,GAAG,CAAG,GACnC,EAAQ,gBAAgB,CAAC,GAAG,CAAG,EACnC,EACM,GAA8B,CAChC,EACA,GACA,GACA,GAAa,CACT,GACH,CAAE,CACC,GACH,EACD,GACA,GACA,GArsFsB,GAusFtB,EACA,GACA,GACH,CACK,GAAkB,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CAAG,EACxC,MAAO,CACH,GAAG,CAAM,CACT,CAAC,CAAC,MAAM,EAAE,EAAQ,EAAE,CAAC,CAAC,CAAE,CACpB,MAAO,EAAQ,EACf,OAAQ,AAAC,IAEL,IAAK,IAAM,KADM,CAAU,CAAC,CAAK,CAAC,GAAS,GAAG,CAAC,CACtB,GAAI,GAAkB,EAAG,EAAM,QAAQ,EAAG,MAAO,GAC1E,MAAO,EACX,EACA,MAAO,CACH,KAAM,EACN,YAAa,CACjB,CACJ,CACJ,CACJ,EAAG,CAAC,GACJ,MAAO,CACH,GAAGW,CAAM,CACT,KAAM,CACF,MAAO,CACH,GAAG,CAAS,AAChB,CACJ,CACJ,CACJ,EAqDM,GAAmB,CACrB,GArDc,CACd,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACH,CACiB,CACd,GACA,GACA,GACA,GACA,GAAgC,CAC5B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACH,EACD,GACA,GACA,GACH,EAGA,CACK,GAAe,KACjB,EAAQ,oBAAoB,CAAC,IAAI,CAAG,GACpC,EAAQ,gBAAgB,CAAC,IAAI,CAAG,EACpC,EACM,GAA8B,CAChC,EACA,GACA,GACA,GAAa,CACT,GACH,CAAE,CACC,GACH,EACD,GACA,GACA,GAt/FsB,GAw/FtB,EACA,GACA,GACH,CAqDK,GAA0B,CAC5B,GArDgB,CAChB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACH,CACwB,CACrB,GACA,GACA,GACA,GACA,GAAgC,CAC5B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACH,EACD,GACA,GACA,GACH,EAGA,CACK,GAAsB,KACxB,EAAQ,oBAAoB,CAAC,WAAW,CAAG,GAC3C,EAAQ,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,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACH,EACD,GACA,GACH,EAGA,CACK,GAAkB,KACpB,EAAQ,oBAAoB,CAAC,OAAO,CAAG,GACvC,EAAQ,gBAAgB,CAAC,OAAO,CAAG,EACvC,EACM,GAAa,KACf,IAAM,EAAa,CACf,KAAM,GACN,KAAM,GACN,QAAS,GACT,MAAO,CACH,QAAS,GACT,WAAY,EACZ,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,MAAO,CACH,QAAS,GACT,UAAW,GACX,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,KAAM,CACF,QAAS,GACT,UAAW,YACX,UAAW,EACf,EACA,KAAM,CACF,QAAS,GACT,WAAY,GACZ,SAAU,EACV,UAAW,WACf,EACA,KAAM,CACF,QAAS,GACT,UAAW,YACX,UAAW,CACf,CACJ,EACM,EAAW,CACb,cAAe,GACf,iBAAkB,EAClB,eAAgB,GAChB,qBAAsB,GACtB,gBAAiB,GACjB,0BAA2B,CACvB,EACA,IACA,IACH,CACD,MAAO,CACH,QAAS,GACT,WAAY,EACZ,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,MAAO,CACH,QAAS,GACT,UAAW,GACX,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,KAAM,CACF,QAAS,GACT,UAAW,YACX,UAAW,EACf,EACA,KAAM,CACF,QAAS,GACT,WAAY,GACZ,SAAU,EACV,UAAW,WACf,EACA,KAAM,CACF,QAAS,GACT,UAAW,YACX,UAAW,CACf,CACJ,EACM,EAAc,CAChB,GAAG,CAAQ,CACX,cAAe,GACf,iBAAkB,EAClB,eAAgB,GAChB,qBAAsB,KAAK,EAC3B,gBAAiB,GACjB,0BAA2B,CACvB,EACA,IACA,IACH,AACL,EACM,EAAgB,CAClB,QAAS,GACT,aAAc,GACd,UAAW,YACX,WAAY,UACZ,qBAAsB,SAC1B,EACM,EAAgB,CAClB,QAAS,GACT,aAAc,GACd,UAAW,YACX,WAAY,UACZ,qBAAsB,SAC1B,EACM,EAAa,CACf,gBAAiB,cACjB,MAAO,CACH,YAAa,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACH,AACL,EACA,MAAO,CACH,OAAQ,EACZ,EACA,QAAS,CACL,OAAQ,EACZ,EACA,OAAQ,CACJ,OAAQ,GACR,OAAQ,GACR,QAAS,EACT,UAAW,YACX,SAAU,KACV,eAAgB,UAChB,cAAe,GACf,gBAAiB,GACrB,CACJ,EACM,EAAc,CAChB,YAAa,UACb,aAAc,GACd,cAAe,UACf,oBAAqB,cACrB,eAAgB,GAChB,gBAAiB,UACjB,sBAAuB,UACvB,yBAA0B,UAC1B,+BAAgC,YAChC,2BAA4B,UAC5B,iCAAkC,YAClC,oBAAqB,UACrB,wBAAyB,WAC7B,EACA,MAAO,CACH,OAAQ,CACJ,MAAO,EACP,WAAY,EACZ,KAAM,CACF,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,eACJ,EACA,OAAQ,CACJ,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,eAAgB,CACZ,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,cAAe,CACX,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,IAAK,CACD,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,YAAa,CACT,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,WAAY,CACR,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,gBACA,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,KAAM,CACF,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,eACJ,EACA,YAAa,CACT,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,eACJ,EACA,UAAW,CACP,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,eACJ,EACA,QAAS,CACL,GAAG,CAAU,CACb,MAAO,CACH,GAAG,CAAU,CACb,KAAM,CACF,GAAG,EAAW,IAAI,CAClB,QAAS,EACb,CACJ,EACA,MAAO,CACH,GAAG,CAAU,CACb,KAAM,CACF,GAAG,EAAW,IAAI,CAClB,QAAS,EACb,CACJ,EACA,eACJ,EACA,IAAK,CACD,GAAG,CAAU,AACjB,EACA,MAAO,CACH,GAAG,CAAU,AACjB,EACA,MAAO,CACH,GAAG,CAAU,AACjB,EACA,KAAM,CACF,GAAG,CAAU,AACjB,EACA,aAAc,CACV,GAAG,CAAU,AACjB,EACA,OAAQ,CACJ,GAAG,CAAU,CACb,MAAO,CACH,YAAa,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACH,CAAC,OAAO,EACb,CACJ,EACA,QAAS,CACL,GAAG,CAAU,CACb,MAAO,CACH,YAAa,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACH,CAAC,OAAO,EACb,CACJ,CACJ,CACJ,CACJ,EACM,GAAY,KACd,IAAM,EAAa,CACf,KAAM,GACN,KAAM,GACN,MAAO,CACH,QAAS,GACT,WAAY,EACZ,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,MAAO,CACH,QAAS,GACT,UAAW,GACX,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,KAAM,CACF,QAAS,GACT,UAAW,UACX,UAAW,EACf,EACA,KAAM,CACF,QAAS,GACT,WAAY,GACZ,SAAU,EACV,UAAW,SACf,EACA,KAAM,CACF,QAAS,GACT,UAAW,UACX,UAAW,CACf,CACJ,EACM,EAAW,CACb,cAAe,GACf,iBAAkB,EAClB,eAAgB,GAChB,qBAAsB,GACtB,gBAAiB,GACjB,0BAA2B,CACvB,EACA,IACA,IACH,CACD,MAAO,CACH,QAAS,GACT,WAAY,EACZ,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,MAAO,CACH,QAAS,GACT,UAAW,GACX,WAAY,UACZ,cAAe,GACf,gBAAiB,GACrB,EACA,KAAM,CACF,QAAS,GACT,UAAW,UACX,UAAW,EACf,EACA,KAAM,CACF,QAAS,GACT,WAAY,GACZ,SAAU,EACV,UAAW,SACf,EACA,KAAM,CACF,QAAS,GACT,UAAW,UACX,UAAW,CACf,CACJ,EACM,EAAc,CAChB,GAAG,CAAQ,CACX,cAAe,GACf,iBAAkB,EAClB,eAAgB,GAChB,qBAAsB,KAAK,EAC3B,gBAAiB,GACjB,0BAA2B,CACvB,EACA,IACA,IACH,AACL,EACM,EAAgB,CAClB,QAAS,GACT,aAAc,GACd,UAAW,UACX,WAAY,UACZ,qBAAsB,SAC1B,EACM,EAAgB,CAClB,QAAS,GACT,aAAc,GACd,UAAW,UACX,WAAY,UACZ,qBAAsB,SAC1B,EACM,EAAa,CACf,gBAAiB,cACjB,MAAO,CACH,YAAa,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACH,AACL,EACA,MAAO,CACH,OAAQ,EACZ,EACA,QAAS,CACL,OAAQ,EACZ,EACA,OAAQ,CACJ,OAAQ,GACR,OAAQ,GACR,QAAS,EACT,SAAU,KACV,UAAW,YACX,eAAgB,UAChB,cAAe,GACf,gBAAiB,GACrB,CACJ,EACM,EAAc,CAChB,YAAa,UACb,aAAc,GACd,cAAe,UACf,oBAAqB,cACrB,eAAgB,GAChB,gBAAiB,UACjB,sBAAuB,UACvB,yBAA0B,YAC1B,+BAAgC,YAChC,2BAA4B,YAC5B,iCAAkC,UAClC,oBAAqB,UACrB,wBAAyB,WAC7B,EACA,MAAO,CACH,OAAQ,CACJ,MAAO,EACP,WAAY,EACZ,KAAM,CACF,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,CACnB,EACA,OAAQ,CACJ,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,eAAgB,CACZ,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,cAAe,CACX,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,IAAK,CACD,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,YAAa,CACT,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,WAAY,CACR,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,EACf,kBAAmB,CACf,EACA,EACA,EACA,EACH,AACL,EACA,KAAM,CACF,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,CACnB,EACA,YAAa,CACT,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,CACnB,EACA,UAAW,CACP,GAAG,CAAU,CACb,MAAO,EACP,MAAO,EACP,cAAe,CACnB,EACA,QAAS,CACL,GAAG,CAAU,CACb,MAAO,CACH,GAAG,CAAU,CACb,KAAM,CACF,GAAG,EAAW,IAAI,CAClB,QAAS,EACb,CACJ,EACA,MAAO,CACH,GAAG,CAAU,CACb,KAAM,CACF,GAAG,EAAW,IAAI,CAClB,QAAS,EACb,CACJ,EACA,eACJ,EACA,IAAK,CACD,GAAG,CAAU,AACjB,EACA,MAAO,CACH,GAAG,CAAU,AACjB,EACA,MAAO,CACH,GAAG,CAAU,AACjB,EACA,KAAM,CACF,GAAG,CAAU,AACjB,EACA,aAAc,CACV,GAAG,CAAU,AACjB,EACA,OAAQ,CACJ,GAAG,CAAU,CACb,MAAO,CACH,YAAa,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACH,AACL,CACJ,EACA,QAAS,CACL,GAAG,CAAU,AACjB,CACJ,CACJ,CACJ,EACM,GAAsB,CAAC,EAAK,KAC9B,IAAM,EAAc,YAAc,OAAO,EAAc,EAAY,CAC/D,WAAY,KACZ,UAAW,IACf,GAAK,CACL,GAAQ,SAAS,CAAC,EAAI,CAAG,CAC7B,EACM,GAAqB,KACvB,GAAoB,QAAS,KACjC,EACM,GAAoB,KACtB,GAAoB,O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"}